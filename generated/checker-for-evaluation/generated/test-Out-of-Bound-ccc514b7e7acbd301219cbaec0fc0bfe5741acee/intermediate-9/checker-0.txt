#include "clang/AST/ASTContext.h"
#include "clang/AST/Decl.h"
#include "clang/AST/Expr.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/Stmt.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Lex/Lexer.h"

#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "llvm/Support/raw_ostream.h"

using namespace clang;
using namespace ento;

// No custom program state is needed.

namespace {

/// Recursive visitor to inspect the body of the target function.
class DcfclkVisitor : public RecursiveASTVisitor<DcfclkVisitor> {
public:
  DcfclkVisitor(ASTContext &Ctx)
      : Context(Ctx), FoundDcfIndex(false), FoundGuard(false) {}

  // Visit any for-statement.
  bool TraverseForStmt(ForStmt *FS) {
    // For each ForStmt, reset the flags.
    FoundDcfIndex = false;
    FoundGuard = false;
    // Visit the components of the loop.
    RecursiveASTVisitor<DcfclkVisitor>::TraverseForStmt(FS);
    // If we found an access on DcfClocks and did not find a guard on the loop index,
    // then record an error.
    if (FoundDcfIndex && !FoundGuard)
      ReportForLoopFailures.push_back(FS);
    return true;
  }

  // Visit array subscript expressions. Check if the base of the subscript is "DcfClocks".
  bool VisitArraySubscriptExpr(ArraySubscriptExpr *ASE) {
    // Use utility function ExprHasName to check if the source text contains "DcfClocks".
    const Expr *BaseExpr = ASE->getBase()->IgnoreParenCasts();
    if (ExprHasName(BaseExpr, "DcfClocks", DummyCheckerContext))
      FoundDcfIndex = true;
    return true;
  }

  // Visit if statements to see if a guard is present.
  bool VisitIfStmt(IfStmt *IfS) {
    // Check the condition to see if it mentions "VG_NUM_DCFCLK_DPM_LEVELS"
    const Expr *Cond = IfS->getCond();
    if (Cond && ExprHasName(Cond, "VG_NUM_DCFCLK_DPM_LEVELS", DummyCheckerContext))
      FoundGuard = true;
    return true;
  }

  // Provide access to the reported for-loops.
  const std::vector<ForStmt *> &getReportForLoops() const { return ReportForLoopFailures; }

  // Dummy CheckerContext used solely for source retrieval by ExprHasName.
  // We create a temporary ASTContext wrapper.
  CheckerContext DummyCheckerContext = CheckerContext(nullptr, nullptr, nullptr);

private:
  ASTContext &Context;
  bool FoundDcfIndex;
  bool FoundGuard;
  std::vector<ForStmt *> ReportForLoopFailures;
};

class SAGenTestChecker : public Checker<check::ASTCodeBody> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Loop Index Out-of-Bounds",
                                      "Array Indexing")) {}

  void checkASTCodeBody(const Decl *D, AnalysisManager &Mgr,
                        BugReporter &BR) const;

};

void SAGenTestChecker::checkASTCodeBody(const Decl *D,
                                        AnalysisManager &Mgr,
                                        BugReporter &BR) const {
  const FunctionDecl *FD = dyn_cast<FunctionDecl>(D);
  if (!FD)
    return;

  // Limit our analysis to "find_dcfclk_for_voltage".
  if (FD->getNameAsString() != "find_dcfclk_for_voltage")
    return;

  const Stmt *Body = FD->getBody();
  if (!Body)
    return;

  ASTContext &Ctx = FD->getASTContext();
  DcfclkVisitor Visitor(Ctx);
  Visitor.TraverseStmt(const_cast<Stmt*>(Body));

  // Report a bug for each for-loop that potentially accesses DcfClocks without a guard.
  for (ForStmt *FS : Visitor.getReportForLoops()) {
    // Retrieve source location for the for-loop.
    SourceLocation SL = FS->getForLoc();

    // Create an error node.
    PathDiagnosticLocation Loc = PathDiagnosticLocation::createBegin(FS, BR.getSourceManager(), FD);
    auto R = std::make_unique<PathSensitiveBugReport>(
        *BT, "Loop index may exceed the bounds of DcfClocks", Loc);
    R->addRange(FS->getSourceRange());
    BR.emitReport(std::move(R));
  }
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects potential out-of-bounds access when looping beyond array DcfClocks", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
