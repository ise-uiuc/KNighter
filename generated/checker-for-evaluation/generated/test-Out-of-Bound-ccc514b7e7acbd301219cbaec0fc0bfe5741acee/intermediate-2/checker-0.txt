#include "clang/AST/Decl.h"
#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"
#include "clang/Basic/SourceLocation.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

// Add any other necessary includes here

using namespace clang;
using namespace ento;
using namespace taint;

namespace {

/// Helper function that recursively checks whether a given statement (or any of its children)
/// contains a branch condition that references "VG_NUM_DCFCLK_DPM_LEVELS".
/// Returns true if such an if-condition is found.
static bool containsGuardCheck(const Stmt *S, CheckerContext &C) {
  if (!S)
    return false;
  
  // If this is an if-statement, check its condition.
  if (const IfStmt *ifS = dyn_cast<IfStmt>(S)) {
    const Expr *Cond = ifS->getCond();
    if (Cond && ExprHasName(Cond, "VG_NUM_DCFCLK_DPM_LEVELS", C))
      return true;
  }
  
  // Recurse into children.
  for (const Stmt *Child : S->children()) {
    if (containsGuardCheck(Child, C))
      return true;
  }
  
  return false;
}

/// Helper function to determine if the index expression used in an array subscript
/// corresponds to the loop variable declared in the given ForStmt.
static bool isLoopVariable(const ForStmt *FS, const Expr *IdxExpr, CheckerContext &C) {
  if (!FS || !IdxExpr)
    return false;
  
  // Remove any implicit casts or parens.
  IdxExpr = IdxExpr->IgnoreParenCasts();

  // The index should be a DeclRefExpr.
  const DeclRefExpr *IdxDRE = dyn_cast<DeclRefExpr>(IdxExpr);
  if (!IdxDRE)
    return false;

  StringRef IndexVarName = IdxDRE->getDecl()->getDeclName().getAsString();

  // Get the initializer of the ForStmt.
  const Stmt *Init = FS->getInit();
  if (!Init)
    return false;

  // Look for a DeclStmt in the initializer.
  if (const DeclStmt *DS = dyn_cast<DeclStmt>(Init)) {
    for (const Decl *D : DS->decls()) {
      if (const VarDecl *VD = dyn_cast<VarDecl>(D)) {
        if (VD->getName() == IndexVarName)
          return true;
      }
    }
  }
  return false;
}

/// The main checker class.
class SAGenTestChecker : public Checker< check::PreStmt<ArraySubscriptExpr> > {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
    : BT(new BugType(this, "Buffer overflow", "Array bounds")) {}

  // Callback for pre-visiting ArraySubscriptExpr nodes.
  void checkPreStmt(const ArraySubscriptExpr *ASE, CheckerContext &C) const;

  // You can add additional helper functions in the private section if needed.
};

void SAGenTestChecker::checkPreStmt(const ArraySubscriptExpr *ASE, CheckerContext &C) const {
  // Check if the base of the subscript expression is a MemberExpr.
  const Expr *BaseExpr = ASE->getBase()->IgnoreParenCasts();
  const MemberExpr *ME = dyn_cast<MemberExpr>(BaseExpr);
  if (!ME)
    return;

  // Get the member's name. We are interested in "DcfClocks".
  const ValueDecl *MemberDecl = ME->getMemberDecl();
  if (!MemberDecl)
    return;

  if (MemberDecl->getNameAsString() != "DcfClocks")
    return;

  // At this point, we have an array subscript on DcfClocks.
  // Use the utility function to find the parent ForStmt.
  const ForStmt *FS = findSpecificTypeInParents<ForStmt>(ASE, C);
  if (!FS)
    return;

  // Check that the loop's condition uses the macro "VG_NUM_SOC_VOLTAGE_LEVELS".
  const Expr *LoopCond = FS->getCond();
  if (!LoopCond)
    return;

  if (!ExprHasName(LoopCond, "VG_NUM_SOC_VOLTAGE_LEVELS", C))
    return;

  // Ensure that the subscript index corresponds to the loop variable.
  const Expr *IdxExpr = ASE->getIdx();
  if (!isLoopVariable(FS, IdxExpr, C))
    return;

  // Now, check if the loop body has an explicit branch (guard) that checks against "VG_NUM_DCFCLK_DPM_LEVELS".
  const Stmt *LoopBody = FS->getBody();
  bool hasGuard = containsGuardCheck(LoopBody, C);

  // If the guard check is present, we assume the developer handled the array bound.
  if (hasGuard)
    return;

  // No guard against out-of-bound access was found.
  // Report a potential bug for out-of-bounds access.
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  
  auto Report = std::make_unique<PathSensitiveBugReport>(
      *BT,
      "Buffer overflow: DcfClocks array may be indexed out-of-bounds when using VG_NUM_SOC_VOLTAGE_LEVELS",
      N);
  Report->addRange(ASE->getSourceRange());
  C.emitReport(std::move(Report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects potential out-of-bounds access to DcfClocks array in find_dcfclk_for_voltage()", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
