#include "clang/AST/ASTContext.h"
#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

using namespace clang;
using namespace ento;
using namespace taint;

// No additional program state is required for this checker.

namespace {

/// This RecursiveASTVisitor inspects for-loops in the
/// "find_dcfclk_for_voltage" function body to detect potential overflow.
/// It looks for a for-loop whose condition uses VG_NUM_SOC_VOLTAGE_LEVELS and
/// inside the loop body, an array subscript accessing "DcfClocks"
/// is used without a preceding boundary check on "VG_NUM_DCFCLK_DPM_LEVELS".
class DcfClocksForLoopVisitor : public RecursiveASTVisitor<DcfClocksForLoopVisitor> {
  ASTContext &Context;
  std::vector<const ForStmt*> &OffendingLoops;

public:
  DcfClocksForLoopVisitor(ASTContext &Ctx, std::vector<const ForStmt*> &Loops)
      : Context(Ctx), OffendingLoops(Loops) {}

  bool VisitForStmt(ForStmt *FS) {
    // Check if the loop condition uses the VG_NUM_SOC_VOLTAGE_LEVELS macro.
    const Expr *Cond = FS->getCond();
    if (!Cond)
      return true;

    const SourceManager &SM = Context.getSourceManager();
    LangOptions LangOpts = Context.getLangOpts();
    StringRef CondText = Lexer::getSourceText(CharSourceRange::getTokenRange(Cond->getSourceRange()), SM, LangOpts);
    if (!CondText.contains("VG_NUM_SOC_VOLTAGE_LEVELS"))
      return true; // Not the targeted loop.

    // Prepare flags for detecting array access and boundary check.
    bool foundArrayAccess = false;
    bool foundBoundaryCheck = false;

    // A nested visitor to search the loop body.
    class BodyVisitor : public RecursiveASTVisitor<BodyVisitor> {
      ASTContext &Ctx;
      bool &FoundArray;
      bool &FoundBoundary;
    public:
      BodyVisitor(ASTContext &C, bool &FA, bool &FB)
          : Ctx(C), FoundArray(FA), FoundBoundary(FB) {}

      bool VisitArraySubscriptExpr(ArraySubscriptExpr *ASE) {
        // Check if the base expression is a MemberExpr that accesses "DcfClocks".
        Expr *BaseExpr = ASE->getBase()->IgnoreImplicit();
        if (MemberExpr *ME = dyn_cast<MemberExpr>(BaseExpr)) {
          StringRef MemberName = ME->getMemberNameInfo().getAsString();
          if (MemberName == "DcfClocks")
            FoundArray = true;
        }
        return true;
      }

      bool VisitIfStmt(IfStmt *IfS) {
        // Look into the condition of if-statements for a boundary check:
        // if (i >= VG_NUM_DCFCLK_DPM_LEVELS) or similar.
        Expr *IfCond = IfS->getCond();
        if (!IfCond)
          return true;
        const SourceManager &SM = Ctx.getSourceManager();
        LangOptions LangOpts = Ctx.getLangOpts();
        StringRef IfCondText = Lexer::getSourceText(CharSourceRange::getTokenRange(IfCond->getSourceRange()), SM, LangOpts);
        if (IfCondText.contains("VG_NUM_DCFCLK_DPM_LEVELS"))
          FoundBoundary = true;
        return true;
      }
    };

    BodyVisitor BV(Context, foundArrayAccess, foundBoundaryCheck);
    BV.TraverseStmt(FS->getBody());

    // If the loop accesses DcfClocks and has no boundary check using VG_NUM_DCFCLK_DPM_LEVELS,
    // then this loop is offending.
    if (foundArrayAccess && !foundBoundaryCheck)
      OffendingLoops.push_back(FS);

    return true;
  }
};

/// The checker class inspects the function "find_dcfclk_for_voltage" for a for-loop
/// that might lead to a buffer overflow by accessing clock_table->DcfClocks without proper bounds checking.
class SAGenTestChecker 
    : public Checker<check::ASTCodeBody> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Buffer Overflow (DcfClocks)", "Security")) {}

  void checkASTCodeBody(const Decl *D, AnalysisManager &Mgr, BugReporter &BR) const;

  // (No other callbacks needed for this check.)
};

void SAGenTestChecker::checkASTCodeBody(const Decl *D, AnalysisManager &Mgr, BugReporter &BR) const {
  // Only interested in function definitions.
  const FunctionDecl *FD = dyn_cast<FunctionDecl>(D);
  if (!FD || !FD->hasBody())
    return;

  // Check if the function name is "find_dcfclk_for_voltage".
  if (FD->getNameAsString() != "find_dcfclk_for_voltage")
    return;

  // Get the function body.
  Stmt *Body = FD->getBody();
  if (!Body)
    return;

  // Traverse the function body to locate offending for-loops.
  std::vector<const ForStmt*> OffendingLoops;
  DcfClocksForLoopVisitor Visitor(FD->getASTContext(), OffendingLoops);
  Visitor.TraverseStmt(Body);

  // If any offending loop is found, emit a bug report for each.
  for (const ForStmt *FS : OffendingLoops) {
    // Generate a non-fatal error node for the bug.
    PathDiagnosticLocation Loc =
        PathDiagnosticLocation::createBegin(FS, BR.getSourceManager());
    ExplodedNode *N = BR.getOrCreateBugReportNode(BR, Loc);
    if (!N)
      continue;
    auto Report = std::make_unique<PathSensitiveBugReport>(
        *BT, "Possible overflow accessing DcfClocks array: the loop index may exceed "
             "the allocated size (VG_NUM_DCFCLK_DPM_LEVELS), leading to a buffer overflow.",
        N);
    Report->addRange(FS->getSourceRange());
    BR.emitReport(std::move(Report));
  }
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects potential buffer overflow in 'find_dcfclk_for_voltage' due to mismatched array sizes", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
