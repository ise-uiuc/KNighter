#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

// Additional includes for AST traversal and lexer utilities.
#include "clang/AST/ASTContext.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/Expr.h"
#include "clang/Lex/Lexer.h"

using namespace clang;
using namespace ento;
using namespace taint;

// No custom program states are needed for this checker.

namespace {

/// ForLoopVisitor traverses the AST of a function body and finds ForStmt nodes
/// that use VG_NUM_SOC_VOLTAGE_LEVELS as loop bound and then use the loop index
/// to index into the DcfClocks array without a proper bound check using 
/// VG_NUM_DCFCLK_DPM_LEVELS.
class ForLoopVisitor : public RecursiveASTVisitor<ForLoopVisitor> {
  BugReporter &BR;
  const ASTContext &Ctx;
  const SourceManager &SM;
  const LangOptions &LangOpts;
  const BugType *BT; // BugType pointer for reporting.
  
public:
  ForLoopVisitor(BugReporter &br, const ASTContext &context, const BugType *bt)
    : BR(br), Ctx(context), SM(context.getSourceManager()), LangOpts(context.getLangOpts()), BT(bt) {}

  // Helper: Check if the given statement contains an if-statement
  // whose condition text uses the macro "VG_NUM_DCFCLK_DPM_LEVELS".
  bool hasProperCheck(const Stmt *S) {
    // Traverse the children of S recursively.
    for (const Stmt *Child : S->children()) {
      if (!Child)
        continue;
      if (const IfStmt *IfS = dyn_cast<IfStmt>(Child)) {
        Expr *Cond = IfS->getCond();
        if (Cond) {
          CharSourceRange Range = CharSourceRange::getTokenRange(Cond->getSourceRange());
          StringRef CondText = Lexer::getSourceText(Range, SM, LangOpts);
          if (CondText.contains("VG_NUM_DCFCLK_DPM_LEVELS"))
            return true; // Found proper check.
        }
      }
      // Recursively check child statements.
      if (hasProperCheck(Child))
        return true;
    }
    return false;
  }
  
  // Main visitor for ForStmt.
  bool VisitForStmt(ForStmt *FS) {
    // Check if the loop has a condition.
    Expr *Cond = FS->getCond();
    if (!Cond)
      return true;
      
    // Use the Lexer to retrieve the textual representation of the condition.
    CharSourceRange CondRange = CharSourceRange::getTokenRange(Cond->getSourceRange());
    StringRef CondText = Lexer::getSourceText(CondRange, SM, LangOpts);
    
    // We are only interested in loops whose condition uses VG_NUM_SOC_VOLTAGE_LEVELS.
    if (!CondText.contains("VG_NUM_SOC_VOLTAGE_LEVELS"))
      return true;
    
    // Extract the loop index variable from the for-loop initializer.
    StringRef LoopVarName;
    if (Stmt *Init = FS->getInit()) {
      if (DeclStmt *DS = dyn_cast<DeclStmt>(Init)) {
        for (Decl *D : DS->decls()) {
          if (VarDecl *VD = dyn_cast<VarDecl>(D)) {
            // Assume the first declared variable is the loop index.
            LoopVarName = VD->getName();
            break;
          }
        }
      }
    }
    
    if (LoopVarName.empty())
      return true; // Couldn't determine the loop variable.
      
    // Check if the loop body has any if-statement that checks VG_NUM_DCFCLK_DPM_LEVELS.
    const Stmt *LoopBody = FS->getBody();
    bool properCheck = hasProperCheck(LoopBody);
    if (properCheck)
      return true; // Proper bound check exists.
      
    // Look for an ArraySubscriptExpr that accesses "DcfClocks".
    if (const ArraySubscriptExpr *ASE = findSpecificTypeInChildren<ArraySubscriptExpr>(LoopBody)) {
      // Check that the array being accessed is "DcfClocks".
      const Expr *BaseExpr = ASE->getBase()->IgnoreImplicit();
      if (!ExprHasName(BaseExpr, "DcfClocks", CheckerContext(nullptr)))
        return true; // Not our target array.
      
      // Check that the index expression is the same as the loop variable.
      const Expr *IdxExpr = ASE->getIdx()->IgnoreParenCasts();
      if (const DeclRefExpr *DRE = dyn_cast<DeclRefExpr>(IdxExpr)) {
        StringRef IndexVarName = DRE->getNameInfo().getName().getAsString();
        // Compare with loop variable name.
        if (IndexVarName.equals(LoopVarName)) {
          // Report a bug: loop index may exceed array bounds.
          PathDiagnosticLocation Loc = PathDiagnosticLocation::createBegin(FS, SM);
          auto R = std::make_unique<BasicBugReport>(
              *BT,
              "Possible out-of-bound access: loop index based on VG_NUM_SOC_VOLTAGE_LEVELS "
              "may exceed array bounds of DcfClocks (expected VG_NUM_DCFCLK_DPM_LEVELS)",
              Loc);
          R->addRange(FS->getSourceRange());
          BR.emitReport(std::move(R));
        }
      }
    }
    return true;
  }
  
};

class SAGenTestChecker : public Checker<check::ASTCodeBody> {
  mutable std::unique_ptr<BugType> BT;
public:
  SAGenTestChecker() : BT(new BugType(this, "Loop Iterator Out-of-Bounds",
    "The loop iterates using VG_NUM_SOC_VOLTAGE_LEVELS without checking against the smaller array size of DcfClocks")) {}

  void checkASTCodeBody(const Decl *D, AnalysisManager &Mgr, BugReporter &BR) const {
    // We only care about function definitions.
    const FunctionDecl *FD = dyn_cast<FunctionDecl>(D);
    if (!FD || !FD->hasBody())
      return;
      
    // Traverse the function body with our custom ForLoopVisitor.
    ForLoopVisitor Visitor(BR, D->getASTContext(), BT.get());
    Visitor.TraverseStmt(FD->getBody());
  }
};

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects loops that may access DcfClocks out-of-bound by using VG_NUM_SOC_VOLTAGE_LEVELS without proper checking against VG_NUM_DCFCLK_DPM_LEVELS",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
