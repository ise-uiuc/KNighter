#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Register a program state map to track whether a pointer returned from
// devm_gpiod_get_array_optional has been checked for NULL.
REGISTER_MAP_WITH_PROGRAMSTATE(OptionalPtrCheckedMap, const MemRegion*, bool)
// Register an alias map for pointer propagation.
REGISTER_MAP_WITH_PROGRAMSTATE(PtrAliasMap, const MemRegion*, const MemRegion*)

// Helper function to mark a pointer (and its alias, if any) as checked.
ProgramStateRef setOptionalChecked(ProgramStateRef State, const MemRegion *MR) {
  if (!MR)
    return State;
    
  State = State->set<OptionalPtrCheckedMap>(MR, true);
  if (const MemRegion *Alias = State->get<PtrAliasMap>(MR))
    State = State->set<OptionalPtrCheckedMap>(Alias, true);
  return State;
}

namespace {

class SAGenTestChecker
  : public Checker< check::PostCall,       // To intercept devm_gpiod_get_array_optional calls.
                     check::BranchCondition, // To detect explicit NULL-checks on optional pointers.
                     check::Location,        // To catch dereferences of optional pointers.
                     check::Bind >           // To track pointer aliasing.
{
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
    : BT(new BugType(this, "Dereference of optional pointer without NULL-check")) {}

  // Callback: after a function call is evaluated.
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const;
  // Callback: when a branch condition is evaluated.
  void checkBranchCondition(const Stmt *Condition, CheckerContext &C) const;
  // Callback: when a location (memory read/write) is accessed.
  void checkLocation(SVal Loc, bool IsLoad, const Stmt *S, CheckerContext &C) const;
  // Callback: to track pointer aliasing.
  void checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const;
};

void SAGenTestChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;

  // Using utility function to check the call's name accurately.
  if (!ExprHasName(OriginExpr, "devm_gpiod_get_array_optional", C))
    return;

  // Get the return value region.
  const MemRegion *RetMR = Call.getReturnValue().getAsRegion();
  if (!RetMR)
    return;
  RetMR = RetMR->getBaseRegion();
  if (!RetMR)
    return;
  // Mark this optional pointer as "unchecked": false.
  State = State->set<OptionalPtrCheckedMap>(RetMR, false);
  C.addTransition(State);
}

void SAGenTestChecker::checkBranchCondition(const Stmt *Condition, CheckerContext &C) const {
  ProgramStateRef State = C.getState();

  // We need to see if the condition is checking a pointer returned by devm_gpiod_get_array_optional.
  const Expr *CondE = dyn_cast<Expr>(Condition);
  if (!CondE) {
    C.addTransition(State);
    return;
  }
  // Remove extra casts and parens.
  CondE = CondE->IgnoreParenCasts();

  // Case 1: if (!ptr)
  if (const auto *UO = dyn_cast<UnaryOperator>(CondE)) {
    if (UO->getOpcode() == UO_LNot) {
      const Expr *SubE = UO->getSubExpr()->IgnoreParenCasts();
      SVal SubVal = State->getSVal(SubE, C.getLocationContext());
      if (const MemRegion *MR = SubVal.getAsRegion()) {
        MR = MR->getBaseRegion();
        // If this pointer is tracked in OptionalPtrCheckedMap, mark it as checked.
        const bool *Checked = State->get<OptionalPtrCheckedMap>(MR);
        if (Checked && *Checked == false) {
          State = setOptionalChecked(State, MR);
          C.addTransition(State);
          return;
        }
      }
    }
  }
  // Case 2: if (ptr != NULL) or if (ptr == NULL)
  else if (const auto *BO = dyn_cast<BinaryOperator>(CondE)) {
    BinaryOperator::Opcode Op = BO->getOpcode();
    if (Op == BO_NE || Op == BO_EQ) {
      const Expr *LHS = BO->getLHS()->IgnoreParenCasts();
      const Expr *RHS = BO->getRHS()->IgnoreParenCasts();
      bool LHSIsNull = LHS->isNullPointerConstant(C.getASTContext(), Expr::NPC_ValueDependentIsNull);
      bool RHSIsNull = RHS->isNullPointerConstant(C.getASTContext(), Expr::NPC_ValueDependentIsNull);
      const Expr *PtrExpr = (!LHSIsNull && RHSIsNull) ? LHS :
                              (!RHSIsNull && LHSIsNull) ? RHS : nullptr;
      if (PtrExpr) {
        SVal PtrVal = State->getSVal(PtrExpr, C.getLocationContext());
        if (const MemRegion *MR = PtrVal.getAsRegion()) {
          MR = MR->getBaseRegion();
          const bool *Checked = State->get<OptionalPtrCheckedMap>(MR);
          if (Checked && *Checked == false) {
            // Mark as checked.
            State = setOptionalChecked(State, MR);
            C.addTransition(State);
            return;
          }
        }
      }
    }
  }
  // Case 3: if (ptr)
  else {
    SVal CondVal = State->getSVal(CondE, C.getLocationContext());
    if (const MemRegion *MR = CondVal.getAsRegion()) {
      MR = MR->getBaseRegion();
      const bool *Checked = State->get<OptionalPtrCheckedMap>(MR);
      if (Checked && *Checked == false) {
        State = setOptionalChecked(State, MR);
        C.addTransition(State);
        return;
      }
    }
  }
  C.addTransition(State);
}

void SAGenTestChecker::checkLocation(SVal Loc, bool IsLoad, const Stmt *S, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  if (const MemRegion *MR = Loc.getAsRegion()) {
    MR = MR->getBaseRegion();
    if (!MR)
      return;
    // Check if this pointer comes from devm_gpiod_get_array_optional.
    const bool *Checked = State->get<OptionalPtrCheckedMap>(MR);
    // Only report if it is tracked AND not checked.
    if (Checked && *Checked == false) {
      ExplodedNode *N = C.generateNonFatalErrorNode();
      if (!N)
        return;
      auto Report = std::make_unique<PathSensitiveBugReport>(
          *BT, "Optional pointer from devm_gpiod_get_array_optional not NULL-checked before dereference", N);
      Report->addRange(S->getSourceRange());
      C.emitReport(std::move(Report));
    }
  }
}

void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  // When a value is bound to a memory region, track pointer aliasing.
  if (const MemRegion *LHSReg = Loc.getAsRegion()) {
    LHSReg = LHSReg->getBaseRegion();
    if (!LHSReg)
      return;
    if (const MemRegion *RHSReg = Val.getAsRegion()) {
      RHSReg = RHSReg->getBaseRegion();
      if (!RHSReg)
        return;
      State = State->set<PtrAliasMap>(LHSReg, RHSReg);
      State = State->set<PtrAliasMap>(RHSReg, LHSReg);
    }
  }
  C.addTransition(State);
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects dereference of a pointer from devm_gpiod_get_array_optional without a preceding NULL-check",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
