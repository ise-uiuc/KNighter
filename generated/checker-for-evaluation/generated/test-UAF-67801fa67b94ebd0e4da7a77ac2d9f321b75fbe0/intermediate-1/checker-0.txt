#include "clang/AST/Expr.h"
#include "clang/AST/MemberExpr.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Customize Program States:
// A map to track which queue objects have had their unique identifier (uid)
// exposed via xa_alloc.
REGISTER_MAP_WITH_PROGRAMSTATE(ExposedQueueMap, const MemRegion*, bool)

namespace {

class SAGenTestChecker : public Checker<check::PostCall, check::Bind> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Premature UID Exposure")) {}

  // Callback: Called after a function call is evaluated.
  // We look for calls to "xa_alloc" and record that the queue object's uid got exposed.
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const {
    // Use the origin expression to accurately check function name.
    const Expr *OriginExpr = Call.getOriginExpr();
    if (!OriginExpr)
      return;
    // Check that the call is to "xa_alloc"
    if (!ExprHasName(OriginExpr, "xa_alloc", C))
      return;
    
    // xa_alloc's signature:
    //   err = xa_alloc(&xef->exec_queue.xa, &id, q, xa_limit_32b, GFP_KERNEL);
    // The third argument (index 2) is the queue pointer 'q'
    if (Call.getNumArgs() < 3)
      return;
    SVal QArgVal = Call.getArgSVal(2);
    const MemRegion *QueueMR = QArgVal.getAsRegion();
    if (!QueueMR)
      return;
    QueueMR = QueueMR->getBaseRegion();
    if (!QueueMR)
      return;
    
    ProgramStateRef State = C.getState();
    State = State->set<ExposedQueueMap>(QueueMR, true);
    C.addTransition(State);
  }

  // Callback: Called when a value is bound to a memory location.
  // We look for assignments to the "xef" field, as this assignment
  // completes the initialization of the queue object.
  void checkBind(SVal Loc, SVal /*Val*/, const Stmt *StoreE, CheckerContext &C) const {
    if (!StoreE)
      return;
    
    // The binding should be for a member access.
    const Expr *StoreExpr = StoreE->IgnoreImplicit();
    const MemberExpr *ME = dyn_cast<MemberExpr>(StoreExpr);
    if (!ME)
      return;
    
    // Check if the member being assigned is named "xef".
    if (ME->getMemberDecl()->getNameAsString() != "xef")
      return;
    
    // Get the base object of the member expression.
    const Expr *BaseExpr = ME->getBase()->IgnoreImplicit();
    if (!BaseExpr)
      return;
    const MemRegion *BaseMR = getMemRegionFromExpr(BaseExpr, C);
    if (!BaseMR)
      return;
    BaseMR = BaseMR->getBaseRegion();
    if (!BaseMR)
      return;
    
    ProgramStateRef State = C.getState();
    // If the queue object's uid has been exposed already,
    // then binding the xef field is occurring after uid exposure.
    const bool *Exposed = State->get<ExposedQueueMap>(BaseMR);
    if (Exposed && *Exposed) {
      ExplodedNode *N = C.generateNonFatalErrorNode();
      if (N) {
        auto Report = std::make_unique<PathSensitiveBugReport>(
            *BT, "Premature UID exposure leads to potential use-after-free", N);
        Report->addRange(StoreE->getSourceRange());
        C.emitReport(std::move(Report));
      }
    }
    C.addTransition(State);
  }
};

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects ordering issues where an object's uid is exposed via xa_alloc before the object is fully initialized",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
