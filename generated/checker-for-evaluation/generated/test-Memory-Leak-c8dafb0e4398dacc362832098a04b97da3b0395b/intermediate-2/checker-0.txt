#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/Lex/Lexer.h"  // For source text extraction if needed

using namespace clang;
using namespace ento;
using namespace taint;

// REGISTER a program state map to track the cleanup flag for a given "req" resource.
REGISTER_MAP_WITH_PROGRAMSTATE(CleanupMap, const MemRegion *, bool)

namespace {

class SAGenTestChecker : public Checker<check::PostCall, check::PreStmt> {
  mutable std::unique_ptr<BugType> BT;
public:
  SAGenTestChecker() : BT(new BugType(this, "Missing Resource Cleanup")) {}

  // Called after a function call is processed.
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const;

  // Called just before a ReturnStmt is processed.
  void checkPreStmt(const ReturnStmt *RS, CheckerContext &C) const;
};

// Helper function: Extract the "req" pointer argument at the given index,
// get its MemRegion and then its base region.
static const MemRegion *extractReqRegion(const CallEvent &Call, unsigned ArgIdx, CheckerContext &C) {
  if (Call.getNumArgs() <= ArgIdx)
    return nullptr;
  const Expr *ReqExpr = Call.getArgExpr(ArgIdx);
  if (!ReqExpr)
    return nullptr;
  const MemRegion *MR = getMemRegionFromExpr(ReqExpr, C);
  if (!MR)
    return nullptr;
  return MR->getBaseRegion();
}

void SAGenTestChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();

  // Retrieve the origin expression for name checking.
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;

  // Check for hwrm_req_init: mark the "req" as not cleaned (false)
  if (ExprHasName(OriginExpr, "hwrm_req_init", C)) {
    // Assume the second argument is the req pointer.
    const MemRegion *ReqRegion = extractReqRegion(Call, 1, C);
    if (!ReqRegion)
      return;
    // Set cleanup flag false (i.e. not yet dropped)
    State = State->set<CleanupMap>(ReqRegion, false);
    C.addTransition(State);
    return;
  }

  // Check for hwrm_req_drop: update the cleanup flag to true.
  if (ExprHasName(OriginExpr, "hwrm_req_drop", C)) {
    // Assume the second argument is the req pointer.
    const MemRegion *ReqRegion = extractReqRegion(Call, 1, C);
    if (!ReqRegion)
      return;
    State = State->set<CleanupMap>(ReqRegion, true);
    C.addTransition(State);
    return;
  }

  // Check for hwrm_req_replace: if its return value indicates error, then
  // the resource is not cleaned up.
  if (ExprHasName(OriginExpr, "hwrm_req_replace", C)) {
    llvm::APSInt EvalRes;
    if (EvaluateExprToInt(EvalRes, OriginExpr, C)) {
      // If error occurred, we do not update the cleanup flag.
      // The bug will be reported later if cleanup was not performed.
      if (EvalRes != 0) {
        // Optionally, additional state bookkeeping can be done here if needed.
      }
    }
    C.addTransition(State);
    return;
  }
}

void SAGenTestChecker::checkPreStmt(const ReturnStmt *RS, CheckerContext &C) const {
  ProgramStateRef State = C.getState();

  // Iterate through all tracked "req" resources in the CleanupMap.
  // If any resource is still marked as not cleaned (false),
  // then report a bug.
  for (ProgramStateRef::factory_iterator I = State->begin<CleanupMap>(),
         E = State->end<CleanupMap>(); I != E; ++I) {
    const MemRegion *ReqRegion = I.getKey();
    bool Cleaned = I.getData();
    if (!Cleaned) {
      ExplodedNode *N = C.generateNonFatalErrorNode();
      if (!N)
        continue;
      auto Report = std::make_unique<PathSensitiveBugReport>(
          *BT, "Missing cleanup: request resource not released causing potential memory leak", N);
      Report->addRange(RS->getSourceRange());
      C.emitReport(std::move(Report));
      // Report once per resource.
    }
  }
  C.addTransition(State);
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects error paths that bypass hwrm_req_drop causing a potential resource leak", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
