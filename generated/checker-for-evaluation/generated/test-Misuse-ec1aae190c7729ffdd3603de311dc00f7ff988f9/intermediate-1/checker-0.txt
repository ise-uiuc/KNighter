#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/AST/Expr.h"
#include "clang/Lex/Lexer.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Register a program state map to track whether an event object's counter
// (i.e. 'datalen') has been updated. The key is the event object's base MemRegion
// and the value is 'true' if the counter has been updated.
REGISTER_MAP_WITH_PROGRAMSTATE(UpdatedCountMap, const MemRegion*, bool)

namespace {

class SAGenTestChecker : public Checker<check::PreCall, check::Bind> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
      : BT(new BugType(this, "Flexible array accessed before counter update")) {}

  // Callback invoked before a function call.
  // We use it to intercept memcpy calls and check for mis-ordered access.
  void checkPreCall(const CallEvent &Call, CheckerContext &C) const;

  // Callback invoked when a value is bound to a memory region.
  // We use it to record assignments to the 'datalen' field.
  void checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const;
};

void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *StoreE,
                                 CheckerContext &C) const {
  // Only consider bindings where the left-hand side's source text contains "datalen".
  if (!StoreE)
    return;
  if (!ExprHasName(StoreE, "datalen", C))
    return;

  // Cast the store expression to an Expr.
  const Expr *Ex = dyn_cast<Expr>(StoreE);
  if (!Ex)
    return;

  // Retrieve the memory region corresponding to this expression.
  const MemRegion *MR = getMemRegionFromExpr(Ex, C);
  if (!MR)
    return;
  MR = MR->getBaseRegion();
  if (!MR)
    return;

  // Update the program state: mark this event object as having its counter updated.
  ProgramStateRef State = C.getState();
  State = State->set<UpdatedCountMap>(MR, true);
  C.addTransition(State);
}

void SAGenTestChecker::checkPreCall(const CallEvent &Call, CheckerContext &C) const {
  // First, ensure the call originates from a memcpy invocation.
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;
  if (!ExprHasName(OriginExpr, "memcpy", C))
    return;

  // For memcpy(dest, src, size), we are interested in the destination argument.
  const Expr *DestExpr = dyn_cast_or_null<Expr>(Call.getArgExpr(0));
  if (!DestExpr)
    return;

  // Check if the destination expression's printed form includes "data",
  // which indicates it is accessing the flexible array member.
  if (!ExprHasName(DestExpr, "data", C))
    return;

  // Use an upward AST search to find the event object associated with this access.
  // This may be done via findSpecificTypeInParents; if that fails, fallback on its region.
  const MemRegion *EventMR = findSpecificTypeInParents<DeclRefExpr>(DestExpr, C);
  if (!EventMR) {
    EventMR = getMemRegionFromExpr(DestExpr, C);
    if (!EventMR)
      return;
  }
  EventMR = EventMR->getBaseRegion();
  if (!EventMR)
    return;

  // Check the program state to see whether the 'datalen' field was updated.
  ProgramStateRef State = C.getState();
  const bool *Updated = State->get<UpdatedCountMap>(EventMR);
  if (!Updated || *Updated == false) {
    ExplodedNode *N = C.generateNonFatalErrorNode();
    if (!N)
      return;
    auto report = std::make_unique<PathSensitiveBugReport>(
        *BT,
        "Flexible array member 'data' accessed before 'datalen' is updated",
        N);
    C.emitReport(std::move(report));
  }
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects accesses to a flexible-array member ('data') before its counter ('datalen') is updated",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
