#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Lex/Lexer.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Customize program states:
// Map for tracking whether the flexible-array counter ("datalen") has been updated.
// The key is the MemRegion for the event object (e.g. the structure containing both
// the counter and the flexible array member "data").
REGISTER_MAP_WITH_PROGRAMSTATE(FlexCounterUpdatedMap, const MemRegion *, bool)
// An optional pointer alias map to track aliasing for the event pointer.
REGISTER_MAP_WITH_PROGRAMSTATE(PtrAliasMap, const MemRegion *, const MemRegion *)

namespace {

class SAGenTestChecker : public Checker<check::Bind, check::PreCall> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Flexible array counter update ordering",
                                          "Memory Corruption")) {}

  // Callback invoked when a value is bound to a memory location.
  // We look for bindings to the counter field "datalen".
  void checkBind(SVal L, SVal R, const Stmt *S, CheckerContext &C) const;
  
  // Callback invoked before a function call is executed.
  // We intercept memcpy calls to check that the flexible array ("data") is not used
  // prior to the counter update.
  void checkPreCall(const CallEvent &Call, CheckerContext &C) const;

private:
  // Helper: Given a MemRegion representing (or within) an event,
  // update the FlexCounterUpdatedMap to true.
  ProgramStateRef markCounterUpdated(ProgramStateRef State, const MemRegion *MR) const;

  // Helper: Try to resolve the event object from a given region (using base region and pointer aliasing).
  const MemRegion *resolveEventRegion(const MemRegion *MR, ProgramStateRef State) const;
};

ProgramStateRef SAGenTestChecker::markCounterUpdated(ProgramStateRef State, const MemRegion *MR) const {
  if (!MR)
    return State;
  // Use the base region as the canonical event pointer.
  const MemRegion *Base = MR->getBaseRegion();
  if (!Base)
    return State;
  State = State->set<FlexCounterUpdatedMap>(Base, true);
  
  // Also update the alias map if present.
  if (const MemRegion *Alias = State->get<PtrAliasMap>(Base)) {
    State = State->set<FlexCounterUpdatedMap>(Alias, true);
  }
  return State;
}

const MemRegion *SAGenTestChecker::resolveEventRegion(const MemRegion *MR, ProgramStateRef State) const {
  if (!MR)
    return nullptr;
  // The base region of the flexible member should be the event object.
  const MemRegion *Base = MR->getBaseRegion();
  if (Base)
    return Base;
  // Also check alias if available.
  if (const MemRegion *Alias = State->get<PtrAliasMap>(MR))
    return Alias->getBaseRegion();
  return MR;
}

void SAGenTestChecker::checkBind(SVal L, SVal R, const Stmt *S, CheckerContext &C) const {
  // We are interested in binding where the LHS has "datalen"
  // Note: Do NOT call IgnoreImplicit() before getMemRegionFromExpr().
  const Expr *LE = dyn_cast_or_null<Expr>(S);
  if (!LE)
    return;
  
  // Use utility function ExprHasName() to check for "datalen" in the LHS.
  if (!ExprHasName(LE, "datalen", C))
    return;
  
  // Get the memory region from the LHS expression.
  const MemRegion *MR = getMemRegionFromExpr(LE, C);
  if (!MR)
    return;
  MR = MR->getBaseRegion();
  if (!MR)
    return;
  
  // Mark the counter (datalen) as updated for its event object.
  ProgramStateRef State = C.getState();
  State = markCounterUpdated(State, MR);
  C.addTransition(State);
  
  // Also, record pointer aliasing for future reference.
  // If R is also an address, store alias relation.
  if (const MemRegion *RMR = R.getAsRegion()) {
    RMR = RMR->getBaseRegion();
    if (RMR) {
      State = State->set<PtrAliasMap>(MR, RMR);
      State = State->set<PtrAliasMap>(RMR, MR);
      C.addTransition(State);
    }
  }
}

void SAGenTestChecker::checkPreCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  // Intercept calls to memcpy
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;
  
  // Use ExprHasName to check if the destination argument contains "data",
  // which implies the flexible array member is being accessed.
  // In memcpy, the destination argument is the first argument (index 0).
  if (!ExprHasName(Call.getArgExpr(0), "data", C))
    return;
  
  // Retrieve the destination memory region
  const MemRegion *DestMR = getMemRegionFromExpr(Call.getArgExpr(0), C);
  if (!DestMR)
    return;
  
  // Get the base region that represents the event structure.
  const MemRegion *EventMR = resolveEventRegion(DestMR, State);
  if (!EventMR)
    return;
  
  // Check if the counter field has been updated.
  const bool *Updated = State->get<FlexCounterUpdatedMap>(EventMR);
  // If updated is not true (i.e. either false or not set), then a memcpy
  // accessing the flexible array "data" is performed before updating "datalen".
  if (!Updated || (*Updated == false)) {
    ExplodedNode *N = C.generateNonFatalErrorNode();
    if (!N)
      return;
    auto Report = std::make_unique<PathSensitiveBugReport>(
                      *BT, "Flexible array counter updated after data access", N);
    Report->addRange(Call.getSourceRange());
    C.emitReport(std::move(Report));
  }
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Checks that the flexible array counter (datalen) is updated before data access",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
