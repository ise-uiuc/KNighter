#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include <string>

using namespace clang;
using namespace ento;
using namespace taint;

// Customize program states:
// Map that tracks if a given reset_data region has already been freed.
REGISTER_MAP_WITH_PROGRAMSTATE(ResetDataFreeMap, const MemRegion*, bool)
// Map that tracks if a call to completion_done() has been observed for the reset_data's "compl" field.
REGISTER_MAP_WITH_PROGRAMSTATE(ResetDataCompletionCheckedMap, const MemRegion*, bool)
// Map to track pointer aliasing.
REGISTER_MAP_WITH_PROGRAMSTATE(PtrAliasMap, const MemRegion*, const MemRegion*)

namespace {

// The checker intercepts branch conditions and kfree calls,
// as well as pointer binding, to detect a race condition where reset_data
// is freed without proper synchronization (i.e. without checking completion_done).
class SAGenTestChecker 
    : public Checker< check::BranchCondition, check::PostCall, check::Bind > {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
      : BT(new BugType(this, "Race condition: reset_data free without completion check", "Race Condition")) {}

  void checkBranchCondition(const Stmt *Condition, CheckerContext &C) const;
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const;
  void checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const;

private:
  void reportRaceCondition(const MemRegion *MR, CheckerContext &C, const char *Msg) const;
};

/// checkBranchCondition - Called when evaluating a branch condition.
/// We look for a condition that calls "completion_done" to indicate that the reset_data's
/// "compl" field has been checked.
void SAGenTestChecker::checkBranchCondition(const Stmt *Condition, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  if (!Condition)
    return;

  // First, check if the source text of the condition contains "completion_done"
  // using the provided utility function.
  const Expr *CondE = dyn_cast<Expr>(Condition);
  if (!CondE)
    return;
  if (!ExprHasName(CondE, "completion_done", C))
    return;

  // Locate the call expression inside the condition.
  const CallExpr *CallE = findSpecificTypeInChildren<CallExpr>(Condition, C);
  if (!CallE)
    return;

  // Verify that this call is indeed to completion_done.
  const Expr *OriginExpr = CallE;
  if (!ExprHasName(OriginExpr, "completion_done", C))
    return;

  // Assume the first argument to completion_done is the pointer to the completion structure.
  if (CallE->getNumArgs() < 1)
    return;
  const Expr *Arg = CallE->getArg(0);
  if (!Arg)
    return;
  const MemRegion *MR = getMemRegionFromExpr(Arg, C);
  if (!MR)
    return;
  MR = MR->getBaseRegion();
  if (!MR)
    return;

  // Mark this region as having been checked (i.e. completion_done was called).
  State = State->set<ResetDataCompletionCheckedMap>(MR, true);
  C.addTransition(State);
}

/// checkPostCall - Called after a function call is evaluated.
/// We intercept calls to "kfree" and check whether the reset_data region is being freed more than once
/// or freed without an observed completion_done check.
void SAGenTestChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;
  // Check if the call is to "kfree" by inspecting its origin expression.
  if (!ExprHasName(OriginExpr, "kfree", C))
    return;

  // Extract the first argument of kfree: the pointer being freed.
  if (Call.getNumArgs() < 1)
    return;
  const Expr *Arg = Call.getArgExpr(0);
  if (!Arg)
    return;
  const MemRegion *MR = getMemRegionFromExpr(Arg, C);
  if (!MR)
    return;
  MR = MR->getBaseRegion();
  if (!MR)
    return;

  // Determine if this region has been freed already.
  const bool *Freed = State->get<ResetDataFreeMap>(MR);
  if (Freed && *Freed) {
    // Already freed! Report a race condition (double free).
    reportRaceCondition(MR, C, "Race condition: reset_data freed twice");
    return;
  }

  // Mark the region as freed.
  State = State->set<ResetDataFreeMap>(MR, true);

  // Check if a completion_done check was observed for this region.
  const bool *ComplChecked = State->get<ResetDataCompletionCheckedMap>(MR);
  if (!ComplChecked || !(*ComplChecked)) {
    // No proper completion check was observed before freeing.
    reportRaceCondition(MR, C, "Race condition: reset_data freed without proper completion check");
  }

  C.addTransition(State);
}

/// checkBind - Called when a value is bound to a memory region (for pointer assignments).
/// We use this to track aliasing of the reset_data pointer so that freedom and completion
/// checks across aliases are correctly associated.
void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const MemRegion *LHS = Loc.getAsRegion();
  if (!LHS)
    return;
  LHS = LHS->getBaseRegion();

  const MemRegion *RHS = Val.getAsRegion();
  if (!RHS)
    return;
  RHS = RHS->getBaseRegion();
  if (!RHS)
    return;

  // Propagate alias information between LHS and RHS.
  State = State->set<PtrAliasMap>(LHS, RHS);
  State = State->set<PtrAliasMap>(RHS, LHS);
  C.addTransition(State);
}

/// reportRaceCondition - Helper function to report a bug when a race condition is detected.
/// The error message is kept short and clear.
void SAGenTestChecker::reportRaceCondition(const MemRegion *MR, CheckerContext &C, const char *Msg) const {
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  auto Report = std::make_unique<PathSensitiveBugReport>(*BT, Msg, N);
  C.emitReport(std::move(Report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects potential race conditions where reset_data is freed without proper completion_done synchronization",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
