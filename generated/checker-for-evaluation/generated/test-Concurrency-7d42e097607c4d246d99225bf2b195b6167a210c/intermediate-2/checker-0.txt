#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

#include "clang/Lex/Lexer.h"
#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Customize program states:
// Map the memory region of a reset_data structure to a boolean flag that indicates 
// whether its completion object (reset_data->compl) has been checked by a call to
// completion_done().
REGISTER_MAP_WITH_PROGRAMSTATE(ResetDataCheckedMap, const MemRegion*, bool)

// Optionally track pointer aliasing for reset_data.
REGISTER_MAP_WITH_PROGRAMSTATE(PtrAliasMap, const MemRegion*, const MemRegion*)

namespace {

class SAGenTestChecker 
  : public Checker< check::BranchCondition, check::PreCall, check::Bind > {

  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
      : BT(new BugType(this, "Race condition on reset_data", "Race Condition")) {}

  // Callback to observe branch conditions.
  // Look for conditions that call completion_done(&reset_data->compl) and mark the
  // corresponding reset_data region as having been checked.
  void checkBranchCondition(const Stmt *Condition, CheckerContext &C) const;

  // Callback to observe free() calls, e.g. kfree().
  // If a reset_data structure is freed without its completion having been checked,
  // report a potential use-after-free race condition.
  void checkPreCall(const CallEvent &Call, CheckerContext &C) const;

  // Callback to track pointer aliasing.
  // When a reset_data pointer is assigned to another variable, record the alias.
  void checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const;

private:
  // Reports a potential race condition bug if reset_data is freed without proper
  // completion check.
  void reportRaceCondition(const MemRegion *MR, CheckerContext &C, const CallEvent &Call) const;
};

void SAGenTestChecker::checkBranchCondition(const Stmt *Condition, CheckerContext &C) const {
  if (!Condition)
    return;

  ProgramStateRef State = C.getState();

  // Use downward AST traversal to find a call expression.
  const CallExpr *CE = findSpecificTypeInChildren<CallExpr>(Condition, C);
  if (!CE)
    return;
  
  // Check whether the call is to "completion_done".
  const Expr *CalleeExpr = CE->getCallee();
  if (!CalleeExpr)
    return;
    
  if (!ExprHasName(CalleeExpr, "completion_done", C))
    return;
  
  // Ensure there is an argument.
  if (CE->getNumArgs() < 1)
    return;

  const Expr *ArgExpr = CE->getArg(0);
  if (!ArgExpr)
    return;

  // Retrieve the memory region from the argument.
  const MemRegion *MR = getMemRegionFromExpr(ArgExpr, C);
  if (!MR)
    return;

  MR = MR->getBaseRegion();
  if (!MR)
    return;

  // Mark the reset_data region as having its completion checked.
  State = State->set<ResetDataCheckedMap>(MR, true);
  C.addTransition(State);
}

void SAGenTestChecker::checkPreCall(const CallEvent &Call, CheckerContext &C) const {
  // Intercept calls to free functions; here, we check for calls to "kfree".
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;

  if (!ExprHasName(OriginExpr, "kfree", C))
    return;

  ProgramStateRef State = C.getState();
  if (Call.getNumArgs() < 1)
    return;
  
  SVal ArgVal = Call.getArgSVal(0);
  const MemRegion *MR = ArgVal.getAsRegion();
  if (!MR)
    return;
  
  MR = MR->getBaseRegion();
  if (!MR)
    return;

  // Check whether this reset_data structure has been marked as "checked".
  const bool *Checked = State->get<ResetDataCheckedMap>(MR);
  bool isChecked = (Checked && *Checked);

  // Also consult pointer aliasing information.
  const MemRegion *Alias = State->get<PtrAliasMap>(MR);
  if (Alias) {
    const bool *AliasChecked = State->get<ResetDataCheckedMap>(Alias->getBaseRegion());
    if (AliasChecked && *AliasChecked)
      isChecked = true;
  }

  // If the region hasn't had its completion checked, report a potential race.
  if (!isChecked)
    reportRaceCondition(MR, C, Call);
}

void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const {
  ProgramStateRef State = C.getState();

  // Get the left-hand side memory region.
  const MemRegion *LHSReg = Loc.getAsRegion();
  if (!LHSReg)
    return;
  LHSReg = LHSReg->getBaseRegion();
  if (!LHSReg)
    return;

  // Get the right-hand side memory region.
  const MemRegion *RHSReg = Val.getAsRegion();
  if (!RHSReg)
    return;
  RHSReg = RHSReg->getBaseRegion();
  if (!RHSReg)
    return;

  // Establish aliasing between the two regions.
  State = State->set<PtrAliasMap>(LHSReg, RHSReg);
  State = State->set<PtrAliasMap>(RHSReg, LHSReg);
  C.addTransition(State);
}

void SAGenTestChecker::reportRaceCondition(const MemRegion *MR, CheckerContext &C, const CallEvent &Call) const {
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  
  auto Report = std::make_unique<PathSensitiveBugReport>(
      *BT, "Race condition: reset_data freed without proper completion check", N);
  Report->addRange(Call.getSourceRange());
  C.emitReport(std::move(Report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects race conditions on reset_data due to unsynchronized free() calls without completion_done check",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
