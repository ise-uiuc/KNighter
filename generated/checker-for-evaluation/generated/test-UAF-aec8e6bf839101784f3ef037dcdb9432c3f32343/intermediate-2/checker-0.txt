#include "clang/AST/ASTContext.h"
#include "clang/AST/Expr.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/Frontend/FrontendAction.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/CheckerManager.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymbolManager.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/Decl.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

using namespace clang;
using namespace ento;
using namespace taint;

// No custom program states are needed for this checker.

namespace {

/// Visitor to traverse the body of btrfs_close_one_device.
class BtrfsCloseDeviceVisitor : public RecursiveASTVisitor<BtrfsCloseDeviceVisitor> {
public:
  BtrfsCloseDeviceVisitor(ASTContext &Ctx)
      : Ctx(Ctx), fputCallFound(false), nullAssignmentFound(false) {}

  bool VisitCallExpr(const CallExpr *Call) {
    // Get the callee function declaration.
    if (const FunctionDecl *FD = Call->getDirectCallee()) {
      StringRef FuncName = FD->getName();
      if (FuncName == "fput") {
        // Look at the arguments passed to fput.
        for (unsigned i = 0, n = Call->getNumArgs(); i < n; i++) {
          const Expr *Arg = Call->getArg(i);
          if (!Arg)
            continue;
          Arg = Arg->IgnoreParenCasts();
          if (const MemberExpr *ME = dyn_cast<MemberExpr>(Arg)) {
            if (ME->getMemberDecl()->getNameAsString() == "bdev_file") {
              fputCallFound = true;
              // We can break since one occurrence is enough.
              break;
            }
          }
        }
      }
    }
    return true;
  }

  bool VisitBinaryOperator(const BinaryOperator *BO) {
    // Check for an assignment: =
    if (BO->getOpcode() == BO_Assign) {
      const Expr *LHS = BO->getLHS()->IgnoreParenCasts();
      if (const MemberExpr *ME = dyn_cast<MemberExpr>(LHS)) {
        if (ME->getMemberDecl()->getNameAsString() == "bdev_file") {
          // Check if the right-hand side is a null pointer constant.
          const Expr *RHS = BO->getRHS()->IgnoreParenCasts();
          if (RHS->isNullPointerConstant(Ctx, Expr::NPC_ValueDependentIsNull))
            nullAssignmentFound = true;
        }
      }
    }
    return true;
  }

  bool isFputCallFound() const { return fputCallFound; }
  bool isNullAssignmentFound() const { return nullAssignmentFound; }

private:
  ASTContext &Ctx;
  bool fputCallFound;
  bool nullAssignmentFound;
};

class SAGenTestChecker 
  : public Checker<check::ASTCodeBody> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Resource Not Cleared", "Use-after-free")) {}

  void checkASTCodeBody(const Decl *D, AnalysisManager &Mgr, BugReporter &BR) const;

};

void SAGenTestChecker::checkASTCodeBody(const Decl *D, AnalysisManager &Mgr, BugReporter &BR) const {
  const FunctionDecl *FD = dyn_cast<FunctionDecl>(D);
  if (!FD)
    return;
  
  // Look for the target function: btrfs_close_one_device
  if (FD->getNameAsString() != "btrfs_close_one_device")
    return;

  // Get the function body.
  const Stmt *Body = FD->getBody();
  if (!Body)
    return;
  
  ASTContext &Ctx = FD->getASTContext();
  BtrfsCloseDeviceVisitor Visitor(Ctx);
  Visitor.TraverseStmt(const_cast<Stmt*>(Body));

  // If the function calls fput on bdev_file but never clears it to NULL,
  // then report a bug.
  if (Visitor.isFputCallFound() && !Visitor.isNullAssignmentFound()) {
    // Report the bug at the location of the function's identifier.
    ExplodedNode *ErrNode = BR.generateNonFatalErrorNode();
    if (!ErrNode)
      return;

    auto Report = std::make_unique<PathSensitiveBugReport>(
          *BT, "bdev_file is not cleared after resource release (potential use-after-free)", ErrNode);
    Report->addRange(FD->getSourceRange());
    BR.emitReport(std::move(Report));
  }
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects when bdev_file is not set to NULL after being freed", "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
