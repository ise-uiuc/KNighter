#include "clang/AST/Decl.h"
#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Customize program state: map a VarDecl* to a bool indicating whether it was initialized.
// For variable "ret", false means uninitialized; true means initialized.
REGISTER_MAP_WITH_PROGRAMSTATE(UninitRetMap, const VarDecl*, bool)

namespace {

class SAGenTestChecker
    : public Checker< check::PostStmt<DeclStmt>,
                      check::Bind,
                      check::PreStmt<ReturnStmt> > {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Uninitialized Variable Bug", "Logic Error")) {}

  // Callback for declaration statements: record local variable "ret" as uninitialized if no initializer.
  void checkPostStmt(const DeclStmt *DS, CheckerContext &C) const {
    ProgramStateRef State = C.getState();
    for (const Decl *D : DS->decls()) {
      if (const VarDecl *VD = dyn_cast<VarDecl>(D)) {
        // Only consider local variables named "ret" of integral type.
        if (VD->getName() == "ret" && VD->getType()->isIntegralOrEnumerationType()) {
          // If the variable does not have an initializer, mark it as uninitialized.
          if (!VD->hasInit()) {
            State = State->set<UninitRetMap>(VD, false);
          } else {
            // If it has an initializer, mark it as initialized.
            State = State->set<UninitRetMap>(VD, true);
          }
        }
      }
    }
    C.addTransition(State);
  }

  // Callback for binding: whenever a value is assigned to a variable.
  void checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const {
    ProgramStateRef State = C.getState();
    // Get the memory region for the left-hand side.
    if (const MemRegion *MR = Loc.getAsRegion()) {
      // We're interested in VarRegions.
      if (const VarRegion *VR = dyn_cast<VarRegion>(MR)) {
        const VarDecl *VD = VR->getDecl();
        if (VD && VD->getName() == "ret" && VD->getType()->isIntegralOrEnumerationType()) {
          // Mark this variable as now initialized.
          State = State->set<UninitRetMap>(VD, true);
        }
      }
    }
    C.addTransition(State);
  }

  // Callback for return statements: check if returning an uninitialized "ret".
  void checkPreStmt(const ReturnStmt *RS, CheckerContext &C) const {
    ProgramStateRef State = C.getState();
    const Expr *RetE = RS->getRetValue();
    if (!RetE)
      return;
    RetE = RetE->IgnoreImplicit();
    const DeclRefExpr *DRE = dyn_cast<DeclRefExpr>(RetE);
    if (!DRE)
      return;
    const ValueDecl *VD = DRE->getDecl();
    const VarDecl *Var = dyn_cast<VarDecl>(VD);
    if (!Var)
      return;
    if (Var->getName() != "ret")
      return;
    
    // Lookup the initialization status for "ret".
    const bool *IsInit = State->get<UninitRetMap>(Var);
    if (IsInit && !(*IsInit)) {
      // "ret" was not initialized.
      ExplodedNode *N = C.generateNonFatalErrorNode();
      if (!N)
        return;
      auto report = std::make_unique<PathSensitiveBugReport>(
          *BT, "Uninitialized local variable 'ret' returned", N);
      report->addRange(RS->getSourceRange());
      C.emitReport(std::move(report));
    }
  }
};

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects when an uninitialized local variable 'ret' is returned",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
