#include "clang/AST/Expr.h"
#include "clang/AST/ExprCXX.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/StmtIterator.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

using namespace clang;
using namespace ento;
using namespace taint;

// No custom program state is needed for this checker

namespace {

class SAGenTestChecker :
  public Checker< check::PostStmt<BinaryOperator> > {

  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Underflow in iov_iter subtraction",
                                         "Arithmetic")) {}

  void checkPostStmt(const BinaryOperator *B, CheckerContext &C) const;

private:
  // A helper function to determine if an if-statement provides a safe-check.
  // It looks upward in the AST from the subtraction statement to locate an if-stmt
  // whose condition text contains "shorten", "iter->count", and ">=".
  bool hasSafeGuard(const Stmt *S, CheckerContext &C) const;
};

bool SAGenTestChecker::hasSafeGuard(const Stmt *S, CheckerContext &C) const {
  // Walk upward in the AST using utility function findSpecificTypeInParents
  const IfStmt *IfS = findSpecificTypeInParents<IfStmt>(S, C);
  if (!IfS)
    return false;
  
  const Expr *Cond = IfS->getCond();
  if (!Cond)
    return false;
  
  // Get the source text of condition.
  // Use utility function ExprHasName to check for specific substrings.
  bool hasShorten = ExprHasName(Cond, "shorten", C);
  bool hasCount = ExprHasName(Cond, "iter->count", C);
  bool hasGe = ExprHasName(Cond, ">=", C);
  
  return (hasShorten && hasCount && hasGe);
}

void SAGenTestChecker::checkPostStmt(const BinaryOperator *B, CheckerContext &C) const {
  // We are interested in compound subtraction assignments: "iter->count -= shorten;"
  if (B->getOpcode() != BO_SubAssign)
    return;
  
  // Check if LHS source text contains "iter->count"
  const Expr *LHS = B->getLHS()->IgnoreParenCasts();
  if (!LHS)
    return;
  
  if (!ExprHasName(LHS, "iter->count", C))
    return;
  
  // Check if RHS (the subtracted value) involves both "iov_iter_count" and "round_up"
  const Expr *RHS = B->getRHS()->IgnoreParenCasts();
  if (!RHS)
    return;
  
  bool containsIovIterCount = ExprHasName(RHS, "iov_iter_count", C);
  bool containsRoundUp = ExprHasName(RHS, "round_up", C);
  if (!(containsIovIterCount && containsRoundUp))
    return;
  
  // Check for the presence of a safe-guarding branch.
  if (hasSafeGuard(B, C))
    return;
  
  // If no safe check exists, emit an error.
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  
  auto report = std::make_unique<PathSensitiveBugReport>(
      *BT, "Possible underflow: iter->count subtraction without safe-check", N);
  report->addRange(B->getSourceRange());
  C.emitReport(std::move(report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects arithmetic underflow in subtraction from iter->count without proper safe-check", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
