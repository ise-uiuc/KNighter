#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

// Additional includes.
#include "clang/AST/Expr.h"
#include "clang/Lex/Lexer.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Use a simple program-state trait to keep track of the lock status.
// This trait holds a boolean value representing whether the "hsotg->lock" is held.
REGISTER_TRAIT_WITH_PROGRAMSTATE(LockState, bool)

namespace {

class SAGenTestChecker : public Checker<
                              check::PreCall,    // Intercept locking API calls.
                              check::Bind,       // Intercept assignments.
                              check::BeginFunction // Initialize lock state.
                             > {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Atomicity Violation",
                                        "Concurrency")) {}

  // Callback invoked before a function call is processed.
  void checkPreCall(const CallEvent &Call, CheckerContext &C) const;
  // Callback invoked when a value is bound to a memory location.
  void checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const;
  // Callback invoked when a function begins.
  void checkBeginFunction(CheckerContext &C) const;
};

void SAGenTestChecker::checkBeginFunction(CheckerContext &C) const {
  // Initialize the global lock state as not-held (false).
  ProgramStateRef State = C.getState();
  State = State->set<LockState>(false);
  C.addTransition(State);
}

void SAGenTestChecker::checkPreCall(const CallEvent &Call, CheckerContext &C) const {
  // Get the originating expression of the call.
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;

  ProgramStateRef State = C.getState();

  // If the call is to spin_lock_irqsave, mark the lock state as held.
  if (ExprHasName(OriginExpr, "spin_lock_irqsave", C)) {
    State = State->set<LockState>(true);
    C.addTransition(State);
    return;
  }

  // If the call is to spin_unlock_irqrestore, mark the lock state as not held.
  if (ExprHasName(OriginExpr, "spin_unlock_irqrestore", C)) {
    State = State->set<LockState>(false);
    C.addTransition(State);
    return;
  }
}

void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const {
  if (!S)
    return;

  // Look for an assignment to "hcpriv". Use the utility function to check
  // if the source text of the assignment contains "hcpriv".
  const Expr *CastExpr = dyn_cast<Expr>(S);
  if (!CastExpr)
    return;
  if (!ExprHasName(CastExpr, "hcpriv", C))
    return;

  // Check if the right-hand side is a NULL pointer.
  // Using isZeroConstant() to determine whether the value is NULL.
  if (!Val.isZeroConstant())
    return;

  // Retrieve the current lock state from the program state.
  ProgramStateRef State = C.getState();
  Optional<bool> LockHeldOpt = State->get<LockState>();
  bool LockHeld = LockHeldOpt.hasValue() ? (*LockHeldOpt) : false;

  // If the shared resource (urb->hcpriv) is being set to NULL outside the protection
  // of the spinlock, then report a bug.
  if (!LockHeld) {
    ExplodedNode *N = C.generateNonFatalErrorNode();
    if (!N)
      return;
    auto Report = std::make_unique<PathSensitiveBugReport>(
        *BT, "Modifying urb->hcpriv outside spinlock protection", N);
    C.emitReport(std::move(Report));
  }
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Checks that shared resource urb->hcpriv is modified only under spinlock protection", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
