#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"
#include "clang/Basic/LangOptions.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/CheckerRegistry.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "llvm/Support/raw_ostream.h"

using namespace clang;
using namespace ento;
using namespace taint;

// No custom program states are needed.

namespace {

class SAGenTestChecker : public Checker<check::PreCall> { 
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
    : BT(new BugType(this, "Invalid optlen", "Memory Copy")) {}

  void checkPreCall(const CallEvent &Call, CheckerContext &C) const;

private:
  void reportInsufficientOptlen(const CallEvent &Call, CheckerContext &C,
                                int ExpectedSize, int ProvidedOptlen) const;
};

void SAGenTestChecker::checkPreCall(const CallEvent &Call, CheckerContext &C) const {
  // Obtain the origin expression to inspect the function name.
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;

  // Check if the call is to "bt_copy_from_sockptr".
  if (!ExprHasName(OriginExpr, "bt_copy_from_sockptr", C))
    return;

  // We expect the function prototype to be:
  // bt_copy_from_sockptr(&dest, expected_size, optval, optlen)
  // where "expected_size" is at argument index 1, and "optlen" is at index 3.
  if (Call.getNumArgs() < 4)
    return;

  llvm::APSInt EvalExpected, EvalOptlen;
  const Expr *ExpectedSizeExpr = Call.getArgExpr(1);
  const Expr *OptlenExpr = Call.getArgExpr(3);

  bool EvalExpectedOk = EvaluateExprToInt(EvalExpected, ExpectedSizeExpr, C);
  bool EvalOptlenOk = EvaluateExprToInt(EvalOptlen, OptlenExpr, C);

  if (!EvalExpectedOk || !EvalOptlenOk)
    return;

  int ExpectedSize = EvalExpected.getSExtValue();
  int ProvidedOptlen = EvalOptlen.getSExtValue();

  // If user provided length is less than the expected size, report an error.
  if (ProvidedOptlen < ExpectedSize) {
    reportInsufficientOptlen(Call, C, ExpectedSize, ProvidedOptlen);
  }
}

void SAGenTestChecker::reportInsufficientOptlen(const CallEvent &Call,
                                                CheckerContext &C,
                                                int ExpectedSize, int ProvidedOptlen) const {
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;

  // Create a short description of the error.
  SmallString<128> buf;
  llvm::raw_svector_ostream os(buf);
  os << "Invalid optlen: user provided length (" << ProvidedOptlen
     << ") is less than expected (" << ExpectedSize << ")";

  auto Report = std::make_unique<PathSensitiveBugReport>(*BT, os.str(), N);
  Report->addRange(Call.getSourceRange());
  C.emitReport(std::move(Report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects fixed-size user memory copy operations with insufficient user-provided length",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
