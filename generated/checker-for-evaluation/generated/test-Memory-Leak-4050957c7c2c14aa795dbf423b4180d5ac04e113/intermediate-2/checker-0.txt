#include "clang/AST/ASTContext.h"
#include "clang/AST/Decl.h"
#include "clang/AST/Expr.h"
#include "clang/AST/ExprCXX.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/StmtIterator.h"
#include "clang/Basic/SourceManager.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/AnalysisManager.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

using namespace clang;
using namespace ento;
using namespace taint;

namespace {

// A RecursiveASTVisitor to look for the buggy cleanup loop pattern.
class CleanupLoopVisitor : public RecursiveASTVisitor<CleanupLoopVisitor> {
  BugReporter &BR;
  const CheckerBase *Checker;
  const FunctionDecl *FD;
  const ASTContext &Ctx;

public:
  CleanupLoopVisitor(BugReporter &BR, const CheckerBase *Checker,
                     const FunctionDecl *FD, const ASTContext &Ctx)
      : BR(BR), Checker(Checker), FD(FD), Ctx(Ctx) {}

  // Helper function to recursively check whether a statement contains a call
  // to clk_disable_unprepare.
  bool containsClkDisableUnprepare(Stmt *S) {
    if (!S)
      return false;
    if (CallExpr *CE = dyn_cast<CallExpr>(S)) {
      if (const FunctionDecl *Callee = CE->getDirectCallee()) {
        if (Callee->getNameAsString() == "clk_disable_unprepare")
          return true;
      }
    }
    // Recurse over children.
    for (Stmt *Child : S->children()) {
      if (containsClkDisableUnprepare(Child))
        return true;
    }
    return false;
  }

  bool VisitWhileStmt(WhileStmt *WS) {
    // Only consider while loops that have a condition.
    Expr *CondExpr = WS->getCond();
    if (!CondExpr)
      return true;
    CondExpr = CondExpr->IgnoreParenImpCasts();

    // Check if the condition is a binary operator.
    BinaryOperator *BinOp = dyn_cast<BinaryOperator>(CondExpr);
    if (!BinOp)
      return true;

    // The operator should be ">".
    if (BinOp->getOpcode() != BO_GT)
      return true;

    // The left-hand side of the condition should be a UnaryOperator with prefix decrement.
    Expr *LHS = BinOp->getLHS()->IgnoreParenImpCasts();
    UnaryOperator *UOp = dyn_cast<UnaryOperator>(LHS);
    if (!UOp)
      return true;
    if (UOp->getOpcode() != UO_PreDec)
      return true;

    // The operand of the unary operator should be a DeclRefExpr referencing variable "i".
    Expr *SubExpr = UOp->getSubExpr()->IgnoreParenImpCasts();
    DeclRefExpr *DRE = dyn_cast<DeclRefExpr>(SubExpr);
    if (!DRE)
      return true;
    if (DRE->getDecl()->getNameAsString() != "i")
      return true;

    // The right-hand side of the condition should be an integer literal 0.
    Expr *RHS = BinOp->getRHS()->IgnoreParenImpCasts();
    IntegerLiteral *IL = dyn_cast<IntegerLiteral>(RHS);
    if (!IL)
      return true;
    if (!IL->getValue().isZero())
      return true;

    // Check that the loop body actually calls clk_disable_unprepare.
    Stmt *Body = WS->getBody();
    if (!containsClkDisableUnprepare(Body))
      return true;

    // We have found a cleanup loop using "while (--i > 0)".
    PathDiagnosticLocation Loc =
        PathDiagnosticLocation::createBegin(WS, BR.getSourceManager(), Ctx);
    BR.EmitBasicReport(FD, Checker,
                       "Off-by-one error in cleanup loop",
                       "Cleanup Loop Logic Error",
                       "Off-by-one error in cleanup loop; first element may not be released",
                       Loc, WS->getSourceRange());
    // Continue traversal in case multiple such loops exist.
    return true;
  }
};

class SAGenTestChecker : public Checker<check::ASTCodeBody> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Cleanup Loop Logic Error",
                                        "Resource Cleanup")) {}

  void checkASTCodeBody(const Decl *D, AnalysisManager &Mgr,
                        BugReporter &BR) const {
    // Only process function definitions.
    const FunctionDecl *FD = dyn_cast<FunctionDecl>(D);
    if (!FD || !FD->hasBody())
      return;

    // Traverse the body of the function to look for the target cleanup loop.
    CleanupLoopVisitor Visitor(BR, this, FD, FD->getASTContext());
    Visitor.TraverseDecl(const_cast<FunctionDecl *>(FD));
  }
};

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker",
      "Detects off-by-one error in cleanup loop where the first element may not be released",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
