#include "clang/AST/ASTContext.h"
#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/raw_ostream.h"

using namespace clang;
using namespace ento;

namespace {

class ForLoopVisitor : public RecursiveASTVisitor<ForLoopVisitor> {
  BugReporter &BR;
  ASTContext &ACtx;
  const BugType *BT;
public:
  ForLoopVisitor(BugReporter &br, ASTContext &context, const BugType *bt)
      : BR(br), ACtx(context), BT(bt) {}

  bool VisitForStmt(ForStmt *FS) {
    // Ensure the ForStmt has a condition.
    const Expr *Cond = FS->getCond();
    if (!Cond)
      return true;
    
    // Retrieve source text for the loop condition.
    SourceManager &SM = ACtx.getSourceManager();
    LangOptions LangOpts = ACtx.getLangOpts();
    CharSourceRange CondRange = CharSourceRange::getTokenRange(Cond->getSourceRange());
    StringRef CondText = Lexer::getSourceText(CondRange, SM, LangOpts);

    // Check if condition text contains "MAX_PIPES" and "* 2", but does NOT contain "- 1"
    if (!(CondText.contains("MAX_PIPES") && CondText.contains("*") && CondText.contains("2")))
      return true;
    if (CondText.contains("-") && CondText.contains("1"))
      return true; // Already subtracting 1, so it's fixed.

    // Now, traverse the loop body to look for an array access with index "i + 1".
    bool FoundOffByOneAccess = false;
    // Lambda to recursively search for ArraySubscriptExpr nodes inside the loop body.
    std::function<void(Stmt *)> searchForArrayAccess = [&](Stmt *S) {
      if (!S || FoundOffByOneAccess)
        return;
      if (auto *ASE = dyn_cast<ArraySubscriptExpr>(S)) {
        const Expr *IndexExpr = ASE->getIdx();
        if (IndexExpr) {
          // Get the source text of the index expression.
          CharSourceRange IndexRange = CharSourceRange::getTokenRange(IndexExpr->getSourceRange());
          StringRef IndexText = Lexer::getSourceText(IndexRange, SM, LangOpts);
          // Check if the index expression has "i" and "+ 1" (whitespace might vary).
          if (IndexText.contains("+") && IndexText.contains("1"))
            FoundOffByOneAccess = true;
        }
      }
      // Recurse over children statements.
      for (Stmt *Child : S->children()) {
        searchForArrayAccess(Child);
      }
    };

    if (Stmt *Body = FS->getBody()) {
      searchForArrayAccess(Body);
    }

    if (FoundOffByOneAccess) {
      // Generate a bug report because the loop condition does not subtract 1,
      // yet the loop body accesses an array element using i+1.
      ExplodedNode *N = BR.getContext()->generateNonFatalErrorNode();
      if (!N)
        return true;
      auto R = FS->getSourceRange();
      std::string Msg("Off-by-one error in loop boundary causing potential buffer overflow");
      auto Report = std::make_unique<PathSensitiveBugReport>(*BT, Msg, N);
      Report->addRange(CharSourceRange::getTokenRange(R));
      BR.emitReport(std::move(Report));
    }
    return true;
  }
};

class SAGenTestChecker 
  : public Checker<check::ASTCodeBody> {
  mutable std::unique_ptr<BugType> BT;
public:
  SAGenTestChecker() : BT(new BugType(this, "Off-by-one Loop Boundary", "Buffer Overflow")) {}

  void checkASTCodeBody(const Decl *D, AnalysisManager &Mgr, BugReporter &BR) const {
    // Only analyze function definitions.
    const auto *FD = dyn_cast<FunctionDecl>(D);
    if (!FD || !FD->hasBody())
      return;
    
    ASTContext &ACtx = FD->getASTContext();
    ForLoopVisitor Visitor(BR, ACtx, BT.get());
    Visitor.TraverseStmt(const_cast<Stmt*>(FD->getBody()));
  }
};

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects off-by-one loop boundary errors that can lead to buffer overflow",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
