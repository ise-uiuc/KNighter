#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"
#include "clang/AST/StmtFor.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/Frontend/CompilerInstance.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/CheckerRegistry.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "llvm/Support/raw_ostream.h"

using namespace clang;
using namespace ento;
using namespace taint;

// No custom program state maps needed for this checker

namespace {

// Visitor to look for an ArraySubscriptExpr with an index of the form "LoopVar + 1".
class IPlusOneVisitor : public RecursiveASTVisitor<IPlusOneVisitor> {
  const std::string LoopVar;
  CheckerContext &Ctx;
public:
  bool Found;
  
  IPlusOneVisitor(StringRef LoopVarName, CheckerContext &C)
      : LoopVar(LoopVarName.str()), Ctx(C), Found(false) {}

  bool VisitArraySubscriptExpr(ArraySubscriptExpr *ASE) {
    Expr *IdxExpr = ASE->getIdx()->IgnoreParenCasts();
    // Check if the index is a binary addition.
    if (auto *BinOp = dyn_cast<BinaryOperator>(IdxExpr)) {
      if (BinOp->getOpcode() == BO_Add) {
        Expr *LHS = BinOp->getLHS()->IgnoreParenCasts();
        Expr *RHS = BinOp->getRHS()->IgnoreParenCasts();
        bool LeftMatches = false;
        bool RightIsOne = false;
        
        if (auto *DRE = dyn_cast<DeclRefExpr>(LHS)) {
          if (DRE->getDecl()->getNameAsString() == LoopVar)
            LeftMatches = true;
        }
        
        llvm::APSInt ConstVal;
        if (EvaluateExprToInt(ConstVal, RHS, Ctx)) {
          if (ConstVal == 1)
            RightIsOne = true;
        }
        
        if (LeftMatches && RightIsOne) {
          Found = true;
          return false; // Stop traversing
        }
      }
    }
    return true;
  }
  
  // Continue recursion by default.
  bool TraverseStmt(Stmt *S) {
    if (!S)
      return true;
    return RecursiveASTVisitor<IPlusOneVisitor>::TraverseStmt(S);
  }
};

class SAGenTestChecker : public Checker< check::PreStmt<ForStmt> > {
  mutable std::unique_ptr<BugType> BT;
public:
  SAGenTestChecker() 
    : BT(new BugType(this, "Array buffer overflow", "Buffer Overflow")) {}

  void checkPreStmt(const ForStmt *FS, CheckerContext &C) const;

private:
  // Helper function to extract the source text for an expression.
  std::string getExprText(const Expr *E, CheckerContext &C) const {
    if (!E)
      return "";
    SourceManager &SM = C.getSourceManager();
    LangOptions LangOpts = C.getLangOpts();
    CharSourceRange Range = CharSourceRange::getTokenRange(E->getSourceRange());
    return Lexer::getSourceText(Range, SM, LangOpts).str();
  }
};

void SAGenTestChecker::checkPreStmt(const ForStmt *FS, CheckerContext &C) const {
  // Retrieve the loop condition.
  const Expr *Cond = FS->getCond();
  if (!Cond)
    return;
  
  std::string CondText = getExprText(Cond, C);
  // Check if the condition text contains "MAX_PIPES" and "*2".
  if (CondText.find("MAX_PIPES") == std::string::npos ||
      CondText.find("*2") == std::string::npos)
    return;
  
  // If the condition already subtracts 1 (i.e. contains "-1"), then the bug is fixed.
  if (CondText.find("-") != std::string::npos &&
      CondText.find("1") != std::string::npos)
    return;
  
  // Extract the loop variable from the loop initializer.
  const Stmt *Init = FS->getInit();
  if (!Init)
    return;
  const DeclStmt *DS = dyn_cast<DeclStmt>(Init);
  if (!DS)
    return;
  // Retrieve the first declared variable.
  VarDecl *LoopVarDecl = nullptr;
  for (auto it = DS->decl_begin(), ie = DS->decl_end(); it != ie; ++it) {
    if ((LoopVarDecl = dyn_cast<VarDecl>(*it))) {
      break;
    }
  }
  if (!LoopVarDecl)
    return;
  
  std::string LoopVarName = LoopVarDecl->getNameAsString();
  if (LoopVarName.empty())
    return;
  
  // Traverse the loop body to look for an array subscript of the form "i + 1"
  IPlusOneVisitor Visitor(LoopVarName, C);
  Visitor.TraverseStmt(const_cast<Stmt*>(FS->getBody()));
  if (!Visitor.Found)
    return;
  
  // Found a loop that may access array element at index "i+1" without proper bound check.
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  
  auto Report = std::make_unique<PathSensitiveBugReport>(
      *BT,
      ("Array buffer overflow: index '" + LoopVarName + " + 1' may exceed array bounds").c_str(),
      N);
  C.emitReport(std::move(Report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects buffer overflow due to accessing an array with index i+1 without proper bounds checking",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
