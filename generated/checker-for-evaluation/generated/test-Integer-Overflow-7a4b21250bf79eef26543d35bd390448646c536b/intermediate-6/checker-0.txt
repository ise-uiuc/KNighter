#include "clang/AST/ASTContext.h"
#include "clang/AST/Decl.h"
#include "clang/AST/Expr.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/raw_ostream.h"

using namespace clang;
using namespace ento;
using namespace taint;

namespace {

// Visitor to traverse the AST of the function body.
class MaxEntriesOverflowVisitor : public RecursiveASTVisitor<MaxEntriesOverflowVisitor> {
public:
  explicit MaxEntriesOverflowVisitor(ASTContext &Context)
      : Context(Context), FoundRoundupPow(false), FoundOverflowPrecheck(false) {}

  // When we visit a call expression, check if it calls roundup_pow_of_two.
  bool VisitCallExpr(CallExpr *CE) {
    if (const FunctionDecl *FD = CE->getDirectCallee()) {
      if (FD->getNameAsString() == "roundup_pow_of_two")
        FoundRoundupPow = true;
    }
    return true;
  }

  // When we visit an if statement, check its condition text for the overflow pre-check.
  bool VisitIfStmt(IfStmt *IfS) {
    Expr *Cond = IfS->getCond();
    if (!Cond)
      return true;

    // Get the source text of the condition.
    SourceManager &SM = Context.getSourceManager();
    LangOptions LangOpts = Context.getLangOpts();
    CharSourceRange CondRange = CharSourceRange::getTokenRange(Cond->getSourceRange());
    StringRef CondText = Lexer::getSourceText(CondRange, SM, LangOpts);

    // Look for both "max_entries" and "1UL << 31" in the condition.
    if (CondText.contains("max_entries") && CondText.contains("1UL << 31"))
      FoundOverflowPrecheck = true;

    return true;
  }

  bool foundRoundupPow() const { return FoundRoundupPow; }
  bool foundPrecheck() const { return FoundOverflowPrecheck; }

private:
  ASTContext &Context;
  bool FoundRoundupPow;
  bool FoundOverflowPrecheck;
};

class SAGenTestChecker : public Checker<check::ASTCodeBody> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
    : BT(new BugType(this, "Rounding overflow potential", "Integer Overflow")) {}

  void checkASTCodeBody(const Decl *D, AnalysisManager &Mgr, BugReporter &BR) const;

};

void SAGenTestChecker::checkASTCodeBody(const Decl *D, AnalysisManager &Mgr, BugReporter &BR) const {
  // We are only interested in the definition of the function "stack_map_alloc"
  const FunctionDecl *FD = dyn_cast<FunctionDecl>(D);
  if (!FD)
    return;
  if (FD->getNameAsString() != "stack_map_alloc")
    return;
  if (!FD->hasBody())
    return;

  // Traverse the function body using our RecursiveASTVisitor.
  ASTContext &Context = Mgr.getASTContext();
  MaxEntriesOverflowVisitor Visitor(Context);
  Visitor.TraverseStmt(FD->getBody());

  // If a call to roundup_pow_of_two() is present, but no pre-check condition is found,
  // we report the potential bug.
  if (Visitor.foundRoundupPow() && !Visitor.foundPrecheck()) {
    // Use the location of the function declaration as the location for the bug.
    PathDiagnosticLocation Loc = PathDiagnosticLocation::createBegin(FD, BR.getSourceManager(), Context);
    auto Report = std::make_unique<BasicBugReport>(
        *BT, "Missing pre-check for potential overflow in roundup_pow_of_two() on 32-bit architectures", Loc);
    Report->addRange(FD->getSourceRange());
    BR.emitReport(std::move(Report));
  }
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects missing pre-check for potential overflow before calling roundup_pow_of_two()", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
