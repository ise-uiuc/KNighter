#include "clang/AST/ASTContext.h"
#include "clang/AST/ParentMapContext.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/Stmt.h"
#include "clang/Basic/SourceManager.h"
#include "clang/Lex/Lexer.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "llvm/ADT/SmallVector.h"
#include "llvm/ADT/StringRef.h"
#include "llvm/Support/raw_ostream.h"

using namespace clang;
using namespace ento;

// No custom program state is needed.

namespace {

/// Helper function that climbs the AST parents (using ASTContext's ParentMap)
// and returns true if any enclosing if-statement has a condition that
// contains "from_cancel" in its source text.
bool isGuardedByFromCancel(const Stmt *S, ASTContext &Context) {
  // Use a worklist to manually traverse parent chains.
  llvm::SmallVector<const Stmt *, 8> Worklist;
  Worklist.push_back(S);
  while (!Worklist.empty()) {
    const Stmt *Current = Worklist.pop_back_val();
    // Get parents using the ASTContext's ParentMapContext.
    auto Parents = Context.getParents(*Current);
    if (Parents.empty())
      continue;
    for (const auto &P : Parents) {
      if (const IfStmt *IfS = P.get<IfStmt>()) {
        const Expr *Cond = IfS->getCond();
        if (Cond) {
          // Retrieve source text for the condition.
          SourceManager &SM = Context.getSourceManager();
          LangOptions LangOpts = Context.getLangOpts();
          CharSourceRange Range = CharSourceRange::getTokenRange(Cond->getSourceRange());
          StringRef CondText = Lexer::getSourceText(Range, SM, LangOpts);
          if (CondText.contains("from_cancel"))
            return true;
        }
      }
      if (const Stmt *ParentStmt = P.get<Stmt>())
        Worklist.push_back(ParentStmt);
    }
  }
  return false;
}

/// RecursiveASTVisitor to traverse the function body of __flush_work.
class FlushWorkVisitor : public RecursiveASTVisitor<FlushWorkVisitor> {
  BugReporter &BR;
  ASTContext &Ctx;
  const BugType *BT; // Used for reporting

public:
  FlushWorkVisitor(BugReporter &BR, ASTContext &Ctx, const BugType *BT)
      : BR(BR), Ctx(Ctx), BT(BT) {}

  bool VisitCallExpr(CallExpr *CE) {
    // Get the source text of the entire call expression.
    SourceManager &SM = Ctx.getSourceManager();
    LangOptions LangOpts = Ctx.getLangOpts();
    CharSourceRange CallRange = CharSourceRange::getTokenRange(CE->getSourceRange());
    StringRef CallText = Lexer::getSourceText(CallRange, SM, LangOpts);

    // Check if this call expression involves a call to "work_data_bits".
    if (!CallText.contains("work_data_bits"))
      return true; // Not our target, continue traversal

    // Now check if this call is enclosed in an if-statement whose condition mentions "from_cancel".
    if (!isGuardedByFromCancel(CE, Ctx)) {
      // Report a bug: unsafe read of work->data (via work_data_bits) before checking from_cancel.
      PathDiagnosticLocation Loc =
          PathDiagnosticLocation::createBegin(CE, SM);
      auto R = llvm::make_unique<BasicBugReport>(
          *BT, "Unsafe read of work->data before checking from_cancel", Loc);
      R->addRange(CE->getSourceRange());
      BR.emitReport(std::move(R));
    }
    return true;
  }
};

/// Checker class that implements the AST-level check.
class SAGenTestChecker 
    : public Checker<check::ASTCodeBody> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
      : BT(new BugType(this, "Unsafe access to work->data",
                       "Control Flow Guard")) {}

  void checkASTCodeBody(const Decl *D, AnalysisManager &Mgr,
                        BugReporter &BR) const;
};

void SAGenTestChecker::checkASTCodeBody(const Decl *D,
                                        AnalysisManager &Mgr,
                                        BugReporter &BR) const {
  // We only care about function definitions.
  const FunctionDecl *FD = dyn_cast<FunctionDecl>(D);
  if (!FD)
    return;

  // Check for the __flush_work function.
  if (FD->getNameAsString() != "__flush_work")
    return;

  const Stmt *Body = FD->getBody();
  if (!Body)
    return;

  // Traverse the body to look for calls to work_data_bits that are unguarded.
  FlushWorkVisitor Visitor(BR, FD->getASTContext(), BT.get());
  Visitor.TraverseStmt(const_cast<Stmt*>(Body));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects unsafe access of work->data in __flush_work before checking from_cancel",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
