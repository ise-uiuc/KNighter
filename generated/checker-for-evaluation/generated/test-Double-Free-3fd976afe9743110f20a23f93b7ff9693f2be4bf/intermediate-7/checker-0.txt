#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Register a program state map to track memory allocated using devm_* functions.
REGISTER_MAP_WITH_PROGRAMSTATE(DevmAllocMap, const MemRegion*, bool)
// Optionally, a pointer aliasing map to propagate allocation flags.
REGISTER_MAP_WITH_PROGRAMSTATE(PtrAliasMap, const MemRegion*, const MemRegion*)

namespace {

class SAGenTestChecker : public Checker< check::PostCall, check::PreCall, check::Bind > {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
      : BT(new BugType(this, "Double free of devm_alloc memory")) {}

  // Callback used to track allocation functions.
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const;
  // Callback used to intercept manual free calls.
  void checkPreCall(const CallEvent &Call, CheckerContext &C) const;
  // Optional: track pointer aliasing. When one pointer is bound to another.
  void checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const;

private:
  // Helper to report a double-free warning.
  void reportDoubleFree(const MemRegion *MR, const CallEvent &Call, CheckerContext &C) const;
};

void SAGenTestChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  
  // Retrieve the call's origin expression.
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;

  // Verify we have a callee identifier.
  const IdentifierInfo *CalleeID = Call.getCalleeIdentifier();
  if (!CalleeID)
    return;
  
  StringRef CalleeName = CalleeID->getName();
  
  // If the allocation function is devm_kcalloc, mark its returned region.
  if (CalleeName.equals("devm_kcalloc")) {
    const MemRegion *MR = getMemRegionFromExpr(OriginExpr, C);
    if (!MR)
      return;
    MR = MR->getBaseRegion();
    if (!MR)
      return;
    State = State->set<DevmAllocMap>(MR, true);
    C.addTransition(State);
  }
}

void SAGenTestChecker::checkPreCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();

  // Retrieve the origin and callee.
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;
  
  const IdentifierInfo *CalleeID = Call.getCalleeIdentifier();
  if (!CalleeID)
    return;
  
  StringRef CalleeName = CalleeID->getName();
  
  // Monitor manual free function; in our bug pattern, pinctrl_utils_free_map is used.
  if (CalleeName.equals("pinctrl_utils_free_map")) {
    // Assume that the pointer to free is passed as the first argument.
    SVal ArgVal = Call.getArgSVal(0);
    const MemRegion *MR = ArgVal.getAsRegion();
    if (!MR)
      return;
    MR = MR->getBaseRegion();
    if (!MR)
      return;

    // Resolve any pointer aliasing.
    if (const MemRegion *Alias = State->get<PtrAliasMap>(MR))
      MR = Alias->getBaseRegion();

    // If the region was allocated via devm_kcalloc, report a double free.
    const bool *Flag = State->get<DevmAllocMap>(MR);
    if (Flag && *Flag) {
      reportDoubleFree(MR, Call, C);
    }
  }
}

void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const MemRegion *LHS = Loc.getAsRegion();
  const MemRegion *RHS = Val.getAsRegion();
  if (!LHS || !RHS)
    return;
  
  LHS = LHS->getBaseRegion();
  RHS = RHS->getBaseRegion();
  if (!LHS || !RHS)
    return;
  
  // Record that LHS is an alias of RHS.
  State = State->set<PtrAliasMap>(LHS, RHS);
  State = State->set<PtrAliasMap>(RHS, LHS);
  C.addTransition(State);
}

void SAGenTestChecker::reportDoubleFree(const MemRegion *MR, const CallEvent &Call, CheckerContext &C) const {
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  
  auto Report = std::make_unique<PathSensitiveBugReport>(
      *BT, "Double free: Memory allocated via devm_kcalloc should not be manually freed", N);
  Report->addRange(Call.getSourceRange());
  C.emitReport(std::move(Report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects double free due to device-managed allocation (devm_kcalloc) being freed manually via pinctrl_utils_free_map",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
