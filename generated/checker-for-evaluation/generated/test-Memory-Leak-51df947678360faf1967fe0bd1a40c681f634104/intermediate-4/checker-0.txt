#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

// Additional includes
#include "clang/AST/Expr.h"
#include "clang/AST/Decl.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Register a program state map to track net_device allocations.
// The key is the net_device memory region and the value is a bool that indicates
// whether free_netdev() has been called (true) or not (false).
REGISTER_MAP_WITH_PROGRAMSTATE(AllocDeviceMap, const MemRegion*, bool)

namespace {

class SAGenTestChecker : public Checker<check::PostCall> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() 
    : BT(new BugType(this, "Memory leak on error path")) {}

  // We use checkPostCall to intercept calls that allocate and free net_device as well
  // as calls to rvu_rep_devlink_port_register that may trigger error paths.
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const;

private:
  // Helper function to report the memory leak when a net_device is not freed.
  void reportMemoryLeak(const MemRegion *MR, CheckerContext &C) const {
    ExplodedNode *N = C.generateNonFatalErrorNode();
    if (!N)
      return;
    auto report = std::make_unique<PathSensitiveBugReport>(
        *BT,
        "Memory leak: allocated net_device not freed on error path", N);
    C.emitReport(std::move(report));
  }
};

void SAGenTestChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  // Retrieve the original call expression.
  const Expr *Origin = Call.getOriginExpr();
  if (!Origin)
    return;

  // 1. Track allocations from alloc_etherdev.
  //    When alloc_etherdev is called, record the returned pointer (if any)
  //    in the AllocDeviceMap with a flag of false (i.e. not freed).
  if (ExprHasName(Origin, "alloc_etherdev", C)) {
    SVal RetVal = Call.getReturnValue();
    const MemRegion *MR = RetVal.getAsRegion();
    if (MR) {
      MR = MR->getBaseRegion();
      State = State->set<AllocDeviceMap>(MR, false);
      C.addTransition(State);
    }
    return;
  }

  // 2. Track calls to free_netdev.
  //    When free_netdev is called, retrieve its first argument and mark the corresponding net_device as freed.
  if (ExprHasName(Origin, "free_netdev", C)) {
    // Get the first argument of free_netdev.
    const Expr *ArgExpr = Call.getArgExpr(0);
    if (!ArgExpr)
      return;
    const MemRegion *MR = getMemRegionFromExpr(ArgExpr, C);
    if (MR) {
      MR = MR->getBaseRegion();
      // Mark the net_device as freed.
      State = State->set<AllocDeviceMap>(MR, true);
      C.addTransition(State);
    }
    return;
  }

  // 3. Intercept calls to rvu_rep_devlink_port_register.
  //    For such calls, if the return value indicates an error (nonzero),
  //    we try to obtain an associated net_device pointer and check if it has been freed.
  if (ExprHasName(Origin, "rvu_rep_devlink_port_register", C)) {
    SVal RetVal = Call.getReturnValue();
    // Evaluate the return value if it is a concrete integer.
    if (const nonloc::ConcreteInt *CI = RetVal.getAs<nonloc::ConcreteInt>()) {
      if (CI->getValue() != 0) {
        // Error branch detected.
        // Attempt to locate the associated net_device pointer.
        // We search for a DeclRefExpr whose source text contains "ndev" within the call's origin.
        const DeclRefExpr *NdevRef = findSpecificTypeInChildren<DeclRefExpr>(Origin);
        if (NdevRef && ExprHasName(NdevRef, "ndev", C)) {
          const MemRegion *MR = getMemRegionFromExpr(NdevRef, C);
          if (MR) {
            MR = MR->getBaseRegion();
            const bool *Freed = State->get<AllocDeviceMap>(MR);
            // If the net_device was allocated (recorded in AllocDeviceMap) and not marked as freed, report the bug.
            if (Freed && !(*Freed)) {
              reportMemoryLeak(MR, C);
            }
          }
        }
      }
    }
    return;
  }
  // For all other calls, do nothing.
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects resource leak due to missing free_netdev on error path", "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
