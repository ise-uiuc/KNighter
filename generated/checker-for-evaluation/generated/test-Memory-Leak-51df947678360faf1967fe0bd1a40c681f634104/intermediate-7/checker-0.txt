#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

#include "clang/AST/Decl.h"
#include "clang/AST/Expr.h"
#include "clang/AST/Type.h"
#include "clang/AST/Stmt.h"

// Customize program states:
// 1. Map to track net device allocations: false => not freed; true => freed.
REGISTER_MAP_WITH_PROGRAMSTATE(NetdevAllocMap, const MemRegion *, bool)
// 2. Map to track aliasing relationships.
//    When a rep->netdev assignment is encountered, record an association
//    between the rep object and the allocated net device.
REGISTER_MAP_WITH_PROGRAMSTATE(PtrAliasMap, const MemRegion*, const MemRegion*)

using namespace clang;
using namespace ento;
using namespace taint;

namespace {

class SAGenTestChecker 
  : public Checker<check::PostCall, check::Bind> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Resource Leak", "Memory Leak")) {}

  // Callback to intercept function calls after they are evaluated.
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const;

  // Callback to track pointer assignments.
  void checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const;

private:
  // Helper function to report the leak.
  void reportLeak(const MemRegion *NetdevMR, CheckerContext &C) const;
};

void SAGenTestChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;
    
  // Get the function name using the origin expression.
  if (!ExprHasName(OriginExpr, "alloc_etherdev", C) &&
      !ExprHasName(OriginExpr, "free_netdev", C) &&
      !ExprHasName(OriginExpr, "rvu_rep_devlink_port_register", C))
    return;

  // Handle alloc_etherdev: record allocated netdev.
  if (ExprHasName(OriginExpr, "alloc_etherdev", C)) {
    // Retrieve the net device memory region from the allocated call.
    const MemRegion *NetdevMR = getMemRegionFromExpr(OriginExpr, C);
    if (NetdevMR) {
      NetdevMR = NetdevMR->getBaseRegion();
      // Record allocation: not yet freed.
      State = State->set<NetdevAllocMap>(NetdevMR, false);
      C.addTransition(State);
    }
    return;
  }

  // Handle free_netdev: mark the netdev as freed.
  if (ExprHasName(OriginExpr, "free_netdev", C)) {
    // The first argument is the pointer being freed.
    SVal ArgVal = Call.getArgSVal(0);
    const MemRegion *NetdevMR = ArgVal.getAsRegion();
    if (NetdevMR) {
      NetdevMR = NetdevMR->getBaseRegion();
      State = State->set<NetdevAllocMap>(NetdevMR, true);
      C.addTransition(State);
    }
    return;
  }

  // Handle rvu_rep_devlink_port_register.
  if (ExprHasName(OriginExpr, "rvu_rep_devlink_port_register", C)) {
    // Evaluate the returned error code.
    llvm::APSInt ErrVal;
    // If we cannot evaluate the return value to int, then skip.
    if (!EvaluateExprToInt(ErrVal, Call.getOriginExpr(), C))
      return;
    // If no error, no leak.
    if (ErrVal == 0)
      return;
    // If error != 0, then find the netdev associated with the rep.
    // The first argument is of type rep pointer.
    SVal RepArgVal = Call.getArgSVal(0);
    const MemRegion *RepMR = RepArgVal.getAsRegion();
    if (!RepMR)
      return;
    RepMR = RepMR->getBaseRegion();
    // Lookup in our pointer alias map to find its corresponding netdev.
    const MemRegion *NetdevMR = State->get<PtrAliasMap>(RepMR);
    if (!NetdevMR)
      return;
    NetdevMR = NetdevMR->getBaseRegion();
    // Check if the net device has been freed.
    const bool *Freed = State->get<NetdevAllocMap>(NetdevMR);
    if (Freed && (*Freed == false)) {
      reportLeak(NetdevMR, C);
    }
    C.addTransition(State);
    return;
  }
}

void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const {
  ProgramStateRef State = C.getState();

  // Check if the left-hand side is a field named "netdev".
  if (const MemRegion *LHSRegion = Loc.getAsRegion()) {
    // We try to see if LHSRegion is a FieldRegion and its field name is "netdev".
    if (const auto *FR = dyn_cast_or_null<FieldRegion>(LHSRegion)) {
      if (FR->getDecl()->getName() == "netdev") {
        // Get the super region, which corresponds to the containing struct (rep).
        const MemRegion *RepMR = FR->getSuperRegion();
        if (!RepMR)
          return;
        RepMR = RepMR->getBaseRegion();
        // Get right-hand side value as a memory region.
        if (const MemRegion *RHSRegion = Val.getAsRegion()) {
          RHSRegion = RHSRegion->getBaseRegion();
          // Record in alias map:
          State = State->set<PtrAliasMap>(RepMR, RHSRegion);
          // Also record the reverse mapping.
          State = State->set<PtrAliasMap>(RHSRegion, RepMR);
          C.addTransition(State);
        }
      }
    }
  }
}

void SAGenTestChecker::reportLeak(const MemRegion *NetdevMR, CheckerContext &C) const {
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  auto R = std::make_unique<PathSensitiveBugReport>(
      *BT, "Allocated net device not freed on error path", N);
  // Optionally add source range info.
  C.emitReport(std::move(R));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects a resource leak when a net device allocated with alloc_etherdev() is not freed on error path", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
