#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"
#include "clang/AST/Expr.h"
#include "clang/AST/Stmt.h"

using namespace clang;
using namespace ento;
using namespace taint;

// Program state map to record pointers returned by devm_kzalloc.
// The mapping is from MemRegion to bool, where false means "unchecked" and true means "checked".
REGISTER_MAP_WITH_PROGRAMSTATE(PossibleNullPtrMap, const MemRegion *, bool)

// Program state map to track pointer aliasing.
// This helps us propagate a null check from one pointer to its alias.
REGISTER_MAP_WITH_PROGRAMSTATE(PtrAliasMap, const MemRegion*, const MemRegion*)

namespace {

/// Helper function to mark a memory region (and its alias, if recorded) as checked.
ProgramStateRef markRegionChecked(ProgramStateRef State, const MemRegion *MR) {
  if (!MR)
    return State;
  // Get the base region.
  MR = MR->getBaseRegion();
  if (!MR)
    return State;
  // Mark the current region as checked.
  State = State->set<PossibleNullPtrMap>(MR, true);
  // If there is an alias, mark it checked too.
  const MemRegion *AliasReg = State->get<PtrAliasMap>(MR);
  if (AliasReg)
    State = State->set<PossibleNullPtrMap>(AliasReg->getBaseRegion(), true);
  return State;
}

class SAGenTestChecker
    : public Checker<check::PostCall, check::BranchCondition, check::Location, check::Bind> {
  mutable std::unique_ptr<BugType> BT;

public:
  SAGenTestChecker() : BT(new BugType(this, "Unchecked devm_kzalloc return value used")) {}

  // Monitor memory allocations: record pointers returned by devm_kzalloc as unchecked.
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const;

  // Monitor branch conditions: if the allocated pointer is checked in a condition,
  // mark it (and its aliases) as checked.
  void checkBranchCondition(const Stmt *Condition, CheckerContext &C) const;

  // Intercept pointer dereferences: if an unchecked pointer is dereferenced,
  // report a bug.
  void checkLocation(SVal Loc, bool IsLoad, const Stmt *S, CheckerContext &C) const;

  // Track pointer bindings for aliasing.
  void checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const;

private:
  // Helper for reporting a bug.
  void reportUncheckedDereference(const MemRegion *MR, const Stmt *S, CheckerContext &C) const;
};

void SAGenTestChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;
  // Use utility function to check if the callee's name is "devm_kzalloc".
  if (!ExprHasName(OriginExpr, "devm_kzalloc", C))
    return;

  // Retrieve the return value's memory region.
  SVal RetVal = Call.getReturnValue();
  const MemRegion *MR = RetVal.getAsRegion();
  if (!MR)
    return;
  MR = MR->getBaseRegion();
  if (!MR)
    return;

  // Record the region in the PossibleNullPtrMap as unchecked (false).
  State = State->set<PossibleNullPtrMap>(MR, false);
  C.addTransition(State);
}

void SAGenTestChecker::checkBranchCondition(const Stmt *Condition, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const Expr *CondExpr = dyn_cast<Expr>(Condition);
  if (!CondExpr) {
    C.addTransition(State);
    return;
  }
  // Remove any parentheses and implicit casts.
  CondExpr = CondExpr->IgnoreParenCasts();

  // Pattern 1: if (!ptr)
  if (const UnaryOperator *UO = dyn_cast<UnaryOperator>(CondExpr)) {
    if (UO->getOpcode() == UO_LNot) {
      const Expr *SubExpr = UO->getSubExpr()->IgnoreParenCasts();
      SVal SubVal = C.getState()->getSVal(SubExpr, C.getLocationContext());
      if (const MemRegion *MR = SubVal.getAsRegion())
        State = markRegionChecked(State, MR);
    }
  }
  // Pattern 2: if (ptr == NULL) or if (ptr != NULL)
  else if (const BinaryOperator *BO = dyn_cast<BinaryOperator>(CondExpr)) {
    BinaryOperator::Opcode Op = BO->getOpcode();
    if (Op == BO_EQ || Op == BO_NE) {
      const Expr *LHS = BO->getLHS()->IgnoreParenCasts();
      const Expr *RHS = BO->getRHS()->IgnoreParenCasts();
      bool LHSIsNull = LHS->isNullPointerConstant(C.getASTContext(), Expr::NPC_ValueDependentIsNull);
      bool RHSIsNull = RHS->isNullPointerConstant(C.getASTContext(), Expr::NPC_ValueDependentIsNull);
      const Expr *PtrExpr = nullptr;
      if (LHSIsNull && !RHSIsNull)
        PtrExpr = RHS;
      else if (RHSIsNull && !LHSIsNull)
        PtrExpr = LHS;
      if (PtrExpr) {
        SVal PtrVal = C.getState()->getSVal(PtrExpr, C.getLocationContext());
        if (const MemRegion *MR = PtrVal.getAsRegion())
          State = markRegionChecked(State, MR);
      }
    }
    else {
      // Fall-back: try to get the pointer from the entire condition.
      SVal CondVal = C.getState()->getSVal(CondExpr, C.getLocationContext());
      if (const MemRegion *MR = CondVal.getAsRegion())
        State = markRegionChecked(State, MR);
    }
  }
  // Pattern 3: if (ptr)
  else {
    SVal CondVal = C.getState()->getSVal(CondExpr, C.getLocationContext());
    if (const MemRegion *MR = CondVal.getAsRegion())
      State = markRegionChecked(State, MR);
  }
  C.addTransition(State);
}

void SAGenTestChecker::checkLocation(SVal Loc, bool IsLoad, const Stmt *S, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  if (const MemRegion *MR = Loc.getAsRegion()) {
    MR = MR->getBaseRegion();
    if (!MR)
      return;
    // Look up the region in the PossibleNullPtrMap.
    const bool *Checked = State->get<PossibleNullPtrMap>(MR);
    // If the region is recorded as unchecked, warn about potential NULL dereference.
    if (Checked && *Checked == false)
      reportUncheckedDereference(MR, S, C);
  }
}

void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  // For pointer assignments, update the aliasing map.
  if (const MemRegion *LHSReg = Loc.getAsRegion()) {
    LHSReg = LHSReg->getBaseRegion();
    if (!LHSReg)
      return;
    if (const MemRegion *RHSReg = Val.getAsRegion()) {
      RHSReg = RHSReg->getBaseRegion();
      if (!RHSReg)
        return;
      State = State->set<PtrAliasMap>(LHSReg, RHSReg);
      State = State->set<PtrAliasMap>(RHSReg, LHSReg);
    }
  }
  C.addTransition(State);
}

void SAGenTestChecker::reportUncheckedDereference(const MemRegion *MR, const Stmt *S, CheckerContext &C) const {
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  auto Report = std::make_unique<PathSensitiveBugReport>(
      *BT, "Unchecked devm_kzalloc return value used", N);
  Report->addRange(S->getSourceRange());
  C.emitReport(std::move(Report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects use of pointers returned by devm_kzalloc without checking for NULL",
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
