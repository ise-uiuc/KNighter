#include "clang/StaticAnalyzer/Core/BugReporter/BugReporter.h"
#include "clang/StaticAnalyzer/Core/BugReporter/BugType.h"
#include "clang/StaticAnalyzer/Checkers/Taint.h"
#include "clang/StaticAnalyzer/Core/Checker.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/Environment.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h"
#include "clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h"
#include "clang/StaticAnalyzer/Frontend/CheckerRegistry.h"
#include "clang/AST/RecursiveASTVisitor.h"
#include "clang/AST/StmtVisitor.h"
#include "llvm/Support/raw_ostream.h"
#include "clang/StaticAnalyzer/Checkers/utility.h"

#include "clang/AST/Expr.h"
#include "clang/Lex/Lexer.h"

// Customize program states.
REGISTER_MAP_WITH_PROGRAMSTATE(ZeroInitMap, const MemRegion*, bool)
REGISTER_MAP_WITH_PROGRAMSTATE(PtrAliasMap, const MemRegion*, const MemRegion*)

using namespace clang;
using namespace ento;
using namespace taint;

namespace {

class SAGenTestChecker : public Checker<check::PostCall, check::PreCall, check::Bind> {
  mutable std::unique_ptr<BugType> BT;
  
public:
  SAGenTestChecker() 
      : BT(new BugType(this, "Potential Uninitialized Structure Leak")) {}

  // Callback declarations
  void checkPostCall(const CallEvent &Call, CheckerContext &C) const;
  void checkPreCall(const CallEvent &Call, CheckerContext &C) const;
  void checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const;

private:
  // Helper to report bug.
  void reportUninitCopy(const MemRegion *MR, CheckerContext &C) const;
};

void SAGenTestChecker::checkPostCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;
  
  // Intercept memset calls: if memset is called with a zero byte value, mark the target region as zero initialized.
  if (ExprHasName(OriginExpr, "memset", C)) {
    // For memset, the first argument is the target and the second argument is the value.
    if (Call.getNumArgs() < 2)
      return;
    SVal ValArg = Call.getArgSVal(1);
    llvm::APSInt EvalRes;
    if (!EvaluateExprToInt(EvalRes, cast<Expr>(Call.getArgSVal(1).getAs<Expr>()), C))
      return;
    // We are only interested in memset that zeroes the memory.
    if (EvalRes.getLimitedValue() != 0)
      return;
    
    // Get the target (first argument).
    SVal TargetVal = Call.getArgSVal(0);
    const MemRegion *MR = getMemRegionFromExpr(cast<Expr>(Call.getArgSVal(0).getAs<Expr>()), C);
    if (!MR)
      return;
    MR = MR->getBaseRegion();
    if (!MR)
      return;
    // Mark the region as zero initialized
    State = State->set<ZeroInitMap>(MR, true);
    C.addTransition(State);
  }
}

void SAGenTestChecker::checkPreCall(const CallEvent &Call, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  const Expr *OriginExpr = Call.getOriginExpr();
  if (!OriginExpr)
    return;
  
  // Check for functions that copy memory from kernel space to user space.
  // We target "copy_to_user", "nla_put" and "nla_put_64bit".
  unsigned BufferArgIdx = 0;
  bool Matched = false;
  if (ExprHasName(OriginExpr, "copy_to_user", C)) {
    // copy_to_user(user_dest, kernel_src, size)
    BufferArgIdx = 1;
    Matched = true;
  } else if (ExprHasName(OriginExpr, "nla_put", C)) {
    // nla_put(skb, attrtype, attrlen, data)
    BufferArgIdx = 3;
    Matched = true;
  } else if (ExprHasName(OriginExpr, "nla_put_64bit", C)) {
    // nla_put_64bit(skb, attrtype, attrlen, data, pad)
    BufferArgIdx = 3;
    Matched = true;
  }
  
  if (!Matched)
    return;
  
  if (Call.getNumArgs() <= BufferArgIdx)
    return;
    
  // Get the argument assumed as the source buffer.
  SVal BufferArgVal = Call.getArgSVal(BufferArgIdx);
  const MemRegion *MR = getMemRegionFromExpr(cast<Expr>(Call.getArgSVal(BufferArgIdx).getAs<Expr>()), C);
  if (!MR)
    return;
  MR = MR->getBaseRegion();
  if (!MR)
    return;
  
  // Check ZeroInitMap: if the region is uninitialized, report a bug.
  const bool *IsZeroed = State->get<ZeroInitMap>(MR);
  if (!IsZeroed || *IsZeroed == false) {
    reportUninitCopy(MR, C);
  }
}

void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *StoreE, CheckerContext &C) const {
  ProgramStateRef State = C.getState();
  // Propagate alias for pointers.
  const MemRegion *LHSReg = Loc.getAsRegion();
  if (!LHSReg)
    return;
  LHSReg = LHSReg->getBaseRegion();
  if (!LHSReg)
    return;
  
  const MemRegion *RHSReg = Val.getAsRegion();
  if (!RHSReg)
    return;
  RHSReg = RHSReg->getBaseRegion();
  if (!RHSReg)
    return;
  
  State = State->set<PtrAliasMap>(LHSReg, RHSReg);
  State = State->set<PtrAliasMap>(RHSReg, LHSReg);
  C.addTransition(State);
}

void SAGenTestChecker::reportUninitCopy(const MemRegion *MR, CheckerContext &C) const {
  // Report the bug if an unzeroed structure is copied to user space.
  ExplodedNode *N = C.generateNonFatalErrorNode();
  if (!N)
    return;
  auto Report = std::make_unique<PathSensitiveBugReport>(
    *BT, "Structure may not be zero-initialized before copying to user space", N);
  C.emitReport(std::move(Report));
}

} // end anonymous namespace

extern "C" void clang_registerCheckers(CheckerRegistry &registry) {
  registry.addChecker<SAGenTestChecker>(
      "custom.SAGenTestChecker", 
      "Detects copying of potentially uninitialized structures to user space", 
      "");
}

extern "C" const char clang_analyzerAPIVersionString[] =
    CLANG_ANALYZER_API_VERSION_STRING;
