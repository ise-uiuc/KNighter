--- attempt_1_original.cpp+++ attempt_1.cpp@@ -17,12 +17,29 @@ #include "clang/AST/Expr.h"
 #include "clang/AST/Stmt.h"
 #include "clang/AST/Type.h"
+#include <algorithm>

 using namespace clang;
 using namespace ento;
 using namespace taint;

-// No program state traits required for this checker.
+// Utility functions provided in the prompt.
+template <typename T>
+const T* findSpecificTypeInParents(const Stmt *S, CheckerContext &C);
+template <typename T>
+const T* findSpecificTypeInChildren(const Stmt *S);
+bool EvaluateExprToInt(llvm::APSInt &EvalRes, const Expr *expr, CheckerContext &C);
+const llvm::APSInt *inferSymbolMaxVal(SymbolRef Sym, CheckerContext &C);
+bool getArraySizeFromExpr(llvm::APInt &ArraySize, const Expr *E);
+bool getStringSize(llvm::APInt &StringSize, const Expr *E);
+const MemRegion* getMemRegionFromExpr(const Expr* E, CheckerContext &C);
+struct KnownDerefFunction {
+  const char *Name;
+  llvm::SmallVector<unsigned, 4> Params;
+};
+bool functionKnownToDeref(const CallEvent &Call,
+                                 llvm::SmallVectorImpl<unsigned> &DerefParams);
+bool ExprHasName(const Expr *E, StringRef Name, CheckerContext &C);

 namespace {

@@ -49,9 +66,41 @@   static bool isWideTargetType(QualType QT, CheckerContext &C);
   static bool isConstantFolded(const Expr *E, CheckerContext &C);

-  static bool findFirstSuspiciousMul(const Stmt *S, unsigned TargetBits,
-                                     const BinaryOperator *&OutMul,
+  // Finds a suspicious '*' on the value-producing path of Root.
+  static bool findFirstSuspiciousMulOnValuePath(const Expr *Root,
+                                                unsigned TargetBits,
+                                                const BinaryOperator *&OutMul,
+                                                CheckerContext &C);
+
+  // Extract a variable/field identifier name from an expression if possible.
+  static std::string extractIdentifierLikeName(const Expr *E);
+
+  // Semantic filters to reduce false positives.
+  static bool isAddressOrSizeLikeLHS(const Expr *LHS);
+  static bool isIrqLikeContext(const Expr *Root, const Expr *LHS, CheckerContext &C);
+
+  // Heuristic: detect known-timeout/jiffies contexts to avoid FPs.
+  static bool isFalsePositiveContext(const Expr *Root,
+                                     const BinaryOperator *MulBO,
+                                     const Expr *LHSExpr,
                                      CheckerContext &C);
+
+  // FP suppressors for cases where '*' is not contributing directly to the value
+  // assigned/added to the wide type.
+  static bool isMulUnderCallArg(const BinaryOperator *MulBO,
+                                const Expr *Root,
+                                CheckerContext &C);
+  static bool isMulUnderArrayIndex(const BinaryOperator *MulBO,
+                                   CheckerContext &C);
+
+  // Aggregated FP gate.
+  static bool isFalsePositive(const Expr *Root,
+                              const BinaryOperator *MulBO,
+                              const Expr *LHSExpr,
+                              CheckerContext &C);
+
+  static bool nameContains(StringRef TextLower,
+                           std::initializer_list<StringRef> Needles);

   void emitReport(const BinaryOperator *MulBO, QualType LHSType,
                   CheckerContext &C) const;
@@ -73,7 +122,6 @@   if (!isIntegerLike(QT))
     return false;

-  // Special-case typedef names like dma_addr_t, but still rely on bit-width.
   unsigned Bits = getTypeBitWidth(QT, C);
   return Bits >= 64;
 }
@@ -86,52 +134,256 @@   return EvaluateExprToInt(EvalRes, E, C);
 }

-// DFS to find first multiply whose resulting type is narrower than target.
-bool SAGenTestChecker::findFirstSuspiciousMul(const Stmt *S, unsigned TargetBits,
-                                              const BinaryOperator *&OutMul,
-                                              CheckerContext &C) {
-  if (!S)
-    return false;
-
-  // Normalize expression nodes.
-  if (const auto *E = dyn_cast<Expr>(S)) {
-    const Expr *NormE = E->IgnoreParenImpCasts();
-    if (NormE != E)
-      return findFirstSuspiciousMul(NormE, TargetBits, OutMul, C);
-
-    if (const auto *BO = dyn_cast<BinaryOperator>(NormE)) {
-      if (BO->getOpcode() == BO_Mul) {
-        // Only consider integer-like multiplication.
-        QualType ResT = BO->getType();
-        if (isIntegerLike(ResT)) {
-          unsigned MulBits = getTypeBitWidth(ResT, C);
-          if (MulBits < TargetBits) {
-            OutMul = BO;
-            return true;
-          }
+// Restrict traversal to the value-producing path of Root.
+bool SAGenTestChecker::findFirstSuspiciousMulOnValuePath(const Expr *Root,
+                                                         unsigned TargetBits,
+                                                         const BinaryOperator *&OutMul,
+                                                         CheckerContext &C) {
+  if (!Root)
+    return false;
+
+  const Expr *E = Root->IgnoreParenImpCasts();
+
+  // Handle binary operators explicitly.
+  if (const auto *BO = dyn_cast<BinaryOperator>(E)) {
+    BinaryOperatorKind Op = BO->getOpcode();
+
+    if (Op == BO_Mul) {
+      QualType ResT = BO->getType();
+      if (isIntegerLike(ResT)) {
+        unsigned MulBits = getTypeBitWidth(ResT, C);
+        if (MulBits < TargetBits) {
+          OutMul = BO;
+          return true;
         }
       }
-      // Recurse into operands
-      if (findFirstSuspiciousMul(BO->getLHS(), TargetBits, OutMul, C))
+      // Even if not suspicious, do not stop searching; sub-operands might contain another mul.
+      if (findFirstSuspiciousMulOnValuePath(BO->getLHS(), TargetBits, OutMul, C))
         return true;
-      if (findFirstSuspiciousMul(BO->getRHS(), TargetBits, OutMul, C))
+      if (findFirstSuspiciousMulOnValuePath(BO->getRHS(), TargetBits, OutMul, C))
         return true;
       return false;
     }

-    // Generic recursion: traverse children.
-    for (const Stmt *Child : NormE->children()) {
-      if (findFirstSuspiciousMul(Child, TargetBits, OutMul, C))
+    // For comma operator, only the RHS contributes to the resulting value.
+    if (Op == BO_Comma) {
+      return findFirstSuspiciousMulOnValuePath(BO->getRHS(), TargetBits, OutMul, C);
+    }
+
+    // For simple assignment in a subexpression, only RHS determines resulting value.
+    if (Op == BO_Assign) {
+      return findFirstSuspiciousMulOnValuePath(BO->getRHS(), TargetBits, OutMul, C);
+    }
+
+    // For other arithmetic/bitwise operators, both sides contribute to value.
+    if (findFirstSuspiciousMulOnValuePath(BO->getLHS(), TargetBits, OutMul, C))
+      return true;
+    if (findFirstSuspiciousMulOnValuePath(BO->getRHS(), TargetBits, OutMul, C))
+      return true;
+    return false;
+  }
+
+  // Conditional operator: either arm may be the resulting value.
+  if (const auto *CO = dyn_cast<ConditionalOperator>(E)) {
+    if (findFirstSuspiciousMulOnValuePath(CO->getTrueExpr(), TargetBits, OutMul, C))
+      return true;
+    if (findFirstSuspiciousMulOnValuePath(CO->getFalseExpr(), TargetBits, OutMul, C))
+      return true;
+    return false;
+  }
+
+  // Unary operator: break on address/indirection which form lvalue/address computation.
+  if (const auto *UO = dyn_cast<UnaryOperator>(E)) {
+    UnaryOperatorKind UOK = UO->getOpcode();
+    if (UOK == UO_AddrOf || UOK == UO_Deref)
+      return false;
+    return findFirstSuspiciousMulOnValuePath(UO->getSubExpr(), TargetBits, OutMul, C);
+  }
+
+  // Explicit casts: continue through.
+  if (const auto *CE = dyn_cast<CastExpr>(E)) {
+    return findFirstSuspiciousMulOnValuePath(CE->getSubExpr(), TargetBits, OutMul, C);
+  }
+
+  // Do not traverse into call arguments: call's return value is the value path.
+  if (isa<CallExpr>(E))
+    return false;
+
+  // Array subscripts: indexing/math does not become the resulting rvalue itself.
+  if (isa<ArraySubscriptExpr>(E))
+    return false;
+
+  // Member access: base computation does not propagate to the value itself.
+  if (isa<MemberExpr>(E))
+    return false;
+
+  // Default: stop if leaf or non-handled node on value path.
+  return false;
+}
+
+// Extract identifier-like name from an expression (variable or field), else empty.
+std::string SAGenTestChecker::extractIdentifierLikeName(const Expr *E) {
+  if (!E)
+    return {};
+  E = E->IgnoreParenImpCasts();
+
+  // Look through deref to get the underlying identifier.
+  if (const auto *UO = dyn_cast<UnaryOperator>(E)) {
+    if (UO->getOpcode() == UO_Deref || UO->getOpcode() == UO_AddrOf)
+      return extractIdentifierLikeName(UO->getSubExpr());
+  }
+
+  if (const auto *ME = dyn_cast<MemberExpr>(E)) {
+    if (const auto *FD = dyn_cast<FieldDecl>(ME->getMemberDecl()))
+      return FD->getNameAsString();
+  }
+  if (const auto *DRE = dyn_cast<DeclRefExpr>(E)) {
+    if (const auto *ND = dyn_cast<NamedDecl>(DRE->getDecl()))
+      return ND->getNameAsString();
+  }
+  return {};
+}
+
+bool SAGenTestChecker::nameContains(StringRef TextLower,
+                                    std::initializer_list<StringRef> Needles) {
+  for (StringRef N : Needles) {
+    if (TextLower.contains(N))
+      return true;
+  }
+  return false;
+}
+
+// Address/size-like LHS filter for intended bug surface.
+bool SAGenTestChecker::isAddressOrSizeLikeLHS(const Expr *LHS) {
+  std::string Name = extractIdentifierLikeName(LHS);
+  if (Name.empty())
+    return false;
+  std::string Lower = Name;
+  std::transform(Lower.begin(), Lower.end(), Lower.begin(), ::tolower);
+
+  // Heuristic keywords that map to memory/byte/size/address semantics.
+  // This keeps detection focused on the intended bug pattern.
+  return nameContains(Lower,
+                      {"addr", "address", "dma_addr",
+                       "size", "len", "length", "bytes", "nbytes",
+                       "count", "pitch", "stride", "offset", "ofs"});
+}
+
+// IRQ-like context suppression.
+bool SAGenTestChecker::isIrqLikeContext(const Expr *Root, const Expr *LHS, CheckerContext &C) {
+  // LHS name contains irq-ish patterns (e.g., out_hwirq).
+  std::string LHSName = extractIdentifierLikeName(LHS);
+  std::string Lower = LHSName;
+  std::transform(Lower.begin(), Lower.end(), Lower.begin(), ::tolower);
+  if (!Lower.empty() && nameContains(Lower, {"irq", "hwirq", "intid", "gsi", "spi", "ppi"}))
+    return true;
+
+  // Function name contains irq-domain style names (e.g., *_irq_domain_*xlate*).
+  const FunctionDecl *FD = nullptr;
+  if (const auto *LC = C.getLocationContext())
+    FD = dyn_cast_or_null<FunctionDecl>(LC->getDecl());
+  if (FD) {
+    std::string FName = FD->getNameAsString();
+    std::transform(FName.begin(), FName.end(), FName.begin(), ::tolower);
+    if (nameContains(FName, {"irq", "hwirq", "xlate", "irq_domain"}))
+      return true;
+  }
+
+  // Source expression text heuristic.
+  if (ExprHasName(Root, "intspec", C) || ExprHasName(Root, "irq", C) ||
+      ExprHasName(Root, "hwirq", C))
+    return true;
+
+  return false;
+}
+
+// Secondary guard: filter known jiffies/timeout contexts to avoid false positives.
+bool SAGenTestChecker::isFalsePositiveContext(const Expr *Root,
+                                              const BinaryOperator *MulBO,
+                                              const Expr *LHSExpr,
+                                              CheckerContext &C) {
+  (void)MulBO;
+
+  // 1) If the RHS/root expression text contains "jiffies", treat this as
+  //    time arithmetic; suppress the report.
+  if (ExprHasName(Root, "jiffies", C))
+    return true;
+
+  // 2) If the parent assignment/compound-assignment LHS name implies timeout-like field,
+  //    suppress as well.
+  //    Common patterns: expires, expiry, timeout, deadline, jiffies.
+  const CompoundAssignOperator *CAO =
+      findSpecificTypeInParents<CompoundAssignOperator>(Root, C);
+  const BinaryOperator *AssignBO =
+      findSpecificTypeInParents<BinaryOperator>(Root, C);
+
+  const Expr *LHS = LHSExpr;
+  if (!LHS) {
+    if (CAO)
+      LHS = CAO->getLHS();
+    else if (AssignBO && AssignBO->getOpcode() == BO_Assign)
+      LHS = AssignBO->getLHS();
+  }
+
+  if (LHS) {
+    std::string LHSName = extractIdentifierLikeName(LHS);
+    if (!LHSName.empty()) {
+      std::string Lower = LHSName;
+      std::transform(Lower.begin(), Lower.end(), Lower.begin(), ::tolower);
+      if (nameContains(Lower, {"expire", "expiry", "timeout", "deadline", "jiffies"}))
         return true;
     }
-    return false;
-  }
-
-  // For non-Expr statements, traverse children.
-  for (const Stmt *Child : S->children()) {
-    if (findFirstSuspiciousMul(Child, TargetBits, OutMul, C))
-      return true;
-  }
+  }
+
+  // 3) IRQ-like contexts (e.g., hwirq math) commonly wide-typed but safe.
+  if (LHS && isIrqLikeContext(Root, LHS, C))
+    return true;
+
+  return false;
+}
+
+// Return true if the '*' is nested under a CallExpr (i.e., used as a call argument)
+// relative to the current assignment/addition root.
+bool SAGenTestChecker::isMulUnderCallArg(const BinaryOperator *MulBO,
+                                         const Expr *Root,
+                                         CheckerContext &C) {
+  (void)Root; // Root can be used for stricter checks if needed.
+  const CallExpr *CE = findSpecificTypeInParents<CallExpr>(MulBO, C);
+  return CE != nullptr;
+}
+
+// Return true if '*' is used solely as part of an ArraySubscriptExpr (index).
+bool SAGenTestChecker::isMulUnderArrayIndex(const BinaryOperator *MulBO,
+                                            CheckerContext &C) {
+  const ArraySubscriptExpr *ASE = findSpecificTypeInParents<ArraySubscriptExpr>(MulBO, C);
+  return ASE != nullptr;
+}
+
+// Aggregated FP logic.
+bool SAGenTestChecker::isFalsePositive(const Expr *Root,
+                                       const BinaryOperator *MulBO,
+                                       const Expr *LHSExpr,
+                                       CheckerContext &C) {
+  if (!MulBO)
+    return true;
+
+  // Suppress when:
+  // - The LHS is not address/size-like (we only target addr/size/len/offset/pitch/stride).
+  if (!isAddressOrSizeLikeLHS(LHSExpr))
+    return true;
+
+  // - The context is time/jiffies-like or irq-domain-like.
+  if (isFalsePositiveContext(Root, MulBO, LHSExpr, C))
+    return true;
+
+  // - The multiplication is under a CallExpr (argument), e.g., MSR index macros.
+  if (isMulUnderCallArg(MulBO, Root, C))
+    return true;
+
+  // - The multiplication is under an ArraySubscriptExpr (index computation).
+  if (isMulUnderArrayIndex(MulBO, C))
+    return true;
+
   return false;
 }

@@ -170,10 +422,12 @@         return;

       const BinaryOperator *MulBO = nullptr;
-      if (findFirstSuspiciousMul(CAO->getRHS(), getTypeBitWidth(LT, C), MulBO, C)) {
-        // Skip fully constant folded cases.
-        if (MulBO && !isConstantFolded(MulBO, C))
+      const Expr *RHS = CAO->getRHS();
+      if (findFirstSuspiciousMulOnValuePath(RHS, getTypeBitWidth(LT, C), MulBO, C)) {
+        if (MulBO && !isConstantFolded(MulBO, C) &&
+            !isFalsePositive(RHS, MulBO, LHS, C)) {
           emitReport(MulBO, LT, C);
+        }
       }
     }
     return;
@@ -193,9 +447,11 @@
     const Expr *RHS = BO->getRHS();
     const BinaryOperator *MulBO = nullptr;
-    if (findFirstSuspiciousMul(RHS, getTypeBitWidth(LT, C), MulBO, C)) {
-      if (MulBO && !isConstantFolded(MulBO, C))
+    if (findFirstSuspiciousMulOnValuePath(RHS, getTypeBitWidth(LT, C), MulBO, C)) {
+      if (MulBO && !isConstantFolded(MulBO, C) &&
+          !isFalsePositive(RHS, MulBO, LHS, C)) {
         emitReport(MulBO, LT, C);
+      }
     }
   }
 }
@@ -218,9 +474,29 @@
     const Expr *Init = VD->getInit();
     const BinaryOperator *MulBO = nullptr;
-    if (findFirstSuspiciousMul(Init, getTypeBitWidth(T, C), MulBO, C)) {
-      if (MulBO && !isConstantFolded(MulBO, C))
+    if (findFirstSuspiciousMulOnValuePath(Init, getTypeBitWidth(T, C), MulBO, C)) {
+      // For initialization, synthesize a pseudo-LHS using the VarDecl's name.
+      // We'll build a simple DeclRefExpr-like name via VD.
+      // Here we create a very small shim: we pass nullptr for LHSExpr, but handle
+      // it in isFalsePositiveContext by scanning jiffies/irq in Root and using
+      // the VarDecl's name as a proxy for LHS semantics.
+      // Simpler: construct a fake DeclRefExpr is heavy; instead check name here.
+      // If VD name isn't address/size-like, suppress.
+      std::string Name = VD->getNameAsString();
+      std::string Lower = Name;
+      std::transform(Lower.begin(), Lower.end(), Lower.begin(), ::tolower);
+      bool IsAddrSizeLike =
+          nameContains(Lower,
+                       {"addr", "address", "dma_addr",
+                        "size", "len", "length", "bytes", "nbytes",
+                        "count", "pitch", "stride", "offset", "ofs"});
+      if (!IsAddrSizeLike)
+        continue;
+
+      if (MulBO && !isConstantFolded(MulBO, C) &&
+          !isFalsePositive(Init, MulBO, nullptr, C)) {
         emitReport(MulBO, T, C);
+      }
     }
   }
 }
