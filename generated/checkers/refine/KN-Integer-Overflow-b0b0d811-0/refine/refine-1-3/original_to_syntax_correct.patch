--- original_code.cpp+++ syntax_correct_refine_code.cpp@@ -25,7 +25,7 @@ using namespace ento;
 using namespace taint;

-// Utility functions provided in the prompt.
+// Utility functions provided externally.
 template <typename T>
 const T* findSpecificTypeInParents(const Stmt *S, CheckerContext &C);
 template <typename T>
@@ -68,7 +68,7 @@   static bool isWideTargetType(QualType QT, CheckerContext &C);
   static bool isConstantFolded(const Expr *E, CheckerContext &C);

-  // New: Range reasoning helpers to suppress FPs when product fits in the mul's type.
+  // Range reasoning helpers to suppress FPs when product fits in the mul's type.
   static void getTypeRange128(QualType QT, CheckerContext &C,
                               llvm::APInt &Min, llvm::APInt &Max);
   static bool getExprRange128(const Expr *E, CheckerContext &C,
@@ -89,7 +89,7 @@   static bool nameContains(StringRef TextLower,
                            std::initializer_list<StringRef> Needles);

-  // Address/size-like LHS filter for intended bug surface (narrowed).
+  // Address/size-like LHS filter for intended bug surface.
   static bool isAddressOrSizeLikeLHS(const Expr *LHS);

   // IRQ-like and jiffies contexts suppression.
@@ -528,7 +528,7 @@   const auto *BO = dyn_cast<BinaryOperator>(E);
   if (!BO || BO->getOpcode() != BO_Shl)
     return false;
-  const auto *LHS_IL = dyn_cast<IntegerLiteral>(BO->getLHS()->IgnoreParenImpCasts());
+  const auto *LHS_IL = dyn_cast<IntegerLiteral>(BO->getLHS()->IgnoreParenCasts());
   if (!LHS_IL) return false;
   return LHS_IL->getValue() == 1;
 }
