### Report Summary

File:| /scratch/chenyuan-data/linux-debug/drivers/irqchip/exynos-combiner.c
---|---
Warning:| line 148, column 13
Multiplication occurs in a narrower type and is widened after; possible
overflow before assignment/addition to wide type

### Annotated Source Code


86    | 		handle_bad_irq(desc);
87    |
88    |  out:
89    | 	chained_irq_exit(chip, desc);
90    | }
91    |
92    | #ifdef CONFIG_SMP
93    | static int combiner_set_affinity(struct irq_data *d,
94    |  const struct cpumask *mask_val, bool force)
95    | {
96    |  struct combiner_chip_data *chip_data = irq_data_get_irq_chip_data(d);
97    |  struct irq_chip *chip = irq_get_chip(chip_data->parent_irq);
98    |  struct irq_data *data = irq_get_irq_data(chip_data->parent_irq);
99    |
100   |  if (chip && chip->irq_set_affinity)
101   |  return chip->irq_set_affinity(data, mask_val, force);
102   |  else
103   |  return -EINVAL;
104   | }
105   | #endif
106   |
107   | static struct irq_chip combiner_chip = {
108   | 	.name			= "COMBINER",
109   | 	.irq_mask		= combiner_mask_irq,
110   | 	.irq_unmask		= combiner_unmask_irq,
111   | #ifdef CONFIG_SMP
112   | 	.irq_set_affinity	= combiner_set_affinity,
113   | #endif
114   | };
115   |
116   | static void __init combiner_cascade_irq(struct combiner_chip_data *combiner_data,
117   |  unsigned int irq)
118   | {
119   | 	irq_set_chained_handler_and_data(irq, combiner_handle_cascade_irq,
120   | 					 combiner_data);
121   | }
122   |
123   | static void __init combiner_init_one(struct combiner_chip_data *combiner_data,
124   |  unsigned int combiner_nr,
125   |  void __iomem *base, unsigned int irq)
126   | {
127   | 	combiner_data->base = base;
128   | 	combiner_data->hwirq_offset = (combiner_nr & ~3) * IRQ_IN_COMBINER;
129   | 	combiner_data->irq_mask = 0xff << ((combiner_nr % 4) << 3);
130   | 	combiner_data->parent_irq = irq;
131   |
132   |  /* Disable all interrupts */
133   |  writel_relaxed(combiner_data->irq_mask, base + COMBINER_ENABLE_CLEAR);
134   | }
135   |
136   | static int combiner_irq_domain_xlate(struct irq_domain *d,
137   |  struct device_node *controller,
138   |  const u32 *intspec, unsigned int intsize,
139   |  unsigned long *out_hwirq,
140   |  unsigned int *out_type)
141   | {
142   |  if (irq_domain_get_of_node(d) != controller)
    1Assuming the condition is false→
    2←Taking false branch→
143   |  return -EINVAL;
144   |
145   |  if (intsize < 2)
    3←Assuming 'intsize' is >= 2→
    4←Taking false branch→
146   |  return -EINVAL;
147   |
148   |  *out_hwirq = intspec[0] * IRQ_IN_COMBINER + intspec[1];
    5←Multiplication occurs in a narrower type and is widened after; possible overflow before assignment/addition to wide type
149   | 	*out_type = 0;
150   |
151   |  return 0;
152   | }
153   |
154   | static int combiner_irq_domain_map(struct irq_domain *d, unsigned int irq,
155   | 				   irq_hw_number_t hw)
156   | {
157   |  struct combiner_chip_data *combiner_data = d->host_data;
158   |
159   | 	irq_set_chip_and_handler(irq, &combiner_chip, handle_level_irq);
160   | 	irq_set_chip_data(irq, &combiner_data[hw >> 3]);
161   | 	irq_set_probe(irq);
162   |
163   |  return 0;
164   | }
165   |
166   | static const struct irq_domain_ops combiner_irq_domain_ops = {
167   | 	.xlate	= combiner_irq_domain_xlate,
168   | 	.map	= combiner_irq_domain_map,
169   | };
170   |
171   | static void __init combiner_init(void __iomem *combiner_base,
172   |  struct device_node *np)
173   | {
174   |  int i, irq;
175   |  unsigned int nr_irq;
176   |
177   | 	nr_irq = max_nr * IRQ_IN_COMBINER;
178   |
