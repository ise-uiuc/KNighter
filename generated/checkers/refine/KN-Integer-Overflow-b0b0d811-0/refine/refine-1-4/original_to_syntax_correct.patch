--- original_code.cpp+++ syntax_correct_refine_code.cpp@@ -144,9 +144,13 @@   return QT->isIntegerType() || QT->isEnumeralType();
 }

-// Wide target: integer-like and width >= 64 bits (covers u64, dma_addr_t on 64-bit).
+// Wide target: unsigned integer-like and width >= 64 bits (covers u64, dma_addr_t on 64-bit).
+// Narrowing to unsigned eliminates benign signed long "size" temporaries like ALSA's private_size.
 bool SAGenTestChecker::isWideTargetType(QualType QT, CheckerContext &C) {
   if (!isIntegerLike(QT))
+    return false;
+
+  if (!QT->isUnsignedIntegerOrEnumerationType())
     return false;

   unsigned Bits = getTypeBitWidth(QT, C);
@@ -188,6 +192,15 @@   const unsigned MaxDepth = 8;
   if (!E || Depth > MaxDepth) {
     getTypeRange128(E ? E->getType() : C.getASTContext().IntTy, C, Min, Max);
+    return true;
+  }
+
+  // If this expression folds to a constant, use that precise value.
+  llvm::APSInt Folded;
+  if (EvaluateExprToInt(Folded, E->IgnoreParenImpCasts(), C)) {
+    llvm::APInt V = Folded.extOrTrunc(128);
+    Min = V;
+    Max = V;
     return true;
   }
