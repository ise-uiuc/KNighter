### Report Summary

File:| /scratch/chenyuan-data/linux-debug/arch/x86/mm/amdtopology.c
---|---
Warning:| line 83, column 8
Multiplication occurs in a narrower type and is widened after; possible
overflow before assignment/addition to wide type

### Annotated Source Code


5     |  *
6     |  * This version reads it directly from the AMD northbridge.
7     |  *
8     |  * Copyright 2002,2003 Andi Kleen, SuSE Labs.
9     |  */
10    | #include <linux/kernel.h>
11    | #include <linux/init.h>
12    | #include <linux/string.h>
13    | #include <linux/nodemask.h>
14    | #include <linux/memblock.h>
15    |
16    | #include <asm/io.h>
17    | #include <linux/pci_ids.h>
18    | #include <linux/acpi.h>
19    | #include <asm/types.h>
20    | #include <asm/mmzone.h>
21    | #include <asm/proto.h>
22    | #include <asm/e820/api.h>
23    | #include <asm/pci-direct.h>
24    | #include <asm/numa.h>
25    | #include <asm/mpspec.h>
26    | #include <asm/apic.h>
27    | #include <asm/amd_nb.h>
28    |
29    | static unsigned char __initdata nodeids[8];
30    |
31    | static __init int find_northbridge(void)
32    | {
33    |  int num;
34    |
35    |  for (num = 0; num < 32; num++) {
36    | 		u32 header;
37    |
38    | 		header = read_pci_config(0, num, 0, 0x00);
39    |  if (header != (PCI_VENDOR_ID_AMD | (0x1100<<16)) &&
40    | 			header != (PCI_VENDOR_ID_AMD | (0x1200<<16)) &&
41    | 			header != (PCI_VENDOR_ID_AMD | (0x1300<<16)))
42    |  continue;
43    |
44    | 		header = read_pci_config(0, num, 1, 0x00);
45    |  if (header != (PCI_VENDOR_ID_AMD | (0x1101<<16)) &&
46    | 			header != (PCI_VENDOR_ID_AMD | (0x1201<<16)) &&
47    | 			header != (PCI_VENDOR_ID_AMD | (0x1301<<16)))
48    |  continue;
49    |  return num;
50    | 	}
51    |
52    |  return -ENOENT;
53    | }
54    |
55    | int __init amd_numa_init(void)
56    | {
57    |  unsigned int numnodes, cores, apicid;
58    | 	u64 prevbase, start = PFN_PHYS(0);
59    | 	u64 end = PFN_PHYS(max_pfn);
60    | 	u32 nodeid, reg;
61    |  int i, j, nb;
62    |
63    |  if (!early_pci_allowed())
    1Assuming the condition is false→
    2←Taking false branch→
64    |  return -EINVAL;
65    |
66    |  nb = find_northbridge();
67    |  if (nb < 0)
    3←Assuming 'nb' is >= 0→
68    |  return nb;
69    |
70    |  pr_info("Scanning NUMA topology in Northbridge %d\n", nb);
    4←Taking false branch→
    5←Taking true branch→
    6←'?' condition is true→
    7←'?' condition is true→
    8←Loop condition is false.  Exiting loop→
71    |
72    | 	reg = read_pci_config(0, nb, 0, 0x60);
73    | 	numnodes = ((reg >> 4) & 0xF) + 1;
74    |  if (numnodes <= 1)
    9←Assuming 'numnodes' is > 1→
75    |  return -ENOENT;
76    |
77    |  pr_info("Number of physical nodes %d\n", numnodes);
    10←Taking false branch→
    11←Taking true branch→
    12←'?' condition is true→
    13←'?' condition is true→
    14←Loop condition is false.  Exiting loop→
78    |
79    | 	prevbase = 0;
80    |  for (i = 0; i < 8; i++) {
    15←Loop condition is true.  Entering loop body→
81    | 		u64 base, limit;
82    |
83    |  base = read_pci_config(0, nb, 1, 0x40 + i*8);
    16←Multiplication occurs in a narrower type and is widened after; possible overflow before assignment/addition to wide type
84    | 		limit = read_pci_config(0, nb, 1, 0x44 + i*8);
85    |
86    | 		nodeids[i] = nodeid = limit & 7;
87    |  if ((base & 3) == 0) {
88    |  if (i < numnodes)
89    |  pr_info("Skipping disabled node %d\n", i);
90    |  continue;
91    | 		}
92    |  if (nodeid >= numnodes) {
93    |  pr_info("Ignoring excess node %d (%Lx:%Lx)\n", nodeid,
94    |  base, limit);
95    |  continue;
96    | 		}
97    |
98    |  if (!limit) {
99    |  pr_info("Skipping node entry %d (base %Lx)\n",
100   |  i, base);
101   |  continue;
102   | 		}
103   |  if ((base >> 8) & 3 || (limit >> 8) & 3) {
104   |  pr_err("Node %d using interleaving mode %Lx/%Lx\n",
105   |  nodeid, (base >> 8) & 3, (limit >> 8) & 3);
106   |  return -EINVAL;
107   | 		}
108   |  if (node_isset(nodeid, numa_nodes_parsed)) {
109   |  pr_info("Node %d already present, skipping\n",
110   |  nodeid);
111   |  continue;
112   | 		}
113   |
