### Report Summary

File:| /scratch/chenyuan-data/linux-debug/drivers/net/usb/lan78xx.c
---|---
Warning:| line 4481, column 14
Use of netdev priv after free_netdev

### Annotated Source Code


2639  | 	vid_dword_index = (vid >> 5) & 0x7F;
2640  | 	vid_bit_index = vid & 0x1F;
2641  |
2642  | 	pdata->vlan_table[vid_dword_index] &= ~(1 << vid_bit_index);
2643  |
2644  |  /* defer register writes to a sleepable context */
2645  | 	schedule_work(&pdata->set_vlan);
2646  |
2647  |  return 0;
2648  | }
2649  |
2650  | static void lan78xx_init_ltm(struct lan78xx_net *dev)
2651  | {
2652  |  int ret;
2653  | 	u32 buf;
2654  | 	u32 regs[6] = { 0 };
2655  |
2656  | 	ret = lan78xx_read_reg(dev, USB_CFG1, &buf);
2657  |  if (buf & USB_CFG1_LTM_ENABLE_) {
2658  | 		u8 temp[2];
2659  |  /* Get values from EEPROM first */
2660  |  if (lan78xx_read_eeprom(dev, 0x3F, 2, temp) == 0) {
2661  |  if (temp[0] == 24) {
2662  | 				ret = lan78xx_read_raw_eeprom(dev,
2663  | 							      temp[1] * 2,
2664  | 							      24,
2665  | 							      (u8 *)regs);
2666  |  if (ret < 0)
2667  |  return;
2668  | 			}
2669  | 		} else if (lan78xx_read_otp(dev, 0x3F, 2, temp) == 0) {
2670  |  if (temp[0] == 24) {
2671  | 				ret = lan78xx_read_raw_otp(dev,
2672  | 							   temp[1] * 2,
2673  | 							   24,
2674  | 							   (u8 *)regs);
2675  |  if (ret < 0)
2676  |  return;
2677  | 			}
2678  | 		}
2679  | 	}
2680  |
2681  | 	lan78xx_write_reg(dev, LTM_BELT_IDLE0, regs[0]);
2682  | 	lan78xx_write_reg(dev, LTM_BELT_IDLE1, regs[1]);
2683  | 	lan78xx_write_reg(dev, LTM_BELT_ACT0, regs[2]);
2684  | 	lan78xx_write_reg(dev, LTM_BELT_ACT1, regs[3]);
2685  | 	lan78xx_write_reg(dev, LTM_INACTIVE0, regs[4]);
2686  | 	lan78xx_write_reg(dev, LTM_INACTIVE1, regs[5]);
2687  | }
2688  |
2689  | static int lan78xx_urb_config_init(struct lan78xx_net *dev)
2690  | {
2691  |  int result = 0;
2692  |
2693  |  switch (dev->udev->speed) {
2694  |  case USB_SPEED_SUPER:
2695  | 		dev->rx_urb_size = RX_SS_URB_SIZE;
2696  | 		dev->tx_urb_size = TX_SS_URB_SIZE;
2697  | 		dev->n_rx_urbs = RX_SS_URB_NUM;
2698  | 		dev->n_tx_urbs = TX_SS_URB_NUM;
2699  | 		dev->bulk_in_delay = SS_BULK_IN_DELAY;
2700  | 		dev->burst_cap = SS_BURST_CAP_SIZE / SS_USB_PKT_SIZE;
2701  |  break;
2702  |  case USB_SPEED_HIGH:
2703  | 		dev->rx_urb_size = RX_HS_URB_SIZE;
2704  | 		dev->tx_urb_size = TX_HS_URB_SIZE;
2705  | 		dev->n_rx_urbs = RX_HS_URB_NUM;
2706  | 		dev->n_tx_urbs = TX_HS_URB_NUM;
2707  | 		dev->bulk_in_delay = HS_BULK_IN_DELAY;
2708  | 		dev->burst_cap = HS_BURST_CAP_SIZE / HS_USB_PKT_SIZE;
2709  |  break;
2710  |  case USB_SPEED_FULL:
2711  | 		dev->rx_urb_size = RX_FS_URB_SIZE;
2712  | 		dev->tx_urb_size = TX_FS_URB_SIZE;
2713  | 		dev->n_rx_urbs = RX_FS_URB_NUM;
2714  | 		dev->n_tx_urbs = TX_FS_URB_NUM;
2715  | 		dev->bulk_in_delay = FS_BULK_IN_DELAY;
2716  | 		dev->burst_cap = FS_BURST_CAP_SIZE / FS_USB_PKT_SIZE;
2717  |  break;
2718  |  default:
2719  | 		netdev_warn(dev->net, "USB bus speed not supported\n");
2720  | 		result = -EIO;
2721  |  break;
2722  | 	}
2723  |
2724  |  return result;
2725  | }
2726  |
2727  | static int lan78xx_start_hw(struct lan78xx_net *dev, u32 reg, u32 hw_enable)
2728  | {
2729  |  return lan78xx_update_reg(dev, reg, hw_enable, hw_enable);
2730  | }
2731  |
2732  | static int lan78xx_stop_hw(struct lan78xx_net *dev, u32 reg, u32 hw_enabled,
2733  | 			   u32 hw_disabled)
2734  | {
2735  |  unsigned long timeout;
2736  | 	bool stopped = true;
2737  |  int ret;
2738  | 	u32 buf;
2739  |
2740  |  /* Stop the h/w block (if not already stopped) */
2741  |
2742  | 	ret = lan78xx_read_reg(dev, reg, &buf);
2743  |  if (ret < 0)
2744  |  return ret;
2745  |
2746  |  if (buf & hw_enabled) {
2747  | 		buf &= ~hw_enabled;
2748  |
2749  | 		ret = lan78xx_write_reg(dev, reg, buf);
2750  |  if (ret < 0)
2751  |  return ret;
2752  |
2753  | 		stopped = false;
2754  | 		timeout = jiffies + HW_DISABLE_TIMEOUT;
4260  | 	free_netdev(net);
4261  | 	usb_put_dev(udev);
4262  | }
4263  |
4264  | static void lan78xx_tx_timeout(struct net_device *net, unsigned int txqueue)
4265  | {
4266  |  struct lan78xx_net *dev = netdev_priv(net);
4267  |
4268  | 	unlink_urbs(dev, &dev->txq);
4269  | 	napi_schedule(&dev->napi);
4270  | }
4271  |
4272  | static netdev_features_t lan78xx_features_check(struct sk_buff *skb,
4273  |  struct net_device *netdev,
4274  | 						netdev_features_t features)
4275  | {
4276  |  struct lan78xx_net *dev = netdev_priv(netdev);
4277  |
4278  |  if (skb->len > LAN78XX_TSO_SIZE(dev))
4279  | 		features &= ~NETIF_F_GSO_MASK;
4280  |
4281  | 	features = vlan_features_check(skb, features);
4282  | 	features = vxlan_features_check(skb, features);
4283  |
4284  |  return features;
4285  | }
4286  |
4287  | static const struct net_device_ops lan78xx_netdev_ops = {
4288  | 	.ndo_open		= lan78xx_open,
4289  | 	.ndo_stop		= lan78xx_stop,
4290  | 	.ndo_start_xmit		= lan78xx_start_xmit,
4291  | 	.ndo_tx_timeout		= lan78xx_tx_timeout,
4292  | 	.ndo_change_mtu		= lan78xx_change_mtu,
4293  | 	.ndo_set_mac_address	= lan78xx_set_mac_addr,
4294  | 	.ndo_validate_addr	= eth_validate_addr,
4295  | 	.ndo_eth_ioctl		= phy_do_ioctl_running,
4296  | 	.ndo_set_rx_mode	= lan78xx_set_multicast,
4297  | 	.ndo_set_features	= lan78xx_set_features,
4298  | 	.ndo_vlan_rx_add_vid	= lan78xx_vlan_rx_add_vid,
4299  | 	.ndo_vlan_rx_kill_vid	= lan78xx_vlan_rx_kill_vid,
4300  | 	.ndo_features_check	= lan78xx_features_check,
4301  | };
4302  |
4303  | static void lan78xx_stat_monitor(struct timer_list *t)
4304  | {
4305  |  struct lan78xx_net *dev = from_timer(dev, t, stat_monitor);
4306  |
4307  | 	lan78xx_defer_kevent(dev, EVENT_STAT_UPDATE);
4308  | }
4309  |
4310  | static int lan78xx_probe(struct usb_interface *intf,
4311  |  const struct usb_device_id *id)
4312  | {
4313  |  struct usb_host_endpoint *ep_blkin, *ep_blkout, *ep_intr;
4314  |  struct lan78xx_net *dev;
4315  |  struct net_device *netdev;
4316  |  struct usb_device *udev;
4317  |  int ret;
4318  |  unsigned int maxp;
4319  |  unsigned int period;
4320  | 	u8 *buf = NULL;
4321  |
4322  | 	udev = interface_to_usbdev(intf);
4323  | 	udev = usb_get_dev(udev);
4324  |
4325  | 	netdev = alloc_etherdev(sizeof(struct lan78xx_net));
4326  |  if (!netdev) {
    1Assuming 'netdev' is non-null→
    2←Taking false branch→
4327  |  dev_err(&intf->dev, "Error: OOM\n");
4328  | 		ret = -ENOMEM;
4329  |  goto out1;
4330  | 	}
4331  |
4332  |  /* netdev_printk() needs this */
4333  |  SET_NETDEV_DEV(netdev, &intf->dev);
4334  |
4335  | 	dev = netdev_priv(netdev);
4336  | 	dev->udev = udev;
4337  | 	dev->intf = intf;
4338  | 	dev->net = netdev;
4339  | 	dev->msg_enable = netif_msg_init(msg_level, NETIF_MSG_DRV
4340  | 					| NETIF_MSG_PROBE | NETIF_MSG_LINK);
4341  |
4342  | 	skb_queue_head_init(&dev->rxq);
4343  | 	skb_queue_head_init(&dev->txq);
4344  | 	skb_queue_head_init(&dev->rxq_done);
4345  | 	skb_queue_head_init(&dev->txq_pend);
4346  |  skb_queue_head_init(&dev->rxq_overflow);
4347  |  mutex_init(&dev->phy_mutex);
    3←Loop condition is false.  Exiting loop→
4348  |  mutex_init(&dev->dev_mutex);
    4←Loop condition is false.  Exiting loop→
4349  |
4350  |  ret = lan78xx_urb_config_init(dev);
4351  |  if (ret4.1'ret' is < 0 < 0)
    5←Taking true branch→
4352  |  goto out2;
    6←Control jumps to line 4479→
4353  |
4354  | 	ret = lan78xx_alloc_tx_resources(dev);
4355  |  if (ret < 0)
4356  |  goto out2;
4357  |
4358  | 	ret = lan78xx_alloc_rx_resources(dev);
4359  |  if (ret < 0)
4360  |  goto out3;
4361  |
4362  |  /* MTU range: 68 - 9000 */
4363  | 	netdev->max_mtu = MAX_SINGLE_PACKET_SIZE;
4364  |
4365  | 	netif_set_tso_max_size(netdev, LAN78XX_TSO_SIZE(dev));
4366  |
4367  | 	netif_napi_add(netdev, &dev->napi, lan78xx_poll);
4368  |
4369  |  INIT_DELAYED_WORK(&dev->wq, lan78xx_delayedwork);
4370  | 	init_usb_anchor(&dev->deferred);
4371  |
4372  | 	netdev->netdev_ops = &lan78xx_netdev_ops;
4373  | 	netdev->watchdog_timeo = TX_TIMEOUT_JIFFIES;
4374  | 	netdev->ethtool_ops = &lan78xx_ethtool_ops;
4375  |
4376  | 	dev->delta = 1;
4377  |  timer_setup(&dev->stat_monitor, lan78xx_stat_monitor, 0);
4378  |
4379  |  mutex_init(&dev->stats.access_lock);
4380  |
4381  |  if (intf->cur_altsetting->desc.bNumEndpoints < 3) {
4382  | 		ret = -ENODEV;
4428  | 				 intr_complete, dev, period);
4429  | 		dev->urb_intr->transfer_flags |= URB_FREE_BUFFER;
4430  | 	}
4431  |
4432  | 	dev->maxpacket = usb_maxpacket(dev->udev, dev->pipe_out);
4433  |
4434  |  /* Reject broken descriptors. */
4435  |  if (dev->maxpacket == 0) {
4436  | 		ret = -ENODEV;
4437  |  goto out6;
4438  | 	}
4439  |
4440  |  /* driver requires remote-wakeup capability during autosuspend. */
4441  | 	intf->needs_remote_wakeup = 1;
4442  |
4443  | 	ret = lan78xx_phy_init(dev);
4444  |  if (ret < 0)
4445  |  goto out7;
4446  |
4447  | 	ret = register_netdev(netdev);
4448  |  if (ret != 0) {
4449  |  netif_err(dev, probe, netdev, "couldn't register the device\n");
4450  |  goto out8;
4451  | 	}
4452  |
4453  | 	usb_set_intfdata(intf, dev);
4454  |
4455  | 	ret = device_set_wakeup_enable(&udev->dev, true);
4456  |
4457  |  /* Default delay of 2sec has more overhead than advantage.
4458  |  * Set to 10sec as default.
4459  |  */
4460  | 	pm_runtime_set_autosuspend_delay(&udev->dev,
4461  |  DEFAULT_AUTOSUSPEND_DELAY);
4462  |
4463  |  return 0;
4464  |
4465  | out8:
4466  | 	phy_disconnect(netdev->phydev);
4467  | out7:
4468  | 	usb_free_urb(dev->urb_intr);
4469  | out6:
4470  | 	kfree(buf);
4471  | out5:
4472  | 	lan78xx_unbind(dev, intf);
4473  | out4:
4474  | 	netif_napi_del(&dev->napi);
4475  | 	lan78xx_free_rx_resources(dev);
4476  | out3:
4477  | 	lan78xx_free_tx_resources(dev);
4478  | out2:
4479  |  free_netdev(netdev);
4480  | out1:
4481  |  usb_put_dev(udev);
    7←Use of netdev priv after free_netdev
4482  |
4483  |  return ret;
4484  | }
4485  |
4486  | static u16 lan78xx_wakeframe_crc16(const u8 *buf, int len)
4487  | {
4488  |  const u16 crc16poly = 0x8005;
4489  |  int i;
4490  | 	u16 bit, crc, msb;
4491  | 	u8 data;
4492  |
4493  | 	crc = 0xFFFF;
4494  |  for (i = 0; i < len; i++) {
4495  | 		data = *buf++;
4496  |  for (bit = 0; bit < 8; bit++) {
4497  | 			msb = crc >> 15;
4498  | 			crc <<= 1;
4499  |
4500  |  if (msb ^ (u16)(data & 1)) {
4501  | 				crc ^= crc16poly;
4502  | 				crc |= (u16)0x0001U;
4503  | 			}
4504  | 			data >>= 1;
4505  | 		}
4506  | 	}
4507  |
4508  |  return crc;
4509  | }
4510  |
4511  | static int lan78xx_set_auto_suspend(struct lan78xx_net *dev)
