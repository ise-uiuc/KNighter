--- original_code.cpp+++ syntax_correct_refine_code.cpp@@ -53,6 +53,8 @@       static bool knownWorkOrTimerDeref(const CallEvent &Call, CheckerContext &C,
                                         llvm::SmallVectorImpl<unsigned> &OutIdx);

+      static bool isWithinRegion(const MemRegion *R, const MemRegion *Container);
+
       void reportUAFAtCall(const CallEvent &Call, CheckerContext &C, StringRef Msg) const;
       void reportUAFAtStmt(const Stmt *S, CheckerContext &C, StringRef Msg) const;
 };
@@ -142,6 +144,14 @@   return Found;
 }

+bool SAGenTestChecker::isWithinRegion(const MemRegion *R, const MemRegion *Container) {
+  if (!R || !Container) return false;
+  if (R == Container) return true;
+  if (const auto *SR = dyn_cast<SubRegion>(R))
+    return SR->isSubRegionOf(Container);
+  return false;
+}
+
 void SAGenTestChecker::reportUAFAtCall(const CallEvent &Call, CheckerContext &C, StringRef Msg) const {
   ExplodedNode *N = C.generateNonFatalErrorNode();
   if (!N) return;
@@ -252,6 +262,12 @@   if (!DevBase)
     return;

+  // Only report if the accessed location truly lies within the priv region
+  // (i.e., we are touching memory inside the freed priv, not merely reading
+  // an unrelated pointer variable that was aliased by over-approximation).
+  if (!isWithinRegion(R, Base))
+    return;
+
   if (devIsFreed(State, DevBase)) {
     reportUAFAtStmt(S, C, "Use of netdev priv after free_netdev");
   }
@@ -260,19 +276,13 @@ void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const {
   ProgramStateRef State = C.getState();

+  // Track simple pointer aliases using exact regions to avoid conflating
+  // an entire object with a pointer stored in one of its fields.
   const MemRegion *LHS = Loc.getAsRegion();
   if (!LHS)
     return;
-  LHS = getBaseRegionOrSelf(LHS);
-  LHS = resolveAlias(State, LHS);
-  if (!LHS)
-    return;
-
+  // Do NOT collapse to base region for aliasing; keep the exact lvalue storage.
   const MemRegion *RHS = Val.getAsRegion();
-  if (!RHS)
-    return;
-  RHS = getBaseRegionOrSelf(RHS);
-  RHS = resolveAlias(State, RHS);
   if (!RHS)
     return;

@@ -280,7 +290,7 @@   State = State->set<PtrAliasMap>(LHS, RHS);
   State = State->set<PtrAliasMap>(RHS, LHS);

-  // Propagate priv->dev mapping across alias
+  // Propagate priv->dev mapping across alias (based on exact region keys).
   if (const MemRegion *const *DevBase = State->get<Priv2DevMap>(RHS)) {
     State = State->set<Priv2DevMap>(LHS, *DevBase);
   }
