--- original_code.cpp+++ semantic_correct_refine_code.cpp@@ -20,7 +20,7 @@ using namespace ento;
 using namespace taint;

-// Program state: track pointer-like regions that may come from "optional" getters.
+// Program state: track pointer-like storage regions that may come from "optional" getters.
 REGISTER_MAP_WITH_PROGRAMSTATE(OptionalPtrMap, const MemRegion*, unsigned)
 // Map the return symbol of optional getter calls; used to transfer tag on bind.
 REGISTER_MAP_WITH_PROGRAMSTATE(OptRetSymMap, SymbolRef, char)
@@ -56,13 +56,14 @@       static bool isIS_ERR_Name(const Expr *E, CheckerContext &C);
       static bool isIS_ERR_OR_NULL_Name(const Expr *E, CheckerContext &C);

-      static ProgramStateRef overwriteFlags(ProgramStateRef State, const MemRegion *BaseReg, unsigned Flags);
-      static ProgramStateRef orFlags(ProgramStateRef State, const MemRegion *BaseReg, unsigned Mask);
+      static ProgramStateRef overwriteFlags(ProgramStateRef State, const MemRegion *Reg, unsigned Flags);
+      static ProgramStateRef orFlags(ProgramStateRef State, const MemRegion *Reg, unsigned Mask);

       const MemRegion *getTrackedRegionFromExpr(const Expr *E, CheckerContext &C, ProgramStateRef State) const;
-      const MemRegion *getFirstTrackedRegionInCondition(const Stmt *Condition, CheckerContext &C) const;
-
-      const Expr *getDerefBaseExpr(const Stmt *S, CheckerContext &C) const;
+
+      // AST helpers to determine dereference contexts.
+      static bool nodeContains(const Stmt *Root, const Stmt *Query);
+      const Stmt *findDerefUseSiteForLoad(const Stmt *S, CheckerContext &C) const;

       void reportDerefWithoutNullCheck(const Stmt *S, unsigned Flags, CheckerContext &C) const;
 };
@@ -94,98 +95,70 @@   return ExprHasName(E, "IS_ERR_OR_NULL", C);
 }

-ProgramStateRef SAGenTestChecker::overwriteFlags(ProgramStateRef State, const MemRegion *BaseReg, unsigned Flags) {
-  if (!BaseReg) return State;
-  return State->set<OptionalPtrMap>(BaseReg, Flags);
-}
-
-ProgramStateRef SAGenTestChecker::orFlags(ProgramStateRef State, const MemRegion *BaseReg, unsigned Mask) {
-  if (!BaseReg) return State;
-  const unsigned *Old = State->get<OptionalPtrMap>(BaseReg);
+ProgramStateRef SAGenTestChecker::overwriteFlags(ProgramStateRef State, const MemRegion *Reg, unsigned Flags) {
+  if (!Reg) return State;
+  return State->set<OptionalPtrMap>(Reg, Flags);
+}
+
+ProgramStateRef SAGenTestChecker::orFlags(ProgramStateRef State, const MemRegion *Reg, unsigned Mask) {
+  if (!Reg) return State;
+  const unsigned *Old = State->get<OptionalPtrMap>(Reg);
   unsigned NewFlags = (Old ? *Old : 0u) | Mask;
-  return State->set<OptionalPtrMap>(BaseReg, NewFlags);
+  return State->set<OptionalPtrMap>(Reg, NewFlags);
 }

 const MemRegion *SAGenTestChecker::getTrackedRegionFromExpr(const Expr *E, CheckerContext &C, ProgramStateRef State) const {
   if (!E) return nullptr;
   const MemRegion *MR = getMemRegionFromExpr(E, C);
   if (!MR) return nullptr;
-  MR = MR->getBaseRegion();
-  if (!MR) return nullptr;
+  // Important: do NOT collapse to base region. We want the exact storage (e.g., FieldRegion for lcd->im_pins).
   if (State->get<OptionalPtrMap>(MR))
     return MR;
   return nullptr;
 }

-const MemRegion *SAGenTestChecker::getFirstTrackedRegionInCondition(const Stmt *Condition, CheckerContext &C) const {
-  ProgramStateRef State = C.getState();
-  // Try call-expression based checks first (IS_ERR/IS_ERR_OR_NULL)
-  if (const auto *CE = findSpecificTypeInChildren<CallExpr>(Condition)) {
-    if (isIS_ERR_Name(CE, C) || isIS_ERR_OR_NULL_Name(CE, C)) {
-      if (CE->getNumArgs() >= 1) {
-        if (const Expr *Arg0 = CE->getArg(0)) {
-          if (const MemRegion *MR = getTrackedRegionFromExpr(Arg0, C, State))
-            return MR;
-        }
-      }
-    }
-  }
-
-  const Expr *CondE = dyn_cast<Expr>(Condition);
-  if (!CondE) return nullptr;
-  CondE = CondE->IgnoreParenCasts();
-
-  // Binary: ptr == NULL or ptr != NULL
-  if (const auto *BO = dyn_cast<BinaryOperator>(CondE)) {
-    if (BO->getOpcode() == BO_EQ || BO->getOpcode() == BO_NE) {
-      const Expr *L = BO->getLHS()->IgnoreParenCasts();
-      const Expr *R = BO->getRHS()->IgnoreParenCasts();
-      bool LIsNull = L->isNullPointerConstant(C.getASTContext(), Expr::NPC_ValueDependentIsNull);
-      bool RIsNull = R->isNullPointerConstant(C.getASTContext(), Expr::NPC_ValueDependentIsNull);
-      const Expr *PtrE = nullptr;
-      if (LIsNull && !RIsNull) PtrE = R;
-      else if (RIsNull && !LIsNull) PtrE = L;
-      if (PtrE) {
-        if (const MemRegion *MR = getTrackedRegionFromExpr(PtrE, C, State))
-          return MR;
-      }
-    }
-  }
-
-  // Unary: !ptr
-  if (const auto *UO = dyn_cast<UnaryOperator>(CondE)) {
-    if (UO->getOpcode() == UO_LNot) {
-      if (const Expr *SubE = UO->getSubExpr()) {
-        if (const MemRegion *MR = getTrackedRegionFromExpr(SubE, C, State))
-          return MR;
-      }
-    }
-  }
-
-  // Truthiness: if (ptr)
-  if (const MemRegion *MR = getTrackedRegionFromExpr(CondE, C, State))
-    return MR;
-
-  return nullptr;
-}
-
-const Expr *SAGenTestChecker::getDerefBaseExpr(const Stmt *S, CheckerContext &C) const {
-  // Member access via pointer: ptr->field
-  if (const auto *ME = findSpecificTypeInChildren<MemberExpr>(S)) {
+bool SAGenTestChecker::nodeContains(const Stmt *Root, const Stmt *Query) {
+  if (!Root || !Query) return false;
+  if (Root == Query) return true;
+  for (const Stmt *Child : Root->children()) {
+    if (Child && nodeContains(Child, Query))
+      return true;
+  }
+  return false;
+}
+
+// Find a dereference use site for a load represented by statement S:
+// - MemberExpr with '->' where S is within the base subtree.
+// - UnaryOperator '*' where S is within the subexpr subtree.
+// - ArraySubscriptExpr where S is within the base subtree.
+const Stmt *SAGenTestChecker::findDerefUseSiteForLoad(const Stmt *S, CheckerContext &C) const {
+  if (!S) return nullptr;
+
+  // Check parent MemberExpr with '->'
+  if (const auto *ME = findSpecificTypeInParents<MemberExpr>(S, C)) {
     if (ME->isArrow()) {
-      return ME->getBase();
-    }
-  }
-  // Explicit dereference: *ptr
-  if (const auto *UO = findSpecificTypeInChildren<UnaryOperator>(S)) {
+      const Expr *Base = ME->getBase();
+      if (Base && nodeContains(Base, S))
+        return ME;
+    }
+  }
+
+  // Check parent UnaryOperator '*'
+  if (const auto *UO = findSpecificTypeInParents<UnaryOperator>(S, C)) {
     if (UO->getOpcode() == UO_Deref) {
-      return UO->getSubExpr();
-    }
-  }
-  // Array subscript via pointer: ptr[i]
-  if (const auto *ASE = findSpecificTypeInChildren<ArraySubscriptExpr>(S)) {
-    return ASE->getBase();
-  }
+      const Expr *Sub = UO->getSubExpr();
+      if (Sub && nodeContains(Sub, S))
+        return UO;
+    }
+  }
+
+  // Check parent ArraySubscriptExpr
+  if (const auto *ASE = findSpecificTypeInParents<ArraySubscriptExpr>(S, C)) {
+    const Expr *Base = ASE->getBase();
+    if (Base && nodeContains(Base, S))
+      return ASE;
+  }
+
   return nullptr;
 }

@@ -210,13 +183,11 @@ void SAGenTestChecker::checkBind(SVal Loc, SVal Val, const Stmt *S, CheckerContext &C) const {
   const MemRegion *Dst = Loc.getAsRegion();
   if (!Dst) return;
-  Dst = Dst->getBaseRegion();
-  if (!Dst) return;

   ProgramStateRef State = C.getState();
   bool Changed = false;

-  // Case A: Binding the return of an optional getter (tagged by symbol).
+  // Case A: Binding the return of an optional getter (tagged by symbol) into storage.
   if (SymbolRef Sym = Val.getAsSymbol()) {
     if (State->get<OptRetSymMap>(Sym)) {
       State = overwriteFlags(State, Dst, FromOptionalGetter);
@@ -225,15 +196,12 @@     }
   }

-  // Case B: Binding from another tracked region -> copy flags.
+  // Case B: Binding from another tracked storage region -> copy flags.
   if (!Changed) {
     if (const MemRegion *Src = Val.getAsRegion()) {
-      Src = Src->getBaseRegion();
-      if (Src) {
-        if (const unsigned *SrcFlags = State->get<OptionalPtrMap>(Src)) {
-          State = overwriteFlags(State, Dst, *SrcFlags);
-          Changed = true;
-        }
+      if (const unsigned *SrcFlags = State->get<OptionalPtrMap>(Src)) {
+        State = overwriteFlags(State, Dst, *SrcFlags);
+        Changed = true;
       }
     }
   }
@@ -332,22 +300,23 @@ }

 void SAGenTestChecker::checkLocation(SVal Loc, bool IsLoad, const Stmt *S, CheckerContext &C) const {
-  if (!S) return;
-
-  const Expr *BaseE = getDerefBaseExpr(S, C);
-  if (!BaseE) return;
+  // We only care about loads from optional pointer storage, and only when used
+  // as a base of a dereference like '->', '*', or '[]'.
+  if (!IsLoad || !S) return;

   ProgramStateRef State = C.getState();
-  const MemRegion *MR = getMemRegionFromExpr(BaseE, C);
-  if (!MR) return;
-  MR = MR->getBaseRegion();
-  if (!MR) return;
-
-  const unsigned *Flags = State->get<OptionalPtrMap>(MR);
+  const MemRegion *LocReg = Loc.getAsRegion();
+  if (!LocReg) return;
+
+  const unsigned *Flags = State->get<OptionalPtrMap>(LocReg);
   if (!Flags) return;

+  // Is this particular load used in a dereference context?
+  const Stmt *DerefSite = findDerefUseSiteForLoad(S, C);
+  if (!DerefSite) return;
+
   if ((*Flags & FromOptionalGetter) && !(*Flags & NullCheckedObserved)) {
-    reportDerefWithoutNullCheck(S, *Flags, C);
+    reportDerefWithoutNullCheck(DerefSite, *Flags, C);
   }
 }
