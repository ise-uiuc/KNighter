### Report Summary

File:| drivers/net/wireless/realtek/rtlwifi/debug.c
---|---
Warning:| line 378, column 6
copy_from_user length not bounded by destination buffer size

### Annotated Source Code


310   | static struct rtl_debugfs_priv rtl_debug_priv_write_reg = {
311   | 	.cb_write = rtl_debugfs_set_write_reg,
312   | };
313   |
314   | static ssize_t rtl_debugfs_set_write_h2c(struct file *filp,
315   |  const char __user *buffer,
316   | 					 size_t count, loff_t *loff)
317   | {
318   |  struct rtl_debugfs_priv *debugfs_priv = filp->private_data;
319   |  struct rtl_priv *rtlpriv = debugfs_priv->rtlpriv;
320   |  struct ieee80211_hw *hw = rtlpriv->hw;
321   |  char tmp[32 + 1];
322   |  int tmp_len;
323   | 	u8 h2c_len, h2c_data_packed[8];
324   |  int h2c_data[8];	/* idx 0: cmd */
325   |  int i;
326   |
327   |  if (count < 3)
328   |  return -EFAULT;
329   |
330   | 	tmp_len = (count > sizeof(tmp) - 1 ? sizeof(tmp) - 1 : count);
331   |
332   |  if (copy_from_user(tmp, buffer, tmp_len))
333   |  return -EFAULT;
334   |
335   | 	tmp[tmp_len] = '\0';
336   |
337   | 	h2c_len = sscanf(tmp, "%X %X %X %X %X %X %X %X",
338   | 			 &h2c_data[0], &h2c_data[1],
339   | 			 &h2c_data[2], &h2c_data[3],
340   | 			 &h2c_data[4], &h2c_data[5],
341   | 			 &h2c_data[6], &h2c_data[7]);
342   |
343   |  if (h2c_len == 0)
344   |  return -EINVAL;
345   |
346   |  for (i = 0; i < h2c_len; i++)
347   | 		h2c_data_packed[i] = (u8)h2c_data[i];
348   |
349   | 	rtlpriv->cfg->ops->fill_h2c_cmd(hw, h2c_data_packed[0],
350   | 					h2c_len - 1,
351   | 					&h2c_data_packed[1]);
352   |
353   |  return count;
354   | }
355   |
356   | static struct rtl_debugfs_priv rtl_debug_priv_write_h2c = {
357   | 	.cb_write = rtl_debugfs_set_write_h2c,
358   | };
359   |
360   | static ssize_t rtl_debugfs_set_write_rfreg(struct file *filp,
361   |  const char __user *buffer,
362   | 					    size_t count, loff_t *loff)
363   | {
364   |  struct rtl_debugfs_priv *debugfs_priv = filp->private_data;
365   |  struct rtl_priv *rtlpriv = debugfs_priv->rtlpriv;
366   |  struct ieee80211_hw *hw = rtlpriv->hw;
367   |  char tmp[32 + 1];
368   |  int tmp_len;
369   |  int num;
370   |  int path;
371   | 	u32 addr, bitmask, data;
372   |
373   |  if (count < 3)
    1Assuming 'count' is >= 3→
374   |  return -EFAULT;
375   |
376   |  tmp_len = (count > sizeof(tmp) - 1 ? sizeof(tmp) - 1 : count);
    2←Taking false branch→
    3←Assuming the condition is true→
    4←'?' condition is true→
377   |
378   |  if (copy_from_user(tmp, buffer, tmp_len))
    5←copy_from_user length not bounded by destination buffer size
379   |  return -EFAULT;
380   |
381   | 	tmp[tmp_len] = '\0';
382   |
383   | 	num = sscanf(tmp, "%X %X %X %X",
384   | 		     &path, &addr, &bitmask, &data);
385   |
386   |  if (num != 4) {
387   |  rtl_dbg(rtlpriv, COMP_ERR, DBG_DMESG,
388   |  "Format is <path> <addr> <mask> <data>\n");
389   |  return -EINVAL;
390   | 	}
391   |
392   | 	rtl_set_rfreg(hw, path, addr, bitmask, data);
393   |
394   |  return count;
395   | }
396   |
397   | static struct rtl_debugfs_priv rtl_debug_priv_write_rfreg = {
398   | 	.cb_write = rtl_debugfs_set_write_rfreg,
399   | };
400   |
401   | static int rtl_debugfs_close(struct inode *inode, struct file *filp)
402   | {
403   |  return 0;
404   | }
405   |
406   | static ssize_t rtl_debugfs_common_write(struct file *filp,
407   |  const char __user *buffer,
408   | 					size_t count, loff_t *loff)
