- Decision: NotABug
- Reason: The flagged expression is double_blocks = (1 << (ptrs_bits * 2)). Here, 1 is a 32-bit int, so the shift is performed in 32-bit width before assignment to long. However, ext4 constrains ptrs_bits = log2(EXT4_ADDR_PER_BLOCK), where EXT4_ADDR_PER_BLOCK = blocksize/4. With ext4’s allowed block sizes (up to 64K on suitable architectures), ptrs_bits ≤ 14, hence (ptrs_bits * 2) ≤ 28. Therefore, 1 << (ptrs_bits * 2) ≤ 1 << 28 = 268,435,456, which safely fits in 32-bit int. No overflow or truncation occurs in 32-bit before the widening to long, and the assignment preserves the exact value on both 32-bit and 64-bit architectures. The subsequent comparisons also operate with ext4_lblk_t (32-bit) values, so a 64-bit intermediate is unnecessary. This does not match the target bug pattern (which requires a shift that would overflow in 32-bit and only be correct if widened before the shift). The static analyzer’s own note “right operand of bit shift is … less than 32” supports this. Thus, it’s a false positive.
