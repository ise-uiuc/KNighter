### Report Summary

File:| fs/jffs2/gc.c
---|---
Warning:| line 751, column 2
Pointer freed in cleanup then retried without resetting to NULL; early goto
can double free

### Annotated Source Code


701   |
702   |  if (ret || (retlen != rawlen)) {
703   |  pr_notice("Write of %d bytes at 0x%08x failed. returned %d, retlen %zd\n",
704   |  rawlen, phys_ofs, ret, retlen);
705   |  if (retlen) {
706   | 			jffs2_add_physical_node_ref(c, phys_ofs | REF_OBSOLETE, rawlen, NULL);
707   | 		} else {
708   |  pr_notice("Not marking the space at 0x%08x as dirty because the flash driver returned retlen zero\n",
709   |  phys_ofs);
710   | 		}
711   |  if (!retried) {
712   |  /* Try to reallocate space and retry */
713   | 			uint32_t dummy;
714   |  struct jffs2_eraseblock *jeb = &c->blocks[phys_ofs / c->sector_size];
715   |
716   | 			retried = 1;
717   |
718   |  jffs2_dbg(1, "Retrying failed write of REF_PRISTINE node.\n");
719   |
720   |  jffs2_dbg_acct_sanity_check(c,jeb);
721   | 			jffs2_dbg_acct_paranoia_check(c, jeb);
722   |
723   | 			ret = jffs2_reserve_space_gc(c, rawlen, &dummy, rawlen);
724   |  /* this is not the exact summary size of it,
725   |  it is only an upper estimation */
726   |
727   |  if (!ret) {
728   |  jffs2_dbg(1, "Allocated space at 0x%08x to retry failed write.\n",
729   |  phys_ofs);
730   |
731   |  jffs2_dbg_acct_sanity_check(c,jeb);
732   | 				jffs2_dbg_acct_paranoia_check(c, jeb);
733   |
734   |  goto retry;
735   | 			}
736   |  jffs2_dbg(1, "Failed to allocate space to retry failed write: %d!\n",
737   |  ret);
738   | 		}
739   |
740   |  if (!ret)
741   | 			ret = -EIO;
742   |  goto out_node;
743   | 	}
744   | 	jffs2_add_physical_node_ref(c, phys_ofs | REF_PRISTINE, rawlen, ic);
745   |
746   | 	jffs2_mark_node_obsolete(c, raw);
747   |  jffs2_dbg(1, "WHEEE! GC REF_PRISTINE node at 0x%08x succeeded\n",
748   |  ref_offset(raw));
749   |
750   |  out_node:
751   |  kfree(node);
    Pointer freed in cleanup then retried without resetting to NULL; early goto can double free
752   |  return ret;
753   |  bail:
754   | 	ret = -EBADFD;
755   |  goto out_node;
756   | }
757   |
758   | static int jffs2_garbage_collect_metadata(struct jffs2_sb_info *c, struct jffs2_eraseblock *jeb,
759   |  struct jffs2_inode_info *f, struct jffs2_full_dnode *fn)
760   | {
761   |  struct jffs2_full_dnode *new_fn;
762   |  struct jffs2_raw_inode ri;
763   |  struct jffs2_node_frag *last_frag;
764   |  union jffs2_device_node dev;
765   |  char *mdata = NULL;
766   |  int mdatalen = 0;
767   | 	uint32_t alloclen, ilen;
768   |  int ret;
769   |
770   |  if (S_ISBLK(JFFS2_F_I_MODE(f)) ||
771   |  S_ISCHR(JFFS2_F_I_MODE(f)) ) {
772   |  /* For these, we don't actually need to read the old node */
773   | 		mdatalen = jffs2_encode_dev(&dev, JFFS2_F_I_RDEV(f));
774   | 		mdata = (char *)&dev;
775   |  jffs2_dbg(1, "%s(): Writing %d bytes of kdev_t\n",
776   |  __func__, mdatalen);
777   | 	} else if (S_ISLNK(JFFS2_F_I_MODE(f))) {
778   | 		mdatalen = fn->size;
779   | 		mdata = kmalloc(fn->size, GFP_KERNEL);
780   |  if (!mdata) {
781   |  pr_warn("kmalloc of mdata failed in jffs2_garbage_collect_metadata()\n");
