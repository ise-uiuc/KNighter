### Report Summary

File:| drivers/hwmon/w83627ehf.c
---|---
Warning:| line 677, column 7
Loop bound uses size of one array but also indexes a smaller array with the
same index; possible out-of-bounds (bound=4, array 'W83627EHF_REG_TEMP_OFFSET'
size=3)

### Annotated Source Code


627   |  if (!(data->has_fan & (1 << i)))
628   |  continue;
629   |
630   | 			data->fan_start_output[i] =
631   | 			  w83627ehf_read_value(data,
632   | 					     W83627EHF_REG_FAN_START_OUTPUT[i]);
633   | 			data->fan_stop_output[i] =
634   | 			  w83627ehf_read_value(data,
635   | 					     W83627EHF_REG_FAN_STOP_OUTPUT[i]);
636   | 			data->fan_stop_time[i] =
637   | 			  w83627ehf_read_value(data,
638   | 					       W83627EHF_REG_FAN_STOP_TIME[i]);
639   |
640   |  if (data->REG_FAN_MAX_OUTPUT &&
641   | 			    data->REG_FAN_MAX_OUTPUT[i] != 0xff)
642   | 				data->fan_max_output[i] =
643   | 				  w83627ehf_read_value(data,
644   | 						data->REG_FAN_MAX_OUTPUT[i]);
645   |
646   |  if (data->REG_FAN_STEP_OUTPUT &&
647   | 			    data->REG_FAN_STEP_OUTPUT[i] != 0xff)
648   | 				data->fan_step_output[i] =
649   | 				  w83627ehf_read_value(data,
650   | 						data->REG_FAN_STEP_OUTPUT[i]);
651   |
652   | 			data->target_temp[i] =
653   | 				w83627ehf_read_value(data,
654   | 					W83627EHF_REG_TARGET[i]) &
655   | 					(data->pwm_mode[i] == 1 ? 0x7f : 0xff);
656   | 		}
657   |
658   |  /* Measured temperatures and limits */
659   |  for (i = 0; i < NUM_REG_TEMP; i++) {
660   |  if (!(data->have_temp & (1 << i)))
661   |  continue;
662   | 			data->temp[i] = w83627ehf_read_temp(data,
663   | 						data->reg_temp[i]);
664   |  if (data->reg_temp_over[i])
665   | 				data->temp_max[i]
666   | 				  = w83627ehf_read_temp(data,
667   | 						data->reg_temp_over[i]);
668   |  if (data->reg_temp_hyst[i])
669   | 				data->temp_max_hyst[i]
670   | 				  = w83627ehf_read_temp(data,
671   | 						data->reg_temp_hyst[i]);
672   |  if (i > 2)
673   |  continue;
674   |  if (data->have_temp_offset & (1 << i))
675   | 				data->temp_offset[i]
676   | 				  = w83627ehf_read_value(data,
677   |  W83627EHF_REG_TEMP_OFFSET[i]);
    Loop bound uses size of one array but also indexes a smaller array with the same index; possible out-of-bounds (bound=4, array 'W83627EHF_REG_TEMP_OFFSET' size=3)
678   | 		}
679   |
680   | 		data->alarms = w83627ehf_read_value(data,
681   |  W83627EHF_REG_ALARM1) |
682   | 			       (w83627ehf_read_value(data,
683   |  W83627EHF_REG_ALARM2) << 8) |
684   | 			       (w83627ehf_read_value(data,
685   |  W83627EHF_REG_ALARM3) << 16);
686   |
687   | 		data->caseopen = w83627ehf_read_value(data,
688   |  W83627EHF_REG_CASEOPEN_DET);
689   |
690   | 		data->last_updated = jiffies;
691   | 		data->valid = true;
692   | 	}
693   |
694   | 	mutex_unlock(&data->update_lock);
695   |  return data;
696   | }
697   |
698   | #define store_in_reg(REG, reg) \
699   | static int \
700   | store_in_##reg(struct device *dev, struct w83627ehf_data *data, int channel, \
701   |  long val) \
702   | { \
703   |  if (val < 0) \
704   |  return -EINVAL; \
705   |  mutex_lock(&data->update_lock); \
706   |  data->in_##reg[channel] = in_to_reg(val, channel, data->scale_in); \
707   |  w83627ehf_write_value(data, W83627EHF_REG_IN_##REG(channel), \
