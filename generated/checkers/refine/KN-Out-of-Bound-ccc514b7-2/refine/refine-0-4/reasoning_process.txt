Refinement Plan:
- Root cause: The checker missed guards implemented via macro-wrapped conditions (e.g., Linuxâ€™s WARN_ON), because it only looked for a top-level BinaryOperator in If/?: conditions. In the false-positive case, the guard is if (WARN_ON(band >= ATH6KL_NUM_BANDS)) break;, where the true condition is wrapped inside a GNU statement expression and other wrappers. The checker did not descend into StmtExpr or other wrapper expressions to find the relational comparison guarding the loop index.
- Fix: Make condition parsing robust by:
  - Recursively searching inside condition expressions and within StmtExpr bodies for a relational comparison between the loop index and a constant (i op C), and normalize it.
  - Rework condHasIVarAgainstConst to reuse the new recursive parser.
  - Keep existing heuristics (early-exit, index mapping, branch guards) but ensure they also benefit from the robust condition parsing.
- Edge cases: Handle wrappers like builtin_expect/likely/unlikely, double-negation (!!cond), comma expressions, and GNU statement expressions. Avoid regressions by only accepting guards with exact thresholds that prove safety as before.
- Maintain Clang-18 API: Use ASTContext getParents, DynTypedNode, and no additional includes removed.

Refined Code:
```cpp
```
