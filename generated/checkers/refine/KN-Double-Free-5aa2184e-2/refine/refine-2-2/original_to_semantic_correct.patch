--- original_code.cpp+++ semantic_correct_refine_code.cpp@@ -708,7 +708,29 @@     }
   }

-  // 2.5) Intrafunction allocator-assignment suppression:
+  // 2.4) Intrafunction allocator-assignment suppression (path-insensitive):
+  // If this param-field is ever assigned from an allocator anywhere in this function,
+  // treat it as locally-owned in general and suppress (avoids FPs when path predicates skip the allocation).
+  if (FD && FreedME && BaseParam) {
+    const FieldDecl *CanonFD = dyn_cast<FieldDecl>(FreedME->getMemberDecl());
+    if (CanonFD) {
+      CanonFD = CanonFD->getCanonicalDecl();
+      auto ItAllocF = FuncFieldAllocAssignLocs.find(FD);
+      if (ItAllocF != FuncFieldAllocAssignLocs.end()) {
+        const auto &AllocMapField = ItAllocF->second;
+        auto ItAllocParmMap = AllocMapField.find(CanonFD);
+        if (ItAllocParmMap != AllocMapField.end()) {
+          auto ItLocs = ItAllocParmMap->second.find(BaseParam);
+          if (ItLocs != ItAllocParmMap->second.end()) {
+            if (!ItLocs->second.empty())
+              return true;
+          }
+        }
+      }
+    }
+  }
+
+  // 2.5) Intrafunction allocator-assignment suppression (ordered variant):
   // If this same param-field was assigned from an allocator in this function
   // before the current free call, treat it as locally-owned and suppress.
   if (FD && FreedME && BaseParam) {
@@ -730,6 +752,38 @@                                           : Call.getSourceRange().getBegin();
               for (SourceLocation Lalloc : AllocLocs) {
                 if (SM.isBeforeInTranslationUnit(Lalloc, CurLoc)) {
+                  return true;
+                }
+              }
+            }
+          }
+        }
+      }
+    }
+  }
+
+  // 2.6) Post-free nullification suppression:
+  // If there exists an assignment "param->field = NULL" after this free within the function,
+  // consider it a strong cleanup idiom and suppress to avoid FPs.
+  if (FD && FreedME && BaseParam) {
+    const FieldDecl *CanonFD = dyn_cast<FieldDecl>(FreedME->getMemberDecl());
+    if (CanonFD) {
+      CanonFD = CanonFD->getCanonicalDecl();
+      auto ItNullF = FuncFieldNullSetLocs.find(FD);
+      if (ItNullF != FuncFieldNullSetLocs.end()) {
+        const auto &NullMapField = ItNullF->second;
+        auto ItNullParmMap = NullMapField.find(CanonFD);
+        if (ItNullParmMap != NullMapField.end()) {
+          auto ItLocs = ItNullParmMap->second.find(BaseParam);
+          if (ItLocs != ItNullParmMap->second.end()) {
+            const auto &NullLocs = ItLocs->second;
+            if (!NullLocs.empty()) {
+              const SourceManager &SM = C.getSourceManager();
+              SourceLocation CurLoc = Call.getOriginExpr()
+                                          ? Call.getOriginExpr()->getBeginLoc()
+                                          : Call.getSourceRange().getBegin();
+              for (SourceLocation Lnull : NullLocs) {
+                if (SM.isBeforeInTranslationUnit(CurLoc, Lnull)) {
                   return true;
                 }
               }
