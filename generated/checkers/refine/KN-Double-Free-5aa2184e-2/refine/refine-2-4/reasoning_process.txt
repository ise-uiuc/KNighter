Refinement Plan:
- Root cause: The checker flags frees of param->field in shared error labels even when the field is assigned within the same function from a call that returns owned memory. In fs/verity/open.c, params->hashstate is set by fsverity_prepare_hash_state() in the same function, so freeing it in the shared error label is correct. Our checker only suppressed this when the assignment came from a known allocator; fsverity_prepare_hash_state wasnâ€™t recognized, causing a false positive.
- Fix: Track param->field assignments from any function call (not just known allocators), keyed by the specific function parameter. Suppress reports when the freed field was previously assigned from any call within the same function before the free site. This suppresses fsverity false positive while still detecting the mlx5 target bug (where mt->fc is allocated/freed in a callee and not assigned in the current function).
- Edge cases:
  - We compare source order to ensure the in-function assignment precedes the free.
  - We bind the suppression to the same parameter to avoid over-suppressing when multiple parameters have the same struct type.
  - Existing suppressions remain (ownership tracking, allocator assignment, post-free null set, etc.) to avoid regressions.
- Clang-18 compatibility: No API changes; we only add additional per-function maps and logic in the checker. No includes removed.

Refined Code:
```cpp
```
