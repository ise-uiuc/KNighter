- Decision: NotABug
- Reason: The warned pattern does not match the target bug pattern and is not a real bug. In fsverity_init_merkle_tree_params(), params is zero-initialized at entry (memset(..., 0)), so params->hashstate starts as NULL. When fsverity_prepare_hash_state() fails, the code detects IS_ERR(), records the error, explicitly sets params->hashstate = NULL, and jumps to out_err. Thus, out_errâ€™s kfree(params->hashstate) is applied to NULL, which is safe. When fsverity_prepare_hash_state() succeeds, params->hashstate holds a valid allocation owned by this function; any later goto out_err legitimately frees it. After kfree, the code zeroes the entire params (memset(params, 0, ...)), preventing any subsequent double free by callers (fsverity_free_info() would then kfree(NULL)). There is no callee-managed memory being freed unconditionally here, no path where an ERR_PTR is fed to kfree, and no double free. This differs from the target bug pattern, which involves freeing memory that may be callee-managed or not allocated, leading to double free via a shared error label.
