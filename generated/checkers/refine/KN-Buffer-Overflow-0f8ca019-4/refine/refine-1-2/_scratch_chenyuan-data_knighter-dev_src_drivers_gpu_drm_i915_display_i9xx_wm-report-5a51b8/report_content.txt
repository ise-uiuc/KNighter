### Report Summary

File:| drivers/gpu/drm/i915/display/i9xx_wm.c
---|---
Warning:| line 756, column 17
Loop bound exceeds array capacity: index 'pipe' goes up to 3 but array size is
3

### Annotated Source Code


706   | static unsigned int g4x_tlb_miss_wa(int fifo_size, int width, int cpp)
707   | {
708   |  int tlb_miss = fifo_size * 64 - width * cpp * 8;
709   |
710   |  return max(0, tlb_miss);
711   | }
712   |
713   | static void g4x_write_wm_values(struct drm_i915_private *dev_priv,
714   |  const struct g4x_wm_values *wm)
715   | {
716   |  enum pipe pipe;
717   |
718   |  for_each_pipe(dev_priv, pipe)
719   | 		trace_g4x_wm(intel_crtc_for_pipe(dev_priv, pipe), wm);
720   |
721   | 	intel_uncore_write(&dev_priv->uncore, DSPFW1,
722   | 			   FW_WM(wm->sr.plane, SR) |
723   | 			   FW_WM(wm->pipe[PIPE_B].plane[PLANE_CURSOR], CURSORB) |
724   | 			   FW_WM(wm->pipe[PIPE_B].plane[PLANE_PRIMARY], PLANEB) |
725   | 			   FW_WM(wm->pipe[PIPE_A].plane[PLANE_PRIMARY], PLANEA));
726   | 	intel_uncore_write(&dev_priv->uncore, DSPFW2,
727   | 			   (wm->fbc_en ? DSPFW_FBC_SR_EN : 0) |
728   | 			   FW_WM(wm->sr.fbc, FBC_SR) |
729   | 			   FW_WM(wm->hpll.fbc, FBC_HPLL_SR) |
730   | 			   FW_WM(wm->pipe[PIPE_B].plane[PLANE_SPRITE0], SPRITEB) |
731   | 			   FW_WM(wm->pipe[PIPE_A].plane[PLANE_CURSOR], CURSORA) |
732   | 			   FW_WM(wm->pipe[PIPE_A].plane[PLANE_SPRITE0], SPRITEA));
733   | 	intel_uncore_write(&dev_priv->uncore, DSPFW3,
734   | 			   (wm->hpll_en ? DSPFW_HPLL_SR_EN : 0) |
735   | 			   FW_WM(wm->sr.cursor, CURSOR_SR) |
736   | 			   FW_WM(wm->hpll.cursor, HPLL_CURSOR) |
737   | 			   FW_WM(wm->hpll.plane, HPLL_SR));
738   |
739   |  intel_uncore_posting_read(&dev_priv->uncore, DSPFW1);
740   | }
741   |
742   | #define FW_WM_VLV(value, plane) \
743   |  (((value) << DSPFW_ ## plane ## _SHIFT) & DSPFW_ ## plane ## _MASK_VLV)
744   |
745   | static void vlv_write_wm_values(struct drm_i915_private *dev_priv,
746   |  const struct vlv_wm_values *wm)
747   | {
748   |  enum pipe pipe;
749   |
750   |  for_each_pipe(dev_priv, pipe) {
751   | 		trace_vlv_wm(intel_crtc_for_pipe(dev_priv, pipe), wm);
752   |
753   | 		intel_uncore_write(&dev_priv->uncore, VLV_DDL(pipe),
754   | 				   (wm->ddl[pipe].plane[PLANE_CURSOR] << DDL_CURSOR_SHIFT) |
755   | 				   (wm->ddl[pipe].plane[PLANE_SPRITE1] << DDL_SPRITE_SHIFT(1)) |
756   | 				   (wm->ddl[pipe].plane[PLANE_SPRITE0] << DDL_SPRITE_SHIFT(0)) |
    Loop bound exceeds array capacity: index 'pipe' goes up to 3 but array size is 3
757   | 				   (wm->ddl[pipe].plane[PLANE_PRIMARY] << DDL_PLANE_SHIFT));
758   | 	}
759   |
760   |  /*
761   |  * Zero the (unused) WM1 watermarks, and also clear all the
762   |  * high order bits so that there are no out of bounds values
763   |  * present in the registers during the reprogramming.
764   |  */
765   | 	intel_uncore_write(&dev_priv->uncore, DSPHOWM, 0);
766   | 	intel_uncore_write(&dev_priv->uncore, DSPHOWM1, 0);
767   | 	intel_uncore_write(&dev_priv->uncore, DSPFW4, 0);
768   | 	intel_uncore_write(&dev_priv->uncore, DSPFW5, 0);
769   | 	intel_uncore_write(&dev_priv->uncore, DSPFW6, 0);
770   |
771   | 	intel_uncore_write(&dev_priv->uncore, DSPFW1,
772   | 			   FW_WM(wm->sr.plane, SR) |
773   | 			   FW_WM(wm->pipe[PIPE_B].plane[PLANE_CURSOR], CURSORB) |
774   | 			   FW_WM_VLV(wm->pipe[PIPE_B].plane[PLANE_PRIMARY], PLANEB) |
775   | 			   FW_WM_VLV(wm->pipe[PIPE_A].plane[PLANE_PRIMARY], PLANEA));
776   | 	intel_uncore_write(&dev_priv->uncore, DSPFW2,
777   | 			   FW_WM_VLV(wm->pipe[PIPE_A].plane[PLANE_SPRITE1], SPRITEB) |
778   | 			   FW_WM(wm->pipe[PIPE_A].plane[PLANE_CURSOR], CURSORA) |
779   | 			   FW_WM_VLV(wm->pipe[PIPE_A].plane[PLANE_SPRITE0], SPRITEA));
780   | 	intel_uncore_write(&dev_priv->uncore, DSPFW3,
781   | 			   FW_WM(wm->sr.cursor, CURSOR_SR));
782   |
783   |  if (IS_CHERRYVIEW(dev_priv)) {
784   | 		intel_uncore_write(&dev_priv->uncore, DSPFW7_CHV,
785   | 				   FW_WM_VLV(wm->pipe[PIPE_B].plane[PLANE_SPRITE1], SPRITED) |
786   | 				   FW_WM_VLV(wm->pipe[PIPE_B].plane[PLANE_SPRITE0], SPRITEC));
