### Report Summary

File:| drivers/gpu/drm/xe/xe_guc_ads.c
---|---
Warning:| line 355, column 3
Loop bound exceeds array capacity: index 'guc_class' goes up to 16 but array
size is 16

### Annotated Source Code


305   |
306   |  xe_gt_assert(gt, ads->golden_lrc_size +
307   |  (ads->regset_size - prev_regset_size) <=
308   |  MAX_GOLDEN_LRC_SIZE);
309   |
310   |  return 0;
311   | }
312   |
313   | static void guc_policies_init(struct xe_guc_ads *ads)
314   | {
315   |  ads_blob_write(ads, policies.dpc_promote_time,
316   |  GLOBAL_POLICY_DEFAULT_DPC_PROMOTE_TIME_US);
317   |  ads_blob_write(ads, policies.max_num_work_items,
318   |  GLOBAL_POLICY_MAX_NUM_WI);
319   |  ads_blob_write(ads, policies.global_flags, 0);
320   |  ads_blob_write(ads, policies.is_valid, 1);
321   | }
322   |
323   | static void fill_engine_enable_masks(struct xe_gt *gt,
324   |  struct iosys_map *info_map)
325   | {
326   |  struct xe_device *xe = gt_to_xe(gt);
327   |
328   |  info_map_write(xe, info_map, engine_enabled_masks[GUC_RENDER_CLASS],
329   |  engine_enable_mask(gt, XE_ENGINE_CLASS_RENDER));
330   |  info_map_write(xe, info_map, engine_enabled_masks[GUC_BLITTER_CLASS],
331   |  engine_enable_mask(gt, XE_ENGINE_CLASS_COPY));
332   |  info_map_write(xe, info_map, engine_enabled_masks[GUC_VIDEO_CLASS],
333   |  engine_enable_mask(gt, XE_ENGINE_CLASS_VIDEO_DECODE));
334   |  info_map_write(xe, info_map,
335   |  engine_enabled_masks[GUC_VIDEOENHANCE_CLASS],
336   |  engine_enable_mask(gt, XE_ENGINE_CLASS_VIDEO_ENHANCE));
337   |  info_map_write(xe, info_map, engine_enabled_masks[GUC_COMPUTE_CLASS],
338   |  engine_enable_mask(gt, XE_ENGINE_CLASS_COMPUTE));
339   |  info_map_write(xe, info_map, engine_enabled_masks[GUC_GSC_OTHER_CLASS],
340   |  engine_enable_mask(gt, XE_ENGINE_CLASS_OTHER));
341   | }
342   |
343   | static void guc_prep_golden_lrc_null(struct xe_guc_ads *ads)
344   | {
345   |  struct xe_device *xe = ads_to_xe(ads);
346   |  struct iosys_map info_map = IOSYS_MAP_INIT_OFFSET(ads_to_map(ads),
347   |  offsetof(struct __guc_ads_blob, system_info));
348   | 	u8 guc_class;
349   |
350   |  for (guc_class = 0; guc_class <= GUC_MAX_ENGINE_CLASSES; ++guc_class) {
351   |  if (!info_map_read(xe, &info_map,
352   |  engine_enabled_masks[guc_class]))
353   |  continue;
354   |
355   |  ads_blob_write(ads, ads.eng_state_size[guc_class],
    Loop bound exceeds array capacity: index 'guc_class' goes up to 16 but array size is 16
356   |  guc_ads_golden_lrc_size(ads) -
357   |  xe_lrc_skip_size(xe));
358   |  ads_blob_write(ads, ads.golden_context_lrca[guc_class],
359   |  xe_bo_ggtt_addr(ads->bo) +
360   |  guc_ads_golden_lrc_offset(ads));
361   | 	}
362   | }
363   |
364   | static void guc_mapping_table_init_invalid(struct xe_gt *gt,
365   |  struct iosys_map *info_map)
366   | {
367   |  struct xe_device *xe = gt_to_xe(gt);
368   |  unsigned int i, j;
369   |
370   |  /* Table must be set to invalid values for entries not used */
371   |  for (i = 0; i < GUC_MAX_ENGINE_CLASSES; ++i)
372   |  for (j = 0; j < GUC_MAX_INSTANCES_PER_CLASS; ++j)
373   |  info_map_write(xe, info_map, mapping_table[i][j],
374   |  GUC_MAX_INSTANCES_PER_CLASS);
375   | }
376   |
377   | static void guc_mapping_table_init(struct xe_gt *gt,
378   |  struct iosys_map *info_map)
379   | {
380   |  struct xe_device *xe = gt_to_xe(gt);
381   |  struct xe_hw_engine *hwe;
382   |  enum xe_hw_engine_id id;
383   |
384   | 	guc_mapping_table_init_invalid(gt, info_map);
385   |
