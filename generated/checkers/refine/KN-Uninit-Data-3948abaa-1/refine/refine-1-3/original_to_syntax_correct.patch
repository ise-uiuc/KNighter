--- original_code.cpp+++ syntax_correct_refine_code.cpp@@ -36,16 +36,24 @@ // Tracks producer-initialized buffers: buffer -> symbol of status/return value of producer call.
 REGISTER_MAP_WITH_PROGRAMSTATE(ProducerStatusSymMap, const MemRegion*, SymbolRef)

-// Utility Functions provided externally in the prompt:
-// - findSpecificTypeInParents
-// - findSpecificTypeInChildren
-// - EvaluateExprToInt
-// - inferSymbolMaxVal
-// - getArraySizeFromExpr
-// - getStringSize
-// - getMemRegionFromExpr
-// - KnownDerefFunction etc.
-// - ExprHasName
+// Utility function declarations (provided externally in the prompt)
+template <typename T>
+const T* findSpecificTypeInParents(const Stmt *S, CheckerContext &C);
+template <typename T>
+const T* findSpecificTypeInChildren(const Stmt *S);
+bool EvaluateExprToInt(llvm::APSInt &EvalRes, const Expr *expr, CheckerContext &C);
+const llvm::APSInt *inferSymbolMaxVal(SymbolRef Sym, CheckerContext &C);
+bool getArraySizeFromExpr(llvm::APInt &ArraySize, const Expr *E);
+bool getStringSize(llvm::APInt &StringSize, const Expr *E);
+const MemRegion* getMemRegionFromExpr(const Expr* E, CheckerContext &C);
+
+struct KnownDerefFunction {
+  const char *Name;
+  llvm::SmallVector<unsigned, 4> Params;
+};
+extern llvm::SmallVector<KnownDerefFunction, 16> DerefTable;
+bool functionKnownToDeref(const CallEvent &Call, llvm::SmallVectorImpl<unsigned> &DerefParams);
+bool ExprHasName(const Expr *E, StringRef Name, CheckerContext &C);

 namespace {
 class SAGenTestChecker : public Checker<
@@ -204,6 +212,13 @@         return true;
       }
     }
+    // asym_eds_op(params, in, out): return value is number of bytes written or < 0 on error.
+    if (ExprHasName(Origin, "asym_eds_op", C)) {
+      if (Call.getNumArgs() >= 3) {
+        BufParamIdx = 2; // 'out' buffer
+        return true;
+      }
+    }
   }
   return false;
 }
