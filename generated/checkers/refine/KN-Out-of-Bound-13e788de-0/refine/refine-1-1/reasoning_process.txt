Refinement Plan:
- Root cause: The checker treats any DeclRefExpr/MemberExpr on the left-hand side as an “index-like” expression and any “max-like” identifier on the right-hand side as a bound, which incorrectly flags valid length-vs-capacity checks such as "disk_link->len > max_len".
- Fix strategy:
  1) Strengthen the “index-like” detection to exclude classic size/length variables (e.g., names containing "len", "length", "size", "bytes").
  2) Expand the capacity/size guard filter to explicitly recognize length-vs-capacity comparisons and exclude them from reporting.
  3) Keep true positive detection by ensuring RHS “MAX-like” bounds are still recognized, including cases where macros expand to integer literals (by checking token text of the RHS for “MAX/BOUND/LIMIT”).
  4) Adjust the false-positive filter to not blanket-exclude integer-literal RHS when the source text indicates a MAX-like macro.
- Edge cases considered:
  - Avoid excluding real index checks by only filtering when LHS name is clearly length/size-related.
  - Preserve detection for macro bounds by inspecting RHS token text for MAX-like identifiers.
  - Keep behavior for classic “idx > MAX” scenarios and for the Linux rds patch case where RHS is a macro with MAX.
- API: No incompatible Clang-18 API usage. No includes removed. All changes are heuristic refinements.

Refined Code:
```cpp
```
