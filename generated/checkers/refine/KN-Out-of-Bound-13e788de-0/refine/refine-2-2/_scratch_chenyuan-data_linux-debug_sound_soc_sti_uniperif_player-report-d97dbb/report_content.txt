### Report Summary

File:| /scratch/chenyuan-data/linux-debug/sound/soc/sti/uniperif_player.c
---|---
Warning:| line 661, column 40
Off-by-one bound check: use '>= MAX' instead of '> MAX' for index validation

### Annotated Source Code


602   |  spin_lock_irqsave(&player->irq_lock, flags);
603   |  if (player->substream && player->substream->runtime)
604   | 		uni_player_set_channel_status(player,
605   | 					      player->substream->runtime);
606   |  else
607   | 		uni_player_set_channel_status(player, NULL);
608   |
609   | 	spin_unlock_irqrestore(&player->irq_lock, flags);
610   | 	mutex_unlock(&player->ctrl_lock);
611   |
612   |  return 0;
613   | }
614   |
615   | static struct snd_kcontrol_new uni_player_iec958_ctl = {
616   | 	.iface = SNDRV_CTL_ELEM_IFACE_PCM,
617   | 	.name = SNDRV_CTL_NAME_IEC958("", PLAYBACK, DEFAULT),
618   | 	.info = uni_player_ctl_iec958_info,
619   | 	.get = uni_player_ctl_iec958_get,
620   | 	.put = uni_player_ctl_iec958_put,
621   | };
622   |
623   | /*
624   |  * uniperif rate adjustement control
625   |  */
626   | static int snd_sti_clk_adjustment_info(struct snd_kcontrol *kcontrol,
627   |  struct snd_ctl_elem_info *uinfo)
628   | {
629   | 	uinfo->type = SNDRV_CTL_ELEM_TYPE_INTEGER;
630   | 	uinfo->count = 1;
631   | 	uinfo->value.integer.min = UNIPERIF_PLAYER_CLK_ADJ_MIN;
632   | 	uinfo->value.integer.max = UNIPERIF_PLAYER_CLK_ADJ_MAX;
633   | 	uinfo->value.integer.step = 1;
634   |
635   |  return 0;
636   | }
637   |
638   | static int snd_sti_clk_adjustment_get(struct snd_kcontrol *kcontrol,
639   |  struct snd_ctl_elem_value *ucontrol)
640   | {
641   |  struct snd_soc_dai *dai = snd_kcontrol_chip(kcontrol);
642   |  struct sti_uniperiph_data *priv = snd_soc_dai_get_drvdata(dai);
643   |  struct uniperif *player = priv->dai_data.uni;
644   |
645   |  mutex_lock(&player->ctrl_lock);
646   | 	ucontrol->value.integer.value[0] = player->clk_adj;
647   | 	mutex_unlock(&player->ctrl_lock);
648   |
649   |  return 0;
650   | }
651   |
652   | static int snd_sti_clk_adjustment_put(struct snd_kcontrol *kcontrol,
653   |  struct snd_ctl_elem_value *ucontrol)
654   | {
655   |  struct snd_soc_dai *dai = snd_kcontrol_chip(kcontrol);
656   |  struct sti_uniperiph_data *priv = snd_soc_dai_get_drvdata(dai);
657   |  struct uniperif *player = priv->dai_data.uni;
658   |  int ret = 0;
659   |
660   |  if ((ucontrol->value.integer.value[0] < UNIPERIF_PLAYER_CLK_ADJ_MIN) ||
    1Assuming the condition is false→
661   | 	    (ucontrol->value.integer.value[0] > UNIPERIF_PLAYER_CLK_ADJ_MAX))
    2←Assuming the condition is false→
    3←Off-by-one bound check: use '>= MAX' instead of '> MAX' for index validation
662   |  return -EINVAL;
663   |
664   |  mutex_lock(&player->ctrl_lock);
665   | 	player->clk_adj = ucontrol->value.integer.value[0];
666   |
667   |  if (player->mclk)
668   | 		ret = uni_player_clk_set_rate(player, player->mclk);
669   | 	mutex_unlock(&player->ctrl_lock);
670   |
671   |  return ret;
672   | }
673   |
674   | static struct snd_kcontrol_new uni_player_clk_adj_ctl = {
675   | 	.iface = SNDRV_CTL_ELEM_IFACE_PCM,
676   | 	.name = "PCM Playback Oversampling Freq. Adjustment",
677   | 	.info = snd_sti_clk_adjustment_info,
678   | 	.get = snd_sti_clk_adjustment_get,
679   | 	.put = snd_sti_clk_adjustment_put,
680   | };
681   |
682   | static struct snd_kcontrol_new *snd_sti_pcm_ctl[] = {
683   | 	&uni_player_clk_adj_ctl,
684   | };
685   |
686   | static struct snd_kcontrol_new *snd_sti_iec_ctl[] = {
687   | 	&uni_player_iec958_ctl,
688   | 	&uni_player_clk_adj_ctl,
689   | };
690   |
691   | static int uni_player_startup(struct snd_pcm_substream *substream,
