_base_result_dir: /scratch/chenyuan-data/knighter-dev/result-gpt-5-0814
commit_id: 63ae548f1054a0b71678d0349c7dc9628ddd42ca
commit_type: Out-of-Bound
index: 9
initial_checker_code: "#include \"clang/StaticAnalyzer/Core/BugReporter/BugReporter.h\"\
  \n#include \"clang/StaticAnalyzer/Core/BugReporter/BugType.h\"\n#include \"clang/StaticAnalyzer/Checkers/Taint.h\"\
  \n#include \"clang/StaticAnalyzer/Core/Checker.h\"\n#include \"clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h\"\
  \n#include \"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h\"\n#include\
  \ \"clang/StaticAnalyzer/Core/PathSensitive/Environment.h\"\n#include \"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h\"\
  \n#include \"clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h\"\n#include\
  \ \"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h\"\n#include \"clang/StaticAnalyzer/Frontend/CheckerRegistry.h\"\
  \n#include \"clang/AST/RecursiveASTVisitor.h\"\n#include \"clang/AST/StmtVisitor.h\"\
  \n#include \"llvm/Support/raw_ostream.h\"\n#include \"clang/StaticAnalyzer/Checkers/utility.h\"\
  \n#include \"clang/AST/ASTContext.h\"\n#include \"clang/AST/Expr.h\"\n#include \"\
  clang/AST/Type.h\"\n#include \"clang/Lex/Lexer.h\"\n#include \"llvm/ADT/APInt.h\"\
  \n#include \"llvm/ADT/APSInt.h\"\n\nusing namespace clang;\nusing namespace ento;\n\
  using namespace taint;\n\nnamespace {\n/* The checker callbacks are to be decided.\
  \ */\nclass SAGenTestChecker : public Checker<check::Location> {\n   mutable std::unique_ptr<BugType>\
  \ BT;\n\n   public:\n      SAGenTestChecker() : BT(new BugType(this, \"Index may\
  \ exceed LUT size\", \"Memory Error\")) {}\n\n      void checkLocation(SVal Loc,\
  \ bool IsLoad, const Stmt *S, CheckerContext &C) const;\n\n   private:\n\n     \
  \ bool isTargetLUTBase(const Expr *Base, CheckerContext &C) const;\n      bool getArrayBoundFromColorMember(const\
  \ Expr *Base, CheckerContext &C, llvm::APInt &OutSize) const;\n      void reportOOB(const\
  \ ArraySubscriptExpr *ASE, CheckerContext &C) const;\n};\n\nbool SAGenTestChecker::isTargetLUTBase(const\
  \ Expr *Base, CheckerContext &C) const {\n  if (!Base)\n    return false;\n  const\
  \ Expr *E = Base->IgnoreParenImpCasts();\n  // Heuristic and focused match:\n  //\
  \ Must contain \"output_tf\", \"tf_pts\" and one of \"red\", \"green\", or \"blue\"\
  \n  if (!ExprHasName(E, \"output_tf\", C))\n    return false;\n  if (!ExprHasName(E,\
  \ \"tf_pts\", C))\n    return false;\n  if (!(ExprHasName(E, \"red\", C) || ExprHasName(E,\
  \ \"green\", C) || ExprHasName(E, \"blue\", C)))\n    return false;\n  return true;\n\
  }\n\nbool SAGenTestChecker::getArrayBoundFromColorMember(const Expr *Base, CheckerContext\
  \ &C, llvm::APInt &OutSize) const {\n  if (!Base)\n    return false;\n\n  // Find\
  \ the MemberExpr that refers to the color array field: red/green/blue\n  const MemberExpr\
  \ *ME = findSpecificTypeInChildren<MemberExpr>(Base);\n  if (!ME)\n    return false;\n\
  \n  const ValueDecl *VD = ME->getMemberDecl();\n  if (!VD)\n    return false;\n\n\
  \  QualType QT = VD->getType();\n\n  // Obtain the array type and ensure it's a\
  \ ConstantArrayType\n  const ArrayType *AT = C.getASTContext().getAsArrayType(QT);\n\
  \  if (!AT)\n    return false;\n\n  const ConstantArrayType *CAT = dyn_cast<ConstantArrayType>(AT);\n\
  \  if (!CAT)\n    return false;\n\n  OutSize = CAT->getSize();\n  return true;\n\
  }\n\nvoid SAGenTestChecker::reportOOB(const ArraySubscriptExpr *ASE, CheckerContext\
  \ &C) const {\n  ExplodedNode *N = C.generateNonFatalErrorNode();\n  if (!N)\n \
  \   return;\n\n  auto R = std::make_unique<PathSensitiveBugReport>(\n      *BT,\
  \ \"Index i may exceed TRANSFER_FUNC_POINTS when indexing transfer-function LUT\"\
  , N);\n  if (ASE)\n    R->addRange(ASE->getSourceRange());\n  C.emitReport(std::move(R));\n\
  }\n\nvoid SAGenTestChecker::checkLocation(SVal /*Loc*/, bool /*IsLoad*/, const Stmt\
  \ *S, CheckerContext &C) const {\n  if (!S)\n    return;\n\n  // We only care about\
  \ array subscript expressions like output_tf->tf_pts.red[i]\n  const auto *ASE =\
  \ dyn_cast<ArraySubscriptExpr>(S);\n  if (!ASE)\n    return;\n\n  const Expr *BaseE\
  \ = ASE->getBase();\n  if (!BaseE)\n    return;\n  if (!isTargetLUTBase(BaseE, C))\n\
  \    return;\n\n  const Expr *IdxE = ASE->getIdx();\n  if (!IdxE)\n    return;\n\
  \  IdxE = IdxE->IgnoreParenImpCasts();\n\n  // Ensure the index is the loop variable\
  \ \"i\" per target pattern\n  if (!ExprHasName(IdxE, \"i\", C))\n    return;\n\n\
  \  // Get the bound from the color member array type (TRANSFER_FUNC_POINTS)\n  llvm::APInt\
  \ ArraySize;\n  if (!getArrayBoundFromColorMember(BaseE, C, ArraySize))\n    return;\
  \ // Can't determine size, don't warn\n\n  // If index is a constant, evaluate directly\n\
  \  llvm::APSInt EvalRes;\n  if (EvaluateExprToInt(EvalRes, IdxE, C)) {\n    uint64_t\
  \ IndexVal = EvalRes.getZExtValue();\n    uint64_t Bound = ArraySize.getZExtValue();\n\
  \    if (IndexVal >= Bound) {\n      reportOOB(ASE, C);\n    }\n    return;\n  }\n\
  \n  // Otherwise, try to infer a max bound for the symbolic index\n  ProgramStateRef\
  \ State = C.getState();\n  SVal IdxSV = State->getSVal(IdxE, C.getLocationContext());\n\
  \  SymbolRef Sym = IdxSV.getAsSymbol();\n  if (!Sym) {\n    // Not a simple symbol\
  \ nor constant; we cannot prove safety, but refrain from noisy reporting\n    return;\n\
  \  }\n\n  const llvm::APSInt *Max = inferSymbolMaxVal(Sym, C);\n  if (!Max) {\n\
  \    // No upper bound known on this path -> potential OOB\n    reportOOB(ASE, C);\n\
  \    return;\n  }\n\n  uint64_t MaxVal = Max->getZExtValue();\n  uint64_t BoundMinus1\
  \ = (ArraySize.getZExtValue() == 0) ? 0 : (ArraySize.getZExtValue() - 1);\n  if\
  \ (MaxVal > BoundMinus1) {\n    reportOOB(ASE, C);\n  }\n}\n\n} // end anonymous\
  \ namespace\n\nextern \"C\" void clang_registerCheckers(CheckerRegistry &registry)\
  \ {\n  registry.addChecker<SAGenTestChecker>(\n      \"custom.SAGenTestChecker\"\
  ,\n      \"Detects out-of-bounds indexing into output_tf->tf_pts.{red,green,blue}[i]\
  \ without bound check\",\n      \"\");\n}\n\nextern \"C\" const char clang_analyzerAPIVersionString[]\
  \ =\n    CLANG_ANALYZER_API_VERSION_STRING;\n"
patch: "## Patch Description\n\ndrm/amd/display: Fix potential index out of bounds\
  \ in color transformation function\n\nFixes index out of bounds issue in the color\
  \ transformation function.\nThe issue could occur when the index 'i' exceeds the\
  \ number of transfer\nfunction points (TRANSFER_FUNC_POINTS).\n\nThe fix adds a\
  \ check to ensure 'i' is within bounds before accessing the\ntransfer function points.\
  \ If 'i' is out of bounds, an error message is\nlogged and the function returns\
  \ false to indicate an error.\n\nReported by smatch:\ndrivers/gpu/drm/amd/amdgpu/../display/dc/dcn10/dcn10_cm_common.c:405\
  \ cm_helper_translate_curve_to_hw_format() error: buffer overflow 'output_tf->tf_pts.red'\
  \ 1025 <= s32max\ndrivers/gpu/drm/amd/amdgpu/../display/dc/dcn10/dcn10_cm_common.c:406\
  \ cm_helper_translate_curve_to_hw_format() error: buffer overflow 'output_tf->tf_pts.green'\
  \ 1025 <= s32max\ndrivers/gpu/drm/amd/amdgpu/../display/dc/dcn10/dcn10_cm_common.c:407\
  \ cm_helper_translate_curve_to_hw_format() error: buffer overflow 'output_tf->tf_pts.blue'\
  \ 1025 <= s32max\n\nFixes: b629596072e5 (\"drm/amd/display: Build unity lut for\
  \ shaper\")\nCc: Vitaly Prosyak <vitaly.prosyak@amd.com>\nCc: Charlene Liu <Charlene.Liu@amd.com>\n\
  Cc: Harry Wentland <harry.wentland@amd.com>\nCc: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>\n\
  Cc: Roman Li <roman.li@amd.com>\nCc: Aurabindo Pillai <aurabindo.pillai@amd.com>\n\
  Cc: Tom Chung <chiahsuan.chung@amd.com>\nSigned-off-by: Srinivasan Shanmugam <srinivasan.shanmugam@amd.com>\n\
  Reviewed-by: Tom Chung <chiahsuan.chung@amd.com>\nSigned-off-by: Alex Deucher <alexander.deucher@amd.com>\n\
  \n## Buggy Code\n\n```c\n// Function: cm_helper_translate_curve_to_hw_format in\
  \ drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\nbool cm_helper_translate_curve_to_hw_format(struct\
  \ dc_context *ctx,\n\t\t\t\tconst struct dc_transfer_func *output_tf,\n\t\t\t\t\
  struct pwl_params *lut_params, bool fixpoint)\n{\n\tstruct curve_points3 *corner_points;\n\
  \tstruct pwl_result_data *rgb_resulted;\n\tstruct pwl_result_data *rgb;\n\tstruct\
  \ pwl_result_data *rgb_plus_1;\n\tstruct pwl_result_data *rgb_minus_1;\n\n\tint32_t\
  \ region_start, region_end;\n\tint32_t i;\n\tuint32_t j, k, seg_distr[MAX_REGIONS_NUMBER],\
  \ increment, start_index, hw_points;\n\n\tif (output_tf == NULL || lut_params ==\
  \ NULL || output_tf->type == TF_TYPE_BYPASS)\n\t\treturn false;\n\n\tcorner_points\
  \ = lut_params->corner_points;\n\trgb_resulted = lut_params->rgb_resulted;\n\thw_points\
  \ = 0;\n\n\tmemset(lut_params, 0, sizeof(struct pwl_params));\n\tmemset(seg_distr,\
  \ 0, sizeof(seg_distr));\n\n\tif (output_tf->tf == TRANSFER_FUNCTION_PQ || output_tf->tf\
  \ == TRANSFER_FUNCTION_GAMMA22) {\n\t\t/* 32 segments\n\t\t * segments are from\
  \ 2^-25 to 2^7\n\t\t */\n\t\tfor (i = 0; i < NUMBER_REGIONS ; i++)\n\t\t\tseg_distr[i]\
  \ = 3;\n\n\t\tregion_start = -MAX_LOW_POINT;\n\t\tregion_end   = NUMBER_REGIONS\
  \ - MAX_LOW_POINT;\n\t} else {\n\t\t/* 11 segments\n\t\t * segment is from 2^-10\
  \ to 2^1\n\t\t * There are less than 256 points, for optimization\n\t\t */\n\t\t\
  seg_distr[0] = 3;\n\t\tseg_distr[1] = 4;\n\t\tseg_distr[2] = 4;\n\t\tseg_distr[3]\
  \ = 4;\n\t\tseg_distr[4] = 4;\n\t\tseg_distr[5] = 4;\n\t\tseg_distr[6] = 4;\n\t\t\
  seg_distr[7] = 4;\n\t\tseg_distr[8] = 4;\n\t\tseg_distr[9] = 4;\n\t\tseg_distr[10]\
  \ = 1;\n\n\t\tregion_start = -10;\n\t\tregion_end = 1;\n\t}\n\n\tfor (i = region_end\
  \ - region_start; i < MAX_REGIONS_NUMBER ; i++)\n\t\tseg_distr[i] = -1;\n\n\tfor\
  \ (k = 0; k < MAX_REGIONS_NUMBER; k++) {\n\t\tif (seg_distr[k] != -1)\n\t\t\thw_points\
  \ += (1 << seg_distr[k]);\n\t}\n\n\tj = 0;\n\tfor (k = 0; k < (region_end - region_start);\
  \ k++) {\n\t\tincrement = NUMBER_SW_SEGMENTS / (1 << seg_distr[k]);\n\t\tstart_index\
  \ = (region_start + k + MAX_LOW_POINT) *\n\t\t\t\tNUMBER_SW_SEGMENTS;\n\t\tfor (i\
  \ = start_index; i < start_index + NUMBER_SW_SEGMENTS;\n\t\t\t\ti += increment)\
  \ {\n\t\t\tif (j == hw_points - 1)\n\t\t\t\tbreak;\n\t\t\trgb_resulted[j].red =\
  \ output_tf->tf_pts.red[i];\n\t\t\trgb_resulted[j].green = output_tf->tf_pts.green[i];\n\
  \t\t\trgb_resulted[j].blue = output_tf->tf_pts.blue[i];\n\t\t\tj++;\n\t\t}\n\t}\n\
  \n\t/* last point */\n\tstart_index = (region_end + MAX_LOW_POINT) * NUMBER_SW_SEGMENTS;\n\
  \trgb_resulted[hw_points - 1].red = output_tf->tf_pts.red[start_index];\n\trgb_resulted[hw_points\
  \ - 1].green = output_tf->tf_pts.green[start_index];\n\trgb_resulted[hw_points -\
  \ 1].blue = output_tf->tf_pts.blue[start_index];\n\n\trgb_resulted[hw_points].red\
  \ = rgb_resulted[hw_points - 1].red;\n\trgb_resulted[hw_points].green = rgb_resulted[hw_points\
  \ - 1].green;\n\trgb_resulted[hw_points].blue = rgb_resulted[hw_points - 1].blue;\n\
  \n\t// All 3 color channels have same x\n\tcorner_points[0].red.x = dc_fixpt_pow(dc_fixpt_from_int(2),\n\
  \t\t\t\t\t     dc_fixpt_from_int(region_start));\n\tcorner_points[0].green.x = corner_points[0].red.x;\n\
  \tcorner_points[0].blue.x = corner_points[0].red.x;\n\n\tcorner_points[1].red.x\
  \ = dc_fixpt_pow(dc_fixpt_from_int(2),\n\t\t\t\t\t     dc_fixpt_from_int(region_end));\n\
  \tcorner_points[1].green.x = corner_points[1].red.x;\n\tcorner_points[1].blue.x\
  \ = corner_points[1].red.x;\n\n\tcorner_points[0].red.y = rgb_resulted[0].red;\n\
  \tcorner_points[0].green.y = rgb_resulted[0].green;\n\tcorner_points[0].blue.y =\
  \ rgb_resulted[0].blue;\n\n\tcorner_points[0].red.slope = dc_fixpt_div(corner_points[0].red.y,\n\
  \t\t\tcorner_points[0].red.x);\n\tcorner_points[0].green.slope = dc_fixpt_div(corner_points[0].green.y,\n\
  \t\t\tcorner_points[0].green.x);\n\tcorner_points[0].blue.slope = dc_fixpt_div(corner_points[0].blue.y,\n\
  \t\t\tcorner_points[0].blue.x);\n\n\t/* see comment above, m_arrPoints[1].y should\
  \ be the Y value for the\n\t * region end (m_numOfHwPoints), not last HW point(m_numOfHwPoints\
  \ - 1)\n\t */\n\tcorner_points[1].red.y = rgb_resulted[hw_points - 1].red;\n\tcorner_points[1].green.y\
  \ = rgb_resulted[hw_points - 1].green;\n\tcorner_points[1].blue.y = rgb_resulted[hw_points\
  \ - 1].blue;\n\tcorner_points[1].red.slope = dc_fixpt_zero;\n\tcorner_points[1].green.slope\
  \ = dc_fixpt_zero;\n\tcorner_points[1].blue.slope = dc_fixpt_zero;\n\n\tif (output_tf->tf\
  \ == TRANSFER_FUNCTION_PQ) {\n\t\t/* for PQ, we want to have a straight line from\
  \ last HW X point,\n\t\t * and the slope to be such that we hit 1.0 at 10000 nits.\n\
  \t\t */\n\t\tconst struct fixed31_32 end_value =\n\t\t\t\tdc_fixpt_from_int(125);\n\
  \n\t\tcorner_points[1].red.slope = dc_fixpt_div(\n\t\t\tdc_fixpt_sub(dc_fixpt_one,\
  \ corner_points[1].red.y),\n\t\t\tdc_fixpt_sub(end_value, corner_points[1].red.x));\n\
  \t\tcorner_points[1].green.slope = dc_fixpt_div(\n\t\t\tdc_fixpt_sub(dc_fixpt_one,\
  \ corner_points[1].green.y),\n\t\t\tdc_fixpt_sub(end_value, corner_points[1].green.x));\n\
  \t\tcorner_points[1].blue.slope = dc_fixpt_div(\n\t\t\tdc_fixpt_sub(dc_fixpt_one,\
  \ corner_points[1].blue.y),\n\t\t\tdc_fixpt_sub(end_value, corner_points[1].blue.x));\n\
  \t}\n\n\tlut_params->hw_points_num = hw_points;\n\n\tk = 0;\n\tfor (i = 1; i < MAX_REGIONS_NUMBER;\
  \ i++) {\n\t\tif (seg_distr[k] != -1) {\n\t\t\tlut_params->arr_curve_points[k].segments_num\
  \ =\n\t\t\t\t\tseg_distr[k];\n\t\t\tlut_params->arr_curve_points[i].offset =\n\t\
  \t\t\t\tlut_params->arr_curve_points[k].offset + (1 << seg_distr[k]);\n\t\t}\n\t\
  \tk++;\n\t}\n\n\tif (seg_distr[k] != -1)\n\t\tlut_params->arr_curve_points[k].segments_num\
  \ = seg_distr[k];\n\n\trgb = rgb_resulted;\n\trgb_plus_1 = rgb_resulted + 1;\n\t\
  rgb_minus_1 = rgb;\n\n\ti = 1;\n\twhile (i != hw_points + 1) {\n\n\t\tif (i >= hw_points\
  \ - 1) {\n\t\t\tif (dc_fixpt_lt(rgb_plus_1->red, rgb->red))\n\t\t\t\trgb_plus_1->red\
  \ = dc_fixpt_add(rgb->red, rgb_minus_1->delta_red);\n\t\t\tif (dc_fixpt_lt(rgb_plus_1->green,\
  \ rgb->green))\n\t\t\t\trgb_plus_1->green = dc_fixpt_add(rgb->green, rgb_minus_1->delta_green);\n\
  \t\t\tif (dc_fixpt_lt(rgb_plus_1->blue, rgb->blue))\n\t\t\t\trgb_plus_1->blue =\
  \ dc_fixpt_add(rgb->blue, rgb_minus_1->delta_blue);\n\t\t}\n\n\t\trgb->delta_red\
  \   = dc_fixpt_sub(rgb_plus_1->red,   rgb->red);\n\t\trgb->delta_green = dc_fixpt_sub(rgb_plus_1->green,\
  \ rgb->green);\n\t\trgb->delta_blue  = dc_fixpt_sub(rgb_plus_1->blue,  rgb->blue);\n\
  \n\n\t\tif (fixpoint == true) {\n\t\t\tuint32_t red_clamp = dc_fixpt_clamp_u0d14(rgb->delta_red);\n\
  \t\t\tuint32_t green_clamp = dc_fixpt_clamp_u0d14(rgb->delta_green);\n\t\t\tuint32_t\
  \ blue_clamp = dc_fixpt_clamp_u0d14(rgb->delta_blue);\n\n\t\t\tif (red_clamp >>\
  \ 10 || green_clamp >> 10 || blue_clamp >> 10)\n\t\t\t\tDC_LOG_WARNING(\"Losing\
  \ delta precision while programming shaper LUT.\");\n\n\t\t\trgb->delta_red_reg\
  \   = red_clamp & 0x3ff;\n\t\t\trgb->delta_green_reg = green_clamp & 0x3ff;\n\t\t\
  \trgb->delta_blue_reg  = blue_clamp & 0x3ff;\n\t\t\trgb->red_reg         = dc_fixpt_clamp_u0d14(rgb->red);\n\
  \t\t\trgb->green_reg       = dc_fixpt_clamp_u0d14(rgb->green);\n\t\t\trgb->blue_reg\
  \        = dc_fixpt_clamp_u0d14(rgb->blue);\n\t\t}\n\n\t\t++rgb_plus_1;\n\t\trgb_minus_1\
  \ = rgb;\n\t\t++rgb;\n\t\t++i;\n\t}\n\tcm_helper_convert_to_custom_float(rgb_resulted,\n\
  \t\t\t\t\t\tlut_params->corner_points,\n\t\t\t\t\t\thw_points, fixpoint);\n\n\t\
  return true;\n}\n```\n\n## Bug Fix Patch\n\n```diff\ndiff --git a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\
  \ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\nindex b7e57aa27361..b0d192c6e63e\
  \ 100644\n--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\n+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\n\
  @@ -402,6 +402,11 @@ bool cm_helper_translate_curve_to_hw_format(struct dc_context\
  \ *ctx,\n \t\t\t\ti += increment) {\n \t\t\tif (j == hw_points - 1)\n \t\t\t\tbreak;\n\
  +\t\t\tif (i >= TRANSFER_FUNC_POINTS) {\n+\t\t\t\tDC_LOG_ERROR(\"Index out of bounds:\
  \ i=%d, TRANSFER_FUNC_POINTS=%d\\n\",\n+\t\t\t\t\t     i, TRANSFER_FUNC_POINTS);\n\
  +\t\t\t\treturn false;\n+\t\t\t}\n \t\t\trgb_resulted[j].red = output_tf->tf_pts.red[i];\n\
  \ \t\t\trgb_resulted[j].green = output_tf->tf_pts.green[i];\n \t\t\trgb_resulted[j].blue\
  \ = output_tf->tf_pts.blue[i];\n```\n"
pattern: '## Bug Pattern


  Indexing into a fixed-size transfer-function LUT (output_tf->tf_pts.{red, green,
  blue}) using a computed loop index (i) derived from region offsets and increments
  without validating that i < TRANSFER_FUNC_POINTS. The arithmetic used to compute
  start_index and step can produce i values that exceed the LUT length, leading to
  out-of-bounds array access.'
plan: "Plan\n\n1) Program state customization\n- No custom program state is required.\
  \ We will rely on:\n  - The constraint manager (via inferSymbolMaxVal) to know the\
  \ maximum feasible value for the index symbol on the current path.\n  - Direct AST\
  \ inspection and simple source-text checks (ExprHasName) to recognize the specific\
  \ LUT base expression and the index variable.\n\n2) Callbacks and implementation\
  \ details\n\nA) checkLocation(SVal Loc, bool IsLoad, const Stmt *S, CheckerContext\
  \ &C) \u2014 core detection\n- Goal: Detect reads/writes to output_tf->tf_pts.{red,green,blue}[i]\
  \ where i may exceed the LUT bound TRANSFER_FUNC_POINTS (the declared constant length\
  \ of those arrays).\n\n- Steps:\n  1. Filter to array subscripts:\n     - dyn_cast\
  \ the incoming Stmt S to ArraySubscriptExpr (ASE). If not ASE, return.\n  2. Match\
  \ the specific transfer-function LUT base:\n     - Let BaseE = ASE->getBase()->IgnoreParenImpCasts().\n\
  \     - Heuristic match (simple and robust in this driver code):\n       - Use ExprHasName(BaseE,\
  \ \"output_tf\") AND ExprHasName(BaseE, \"tf_pts\") AND one of ExprHasName(BaseE,\
  \ \"red\")/(\"green\")/(\"blue\").\n       - If not all conditions hold, return.\n\
  \     - Note: This tightly focuses the checker to the exact bug pattern and minimizes\
  \ false positives.\n  3. Require the index to be the loop variable i:\n     - Let\
  \ IdxE = ASE->getIdx()->IgnoreParenImpCasts().\n     - If !ExprHasName(IdxE, \"\
  i\"), return. This avoids flagging the separate \u201Clast point\u201D access via\
  \ start_index.\n  4. Retrieve the array bound (TRANSFER_FUNC_POINTS) from the field\
  \ type:\n     - Recover the MemberExpr for the color channel:\n       - The ASE\
  \ base typically is an ArrayToPointerDecay on a MemberExpr of the field red/green/blue.\
  \ If BaseE is not directly a MemberExpr, call findSpecificTypeInChildren<MemberExpr>(ASE->getBase())\
  \ to get the underlying MemberExpr ColorME whose member is one of red/green/blue.\n\
  \     - From ColorME:\n       - auto *FD = dyn_cast<FieldDecl>(ColorME->getMemberDecl()).\n\
  \       - QualType FT = FD->getType().\n       - If const ConstantArrayType *CAT\
  \ = dyn_cast<ConstantArrayType>(FT.getTypePtr()):\n         - ArraySize = CAT->getSize()\
  \ (llvm::APInt).\n       - If we cannot obtain a ConstantArrayType here, conservatively\
  \ return (do not warn).\n  5. Determine whether the current path guarantees i <\
  \ ArraySize:\n     - Get the symbolic value for the index:\n       - ProgramStateRef\
  \ State = C.getState().\n       - SVal IdxVal = State->getSVal(IdxE, C.getLocationContext()).\n\
  \       - If IdxVal is a concrete integer: Evaluate with EvaluateExprToInt to APSInt\
  \ V; compare V.uge(ArraySize). If true, report; otherwise, return.\n       - If\
  \ IdxVal has a symbol: SymbolRef Sym = IdxVal.getAsSymbol().\n         - const llvm::APSInt\
  \ *Max = inferSymbolMaxVal(Sym, C).\n         - If Max is null:\n           - The\
  \ analyzer could not infer an upper bound for i on this path (which typically means\
  \ no dominating check like \u201Cif (i >= TRANSFER_FUNC_POINTS) return ...\u201D\
  \ was seen). Report a warning.\n         - Else:\n           - Compute Bound = ArraySize\
  \ - 1 (using APInt ops).\n           - If Max->ugt(Bound), report a warning.\n \
  \          - Else, do nothing (path is proven safe, e.g., after \u201Cif (i >= TRANSFER_FUNC_POINTS)\
  \ return false;\u201D).\n  6. Reporting:\n     - Create a BugType once (e.g., static\
  \ std::unique_ptr<BugType> BT).\n     - Generate a non-fatal error node via C.generateNonFatalErrorNode().\n\
  \     - Create a PathSensitiveBugReport with a concise message, e.g.:\n       -\
  \ \"Index i may exceed TRANSFER_FUNC_POINTS when indexing transfer-function LUT\"\
  \n     - Attach the ArraySubscriptExpr as the location.\n     - Emit the report.\n\
  \nNotes on this approach:\n- Path-sensitivity: The post-fix guarded code (\u201C\
  if (i >= TRANSFER_FUNC_POINTS) return false;\u201D) yields a state on the non-returning\
  \ path where the constraint manager knows i < TRANSFER_FUNC_POINTS. inferSymbolMaxVal\
  \ will then provide a safe upper bound and suppress the warning.\n- Pre-fix code:\
  \ There is no constraint tying i to the LUT size; inferSymbolMaxVal returns null\
  \ or a large bound, so we warn.\n- Focus: We only target the exact arrays output_tf->tf_pts.{red,green,blue}\
  \ and index i, avoiding over-reporting.\n\nB) No other callbacks required\n- checkPreCall/checkPostCall,\
  \ checkBind, evalAssume, checkBranchCondition, etc., are not necessary for this\
  \ focused checker. The constraint manager already captures branch assumptions, and\
  \ we only need their effect at use sites (checkLocation).\n\n3) Helper logic to\
  \ include in the plan (small utilities you implement)\n- A helper to fetch ConstantArrayType\
  \ length from the color MemberExpr chain:\n  - Given ASE->getBase(), obtain the\
  \ underlying MemberExpr (color field) via findSpecificTypeInChildren<MemberExpr>.\n\
  \  - From its FieldDecl type, extract ConstantArrayType and size.\n- Use provided\
  \ utilities:\n  - ExprHasName to recognize \"output_tf\", \"tf_pts\", and \"{red,green,blue}\"\
  \ in BaseE, and \"i\" in IdxE.\n  - EvaluateExprToInt to handle constant indices\
  \ (unlikely here but safe).\n  - inferSymbolMaxVal to interrogate the constraint\
  \ manager about i\u2019s maximum on the current path.\n\n4) Reporting message\n\
  - Keep it short and clear:\n  - \"Index i may exceed TRANSFER_FUNC_POINTS when indexing\
  \ transfer-function LUT\""
refined_plan: null
repaired_checker_code: "#include \"clang/StaticAnalyzer/Core/BugReporter/BugReporter.h\"\
  \n#include \"clang/StaticAnalyzer/Core/BugReporter/BugType.h\"\n#include \"clang/StaticAnalyzer/Checkers/Taint.h\"\
  \n#include \"clang/StaticAnalyzer/Core/Checker.h\"\n#include \"clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h\"\
  \n#include \"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h\"\n#include\
  \ \"clang/StaticAnalyzer/Core/PathSensitive/Environment.h\"\n#include \"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h\"\
  \n#include \"clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h\"\n#include\
  \ \"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h\"\n#include \"clang/StaticAnalyzer/Frontend/CheckerRegistry.h\"\
  \n#include \"clang/AST/RecursiveASTVisitor.h\"\n#include \"clang/AST/StmtVisitor.h\"\
  \n#include \"llvm/Support/raw_ostream.h\"\n#include \"clang/StaticAnalyzer/Checkers/utility.h\"\
  \n#include \"clang/AST/ASTContext.h\"\n#include \"clang/AST/Expr.h\"\n#include \"\
  clang/AST/Type.h\"\n#include \"clang/Lex/Lexer.h\"\n#include \"llvm/ADT/APInt.h\"\
  \n#include \"llvm/ADT/APSInt.h\"\n\nusing namespace clang;\nusing namespace ento;\n\
  using namespace taint;\n\nnamespace {\n/* The checker callbacks are to be decided.\
  \ */\nclass SAGenTestChecker : public Checker<check::Location> {\n   mutable std::unique_ptr<BugType>\
  \ BT;\n\n   public:\n      SAGenTestChecker() : BT(new BugType(this, \"Index may\
  \ exceed LUT size\", \"Memory Error\")) {}\n\n      void checkLocation(SVal Loc,\
  \ bool IsLoad, const Stmt *S, CheckerContext &C) const;\n\n   private:\n\n     \
  \ bool isTargetLUTBase(const Expr *Base, CheckerContext &C) const;\n      bool getArrayBoundFromColorMember(const\
  \ Expr *Base, CheckerContext &C, llvm::APInt &OutSize) const;\n      void reportOOB(const\
  \ ArraySubscriptExpr *ASE, CheckerContext &C) const;\n};\n\nbool SAGenTestChecker::isTargetLUTBase(const\
  \ Expr *Base, CheckerContext &C) const {\n  if (!Base)\n    return false;\n  const\
  \ Expr *E = Base->IgnoreParenImpCasts();\n  // Heuristic and focused match:\n  //\
  \ Must contain \"output_tf\", \"tf_pts\" and one of \"red\", \"green\", or \"blue\"\
  \n  if (!ExprHasName(E, \"output_tf\", C))\n    return false;\n  if (!ExprHasName(E,\
  \ \"tf_pts\", C))\n    return false;\n  if (!(ExprHasName(E, \"red\", C) || ExprHasName(E,\
  \ \"green\", C) || ExprHasName(E, \"blue\", C)))\n    return false;\n  return true;\n\
  }\n\nbool SAGenTestChecker::getArrayBoundFromColorMember(const Expr *Base, CheckerContext\
  \ &C, llvm::APInt &OutSize) const {\n  if (!Base)\n    return false;\n\n  // Find\
  \ the MemberExpr that refers to the color array field: red/green/blue\n  const MemberExpr\
  \ *ME = findSpecificTypeInChildren<MemberExpr>(Base);\n  if (!ME)\n    return false;\n\
  \n  const ValueDecl *VD = ME->getMemberDecl();\n  if (!VD)\n    return false;\n\n\
  \  QualType QT = VD->getType();\n\n  // Obtain the array type and ensure it's a\
  \ ConstantArrayType\n  const ArrayType *AT = C.getASTContext().getAsArrayType(QT);\n\
  \  if (!AT)\n    return false;\n\n  const ConstantArrayType *CAT = dyn_cast<ConstantArrayType>(AT);\n\
  \  if (!CAT)\n    return false;\n\n  OutSize = CAT->getSize();\n  return true;\n\
  }\n\nvoid SAGenTestChecker::reportOOB(const ArraySubscriptExpr *ASE, CheckerContext\
  \ &C) const {\n  ExplodedNode *N = C.generateNonFatalErrorNode();\n  if (!N)\n \
  \   return;\n\n  auto R = std::make_unique<PathSensitiveBugReport>(\n      *BT,\
  \ \"Index i may exceed TRANSFER_FUNC_POINTS when indexing transfer-function LUT\"\
  , N);\n  if (ASE)\n    R->addRange(ASE->getSourceRange());\n  C.emitReport(std::move(R));\n\
  }\n\nvoid SAGenTestChecker::checkLocation(SVal /*Loc*/, bool /*IsLoad*/, const Stmt\
  \ *S, CheckerContext &C) const {\n  if (!S)\n    return;\n\n  // We only care about\
  \ array subscript expressions like output_tf->tf_pts.red[i]\n  const auto *ASE =\
  \ dyn_cast<ArraySubscriptExpr>(S);\n  if (!ASE)\n    return;\n\n  const Expr *BaseE\
  \ = ASE->getBase();\n  if (!BaseE)\n    return;\n  if (!isTargetLUTBase(BaseE, C))\n\
  \    return;\n\n  const Expr *IdxE = ASE->getIdx();\n  if (!IdxE)\n    return;\n\
  \  IdxE = IdxE->IgnoreParenImpCasts();\n\n  // Ensure the index is the loop variable\
  \ \"i\" per target pattern\n  if (!ExprHasName(IdxE, \"i\", C))\n    return;\n\n\
  \  // Get the bound from the color member array type (TRANSFER_FUNC_POINTS)\n  llvm::APInt\
  \ ArraySize;\n  if (!getArrayBoundFromColorMember(BaseE, C, ArraySize))\n    return;\
  \ // Can't determine size, don't warn\n\n  // If index is a constant, evaluate directly\n\
  \  llvm::APSInt EvalRes;\n  if (EvaluateExprToInt(EvalRes, IdxE, C)) {\n    uint64_t\
  \ IndexVal = EvalRes.getZExtValue();\n    uint64_t Bound = ArraySize.getZExtValue();\n\
  \    if (IndexVal >= Bound) {\n      reportOOB(ASE, C);\n    }\n    return;\n  }\n\
  \n  // Otherwise, try to infer a max bound for the symbolic index\n  ProgramStateRef\
  \ State = C.getState();\n  SVal IdxSV = State->getSVal(IdxE, C.getLocationContext());\n\
  \  SymbolRef Sym = IdxSV.getAsSymbol();\n  if (!Sym) {\n    // Not a simple symbol\
  \ nor constant; we cannot prove safety, but refrain from noisy reporting\n    return;\n\
  \  }\n\n  const llvm::APSInt *Max = inferSymbolMaxVal(Sym, C);\n  if (!Max) {\n\
  \    // No upper bound known on this path -> potential OOB\n    reportOOB(ASE, C);\n\
  \    return;\n  }\n\n  uint64_t MaxVal = Max->getZExtValue();\n  uint64_t BoundMinus1\
  \ = (ArraySize.getZExtValue() == 0) ? 0 : (ArraySize.getZExtValue() - 1);\n  if\
  \ (MaxVal > BoundMinus1) {\n    reportOOB(ASE, C);\n  }\n}\n\n} // end anonymous\
  \ namespace\n\nextern \"C\" void clang_registerCheckers(CheckerRegistry &registry)\
  \ {\n  registry.addChecker<SAGenTestChecker>(\n      \"custom.SAGenTestChecker\"\
  ,\n      \"Detects out-of-bounds indexing into output_tf->tf_pts.{red,green,blue}[i]\
  \ without bound check\",\n      \"\");\n}\n\nextern \"C\" const char clang_analyzerAPIVersionString[]\
  \ =\n    CLANG_ANALYZER_API_VERSION_STRING;\n"
tn_score: 1
tp_score: 0
