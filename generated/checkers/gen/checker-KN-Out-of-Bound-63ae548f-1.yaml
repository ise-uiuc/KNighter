_base_result_dir: /scratch/chenyuan-data/knighter-dev/result-gpt-5-0814
commit_id: 63ae548f1054a0b71678d0349c7dc9628ddd42ca
commit_type: Out-of-Bound
index: 1
initial_checker_code: "#include \"clang/StaticAnalyzer/Core/BugReporter/BugReporter.h\"\
  \n#include \"clang/StaticAnalyzer/Core/BugReporter/BugType.h\"\n#include \"clang/StaticAnalyzer/Checkers/Taint.h\"\
  \n#include \"clang/StaticAnalyzer/Core/Checker.h\"\n#include \"clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h\"\
  \n#include \"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h\"\n#include\
  \ \"clang/StaticAnalyzer/Core/PathSensitive/Environment.h\"\n#include \"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h\"\
  \n#include \"clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h\"\n#include\
  \ \"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h\"\n#include \"clang/StaticAnalyzer/Frontend/CheckerRegistry.h\"\
  \n#include \"clang/AST/RecursiveASTVisitor.h\"\n#include \"clang/AST/StmtVisitor.h\"\
  \n#include \"llvm/Support/raw_ostream.h\"\n#include \"clang/StaticAnalyzer/Checkers/utility.h\"\
  \n#include \"clang/AST/ASTContext.h\"\n#include \"clang/AST/Expr.h\"\n#include \"\
  clang/AST/Stmt.h\"\n#include \"clang/Lex/Lexer.h\"\n#include \"llvm/ADT/APInt.h\"\
  \n\nusing namespace clang;\nusing namespace ento;\nusing namespace taint;\n\n//\
  \ No custom program state needed.\n\nnamespace {\n\nclass SAGenTestChecker : public\
  \ Checker<check::PreStmt<ArraySubscriptExpr>> {\n   mutable std::unique_ptr<BugType>\
  \ BT;\n\n   public:\n      SAGenTestChecker() : BT(new BugType(this, \"Out-of-bounds\
  \ LUT access\", \"Array bounds\")) {}\n\n      void checkPreStmt(const ArraySubscriptExpr\
  \ *ASE, CheckerContext &C) const;\n\n   private:\n      bool isTfPtsColorArrayAccess(const\
  \ ArraySubscriptExpr *ASE,\n                                   const MemberExpr\
  \ *&ColorME,\n                                   llvm::APInt &ArraySize,\n     \
  \                              CheckerContext &C) const;\n\n      bool inLoop(const\
  \ Stmt *S, CheckerContext &C) const;\n\n      void reportOOB(const ArraySubscriptExpr\
  \ *ASE, CheckerContext &C) const;\n};\n\nbool SAGenTestChecker::inLoop(const Stmt\
  \ *S, CheckerContext &C) const {\n  if (findSpecificTypeInParents<ForStmt>(S, C))\n\
  \    return true;\n  if (findSpecificTypeInParents<WhileStmt>(S, C))\n    return\
  \ true;\n  if (findSpecificTypeInParents<DoStmt>(S, C))\n    return true;\n  return\
  \ false;\n}\n\nbool SAGenTestChecker::isTfPtsColorArrayAccess(const ArraySubscriptExpr\
  \ *ASE,\n                                               const MemberExpr *&ColorME,\n\
  \                                               llvm::APInt &ArraySize,\n      \
  \                                         CheckerContext &C) const {\n  if (!ASE)\n\
  \    return false;\n\n  const Expr *BaseE = ASE->getBase();\n  if (!BaseE)\n   \
  \ return false;\n\n  BaseE = BaseE->IgnoreParenImpCasts();\n\n  const auto *MEColor\
  \ = dyn_cast<MemberExpr>(BaseE);\n  if (!MEColor)\n    return false;\n\n  const\
  \ ValueDecl *VD = MEColor->getMemberDecl();\n  if (!VD)\n    return false;\n\n \
  \ const auto *FD = dyn_cast<FieldDecl>(VD);\n  if (!FD)\n    return false;\n\n \
  \ // Check color field name is one of red/green/blue\n  StringRef FieldName = FD->getName();\n\
  \  if (!(FieldName.equals(\"red\") || FieldName.equals(\"green\") || FieldName.equals(\"\
  blue\")))\n    return false;\n\n  // Confirm the base contains \"tf_pts\" (e.g.,\
  \ output_tf->tf_pts.red)\n  const Expr *TFPtsBase = MEColor->getBase();\n  if (!TFPtsBase)\n\
  \    return false;\n\n  if (!ExprHasName(TFPtsBase, \"tf_pts\", C))\n    return\
  \ false;\n\n  // Retrieve the compile-time bound for the color array\n  QualType\
  \ FT = FD->getType();\n  const ConstantArrayType *CAT = C.getASTContext().getAsConstantArrayType(FT);\n\
  \  if (!CAT)\n    return false; // Can't determine bound, skip.\n\n  ArraySize =\
  \ CAT->getSize();\n  ColorME = MEColor;\n  return true;\n}\n\nvoid SAGenTestChecker::reportOOB(const\
  \ ArraySubscriptExpr *ASE, CheckerContext &C) const {\n  ExplodedNode *N = C.generateNonFatalErrorNode();\n\
  \  if (!N)\n    return;\n\n  auto R = std::make_unique<PathSensitiveBugReport>(\n\
  \      *BT, \"Index may exceed LUT size in tf_pts.<color>[i]\", N);\n  R->addRange(ASE->getSourceRange());\n\
  \  C.emitReport(std::move(R));\n}\n\nvoid SAGenTestChecker::checkPreStmt(const ArraySubscriptExpr\
  \ *ASE, CheckerContext &C) const {\n  // 1) Match output_tf->tf_pts.{red|green|blue}[...]\n\
  \  const MemberExpr *ColorME = nullptr;\n  llvm::APInt ArrSize;\n  if (!isTfPtsColorArrayAccess(ASE,\
  \ ColorME, ArrSize, C))\n    return;\n\n  // 2) Only focus on loop-based indexing\
  \ (pattern-specific)\n  if (!inLoop(ASE, C))\n    return;\n\n  // 3) Analyze the\
  \ index expression\n  const Expr *IdxE = ASE->getIdx();\n  if (!IdxE)\n    return;\n\
  \n  // Try to evaluate constant index\n  llvm::APSInt EvalRes;\n  if (EvaluateExprToInt(EvalRes,\
  \ IdxE, C)) {\n    // If negative or >= size -> OOB\n    bool IsNeg = EvalRes.isSigned()\
  \ && EvalRes.isNegative();\n    uint64_t IdxVal = EvalRes.isSigned() ? (uint64_t)EvalRes.getSExtValue()\n\
  \                                         : EvalRes.getZExtValue();\n    if (IsNeg\
  \ || IdxVal >= ArrSize.getZExtValue()) {\n      reportOOB(ASE, C);\n    }\n    return;\
  \ // either reported or proven safe here\n  }\n\n  // Otherwise, rely on symbolic\
  \ bounds\n  ProgramStateRef State = C.getState();\n  SVal SV = State->getSVal(IdxE,\
  \ C.getLocationContext());\n  SymbolRef Sym = SV.getAsSymbol();\n\n  if (!Sym) {\n\
  \    // No symbolic info; cannot prove safe.\n    reportOOB(ASE, C);\n    return;\n\
  \  }\n\n  const llvm::APSInt *Max = inferSymbolMaxVal(Sym, C);\n  if (Max) {\n \
  \   // If max < size, safe on this path; otherwise report\n    uint64_t MaxVal =\
  \ Max->isSigned() ? (uint64_t)Max->getSExtValue()\n                            \
  \          : Max->getZExtValue();\n    if (MaxVal < ArrSize.getZExtValue())\n  \
  \    return; // proven safe\n    reportOOB(ASE, C);\n    return;\n  }\n\n  // Unknown\
  \ max, cannot prove safe -> report\n  reportOOB(ASE, C);\n}\n\n} // end anonymous\
  \ namespace\n\nextern \"C\" void clang_registerCheckers(CheckerRegistry &registry)\
  \ {\n  registry.addChecker<SAGenTestChecker>(\n      \"custom.SAGenTestChecker\"\
  ,\n      \"Detects missing bounds validation when indexing tf_pts.{red,green,blue}\
  \ LUTs in loops\",\n      \"\");\n}\n\nextern \"C\" const char clang_analyzerAPIVersionString[]\
  \ =\n    CLANG_ANALYZER_API_VERSION_STRING;\n"
patch: "## Patch Description\n\ndrm/amd/display: Fix potential index out of bounds\
  \ in color transformation function\n\nFixes index out of bounds issue in the color\
  \ transformation function.\nThe issue could occur when the index 'i' exceeds the\
  \ number of transfer\nfunction points (TRANSFER_FUNC_POINTS).\n\nThe fix adds a\
  \ check to ensure 'i' is within bounds before accessing the\ntransfer function points.\
  \ If 'i' is out of bounds, an error message is\nlogged and the function returns\
  \ false to indicate an error.\n\nReported by smatch:\ndrivers/gpu/drm/amd/amdgpu/../display/dc/dcn10/dcn10_cm_common.c:405\
  \ cm_helper_translate_curve_to_hw_format() error: buffer overflow 'output_tf->tf_pts.red'\
  \ 1025 <= s32max\ndrivers/gpu/drm/amd/amdgpu/../display/dc/dcn10/dcn10_cm_common.c:406\
  \ cm_helper_translate_curve_to_hw_format() error: buffer overflow 'output_tf->tf_pts.green'\
  \ 1025 <= s32max\ndrivers/gpu/drm/amd/amdgpu/../display/dc/dcn10/dcn10_cm_common.c:407\
  \ cm_helper_translate_curve_to_hw_format() error: buffer overflow 'output_tf->tf_pts.blue'\
  \ 1025 <= s32max\n\nFixes: b629596072e5 (\"drm/amd/display: Build unity lut for\
  \ shaper\")\nCc: Vitaly Prosyak <vitaly.prosyak@amd.com>\nCc: Charlene Liu <Charlene.Liu@amd.com>\n\
  Cc: Harry Wentland <harry.wentland@amd.com>\nCc: Rodrigo Siqueira <Rodrigo.Siqueira@amd.com>\n\
  Cc: Roman Li <roman.li@amd.com>\nCc: Aurabindo Pillai <aurabindo.pillai@amd.com>\n\
  Cc: Tom Chung <chiahsuan.chung@amd.com>\nSigned-off-by: Srinivasan Shanmugam <srinivasan.shanmugam@amd.com>\n\
  Reviewed-by: Tom Chung <chiahsuan.chung@amd.com>\nSigned-off-by: Alex Deucher <alexander.deucher@amd.com>\n\
  \n## Buggy Code\n\n```c\n// Function: cm_helper_translate_curve_to_hw_format in\
  \ drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\nbool cm_helper_translate_curve_to_hw_format(struct\
  \ dc_context *ctx,\n\t\t\t\tconst struct dc_transfer_func *output_tf,\n\t\t\t\t\
  struct pwl_params *lut_params, bool fixpoint)\n{\n\tstruct curve_points3 *corner_points;\n\
  \tstruct pwl_result_data *rgb_resulted;\n\tstruct pwl_result_data *rgb;\n\tstruct\
  \ pwl_result_data *rgb_plus_1;\n\tstruct pwl_result_data *rgb_minus_1;\n\n\tint32_t\
  \ region_start, region_end;\n\tint32_t i;\n\tuint32_t j, k, seg_distr[MAX_REGIONS_NUMBER],\
  \ increment, start_index, hw_points;\n\n\tif (output_tf == NULL || lut_params ==\
  \ NULL || output_tf->type == TF_TYPE_BYPASS)\n\t\treturn false;\n\n\tcorner_points\
  \ = lut_params->corner_points;\n\trgb_resulted = lut_params->rgb_resulted;\n\thw_points\
  \ = 0;\n\n\tmemset(lut_params, 0, sizeof(struct pwl_params));\n\tmemset(seg_distr,\
  \ 0, sizeof(seg_distr));\n\n\tif (output_tf->tf == TRANSFER_FUNCTION_PQ || output_tf->tf\
  \ == TRANSFER_FUNCTION_GAMMA22) {\n\t\t/* 32 segments\n\t\t * segments are from\
  \ 2^-25 to 2^7\n\t\t */\n\t\tfor (i = 0; i < NUMBER_REGIONS ; i++)\n\t\t\tseg_distr[i]\
  \ = 3;\n\n\t\tregion_start = -MAX_LOW_POINT;\n\t\tregion_end   = NUMBER_REGIONS\
  \ - MAX_LOW_POINT;\n\t} else {\n\t\t/* 11 segments\n\t\t * segment is from 2^-10\
  \ to 2^1\n\t\t * There are less than 256 points, for optimization\n\t\t */\n\t\t\
  seg_distr[0] = 3;\n\t\tseg_distr[1] = 4;\n\t\tseg_distr[2] = 4;\n\t\tseg_distr[3]\
  \ = 4;\n\t\tseg_distr[4] = 4;\n\t\tseg_distr[5] = 4;\n\t\tseg_distr[6] = 4;\n\t\t\
  seg_distr[7] = 4;\n\t\tseg_distr[8] = 4;\n\t\tseg_distr[9] = 4;\n\t\tseg_distr[10]\
  \ = 1;\n\n\t\tregion_start = -10;\n\t\tregion_end = 1;\n\t}\n\n\tfor (i = region_end\
  \ - region_start; i < MAX_REGIONS_NUMBER ; i++)\n\t\tseg_distr[i] = -1;\n\n\tfor\
  \ (k = 0; k < MAX_REGIONS_NUMBER; k++) {\n\t\tif (seg_distr[k] != -1)\n\t\t\thw_points\
  \ += (1 << seg_distr[k]);\n\t}\n\n\tj = 0;\n\tfor (k = 0; k < (region_end - region_start);\
  \ k++) {\n\t\tincrement = NUMBER_SW_SEGMENTS / (1 << seg_distr[k]);\n\t\tstart_index\
  \ = (region_start + k + MAX_LOW_POINT) *\n\t\t\t\tNUMBER_SW_SEGMENTS;\n\t\tfor (i\
  \ = start_index; i < start_index + NUMBER_SW_SEGMENTS;\n\t\t\t\ti += increment)\
  \ {\n\t\t\tif (j == hw_points - 1)\n\t\t\t\tbreak;\n\t\t\trgb_resulted[j].red =\
  \ output_tf->tf_pts.red[i];\n\t\t\trgb_resulted[j].green = output_tf->tf_pts.green[i];\n\
  \t\t\trgb_resulted[j].blue = output_tf->tf_pts.blue[i];\n\t\t\tj++;\n\t\t}\n\t}\n\
  \n\t/* last point */\n\tstart_index = (region_end + MAX_LOW_POINT) * NUMBER_SW_SEGMENTS;\n\
  \trgb_resulted[hw_points - 1].red = output_tf->tf_pts.red[start_index];\n\trgb_resulted[hw_points\
  \ - 1].green = output_tf->tf_pts.green[start_index];\n\trgb_resulted[hw_points -\
  \ 1].blue = output_tf->tf_pts.blue[start_index];\n\n\trgb_resulted[hw_points].red\
  \ = rgb_resulted[hw_points - 1].red;\n\trgb_resulted[hw_points].green = rgb_resulted[hw_points\
  \ - 1].green;\n\trgb_resulted[hw_points].blue = rgb_resulted[hw_points - 1].blue;\n\
  \n\t// All 3 color channels have same x\n\tcorner_points[0].red.x = dc_fixpt_pow(dc_fixpt_from_int(2),\n\
  \t\t\t\t\t     dc_fixpt_from_int(region_start));\n\tcorner_points[0].green.x = corner_points[0].red.x;\n\
  \tcorner_points[0].blue.x = corner_points[0].red.x;\n\n\tcorner_points[1].red.x\
  \ = dc_fixpt_pow(dc_fixpt_from_int(2),\n\t\t\t\t\t     dc_fixpt_from_int(region_end));\n\
  \tcorner_points[1].green.x = corner_points[1].red.x;\n\tcorner_points[1].blue.x\
  \ = corner_points[1].red.x;\n\n\tcorner_points[0].red.y = rgb_resulted[0].red;\n\
  \tcorner_points[0].green.y = rgb_resulted[0].green;\n\tcorner_points[0].blue.y =\
  \ rgb_resulted[0].blue;\n\n\tcorner_points[0].red.slope = dc_fixpt_div(corner_points[0].red.y,\n\
  \t\t\tcorner_points[0].red.x);\n\tcorner_points[0].green.slope = dc_fixpt_div(corner_points[0].green.y,\n\
  \t\t\tcorner_points[0].green.x);\n\tcorner_points[0].blue.slope = dc_fixpt_div(corner_points[0].blue.y,\n\
  \t\t\tcorner_points[0].blue.x);\n\n\t/* see comment above, m_arrPoints[1].y should\
  \ be the Y value for the\n\t * region end (m_numOfHwPoints), not last HW point(m_numOfHwPoints\
  \ - 1)\n\t */\n\tcorner_points[1].red.y = rgb_resulted[hw_points - 1].red;\n\tcorner_points[1].green.y\
  \ = rgb_resulted[hw_points - 1].green;\n\tcorner_points[1].blue.y = rgb_resulted[hw_points\
  \ - 1].blue;\n\tcorner_points[1].red.slope = dc_fixpt_zero;\n\tcorner_points[1].green.slope\
  \ = dc_fixpt_zero;\n\tcorner_points[1].blue.slope = dc_fixpt_zero;\n\n\tif (output_tf->tf\
  \ == TRANSFER_FUNCTION_PQ) {\n\t\t/* for PQ, we want to have a straight line from\
  \ last HW X point,\n\t\t * and the slope to be such that we hit 1.0 at 10000 nits.\n\
  \t\t */\n\t\tconst struct fixed31_32 end_value =\n\t\t\t\tdc_fixpt_from_int(125);\n\
  \n\t\tcorner_points[1].red.slope = dc_fixpt_div(\n\t\t\tdc_fixpt_sub(dc_fixpt_one,\
  \ corner_points[1].red.y),\n\t\t\tdc_fixpt_sub(end_value, corner_points[1].red.x));\n\
  \t\tcorner_points[1].green.slope = dc_fixpt_div(\n\t\t\tdc_fixpt_sub(dc_fixpt_one,\
  \ corner_points[1].green.y),\n\t\t\tdc_fixpt_sub(end_value, corner_points[1].green.x));\n\
  \t\tcorner_points[1].blue.slope = dc_fixpt_div(\n\t\t\tdc_fixpt_sub(dc_fixpt_one,\
  \ corner_points[1].blue.y),\n\t\t\tdc_fixpt_sub(end_value, corner_points[1].blue.x));\n\
  \t}\n\n\tlut_params->hw_points_num = hw_points;\n\n\tk = 0;\n\tfor (i = 1; i < MAX_REGIONS_NUMBER;\
  \ i++) {\n\t\tif (seg_distr[k] != -1) {\n\t\t\tlut_params->arr_curve_points[k].segments_num\
  \ =\n\t\t\t\t\tseg_distr[k];\n\t\t\tlut_params->arr_curve_points[i].offset =\n\t\
  \t\t\t\tlut_params->arr_curve_points[k].offset + (1 << seg_distr[k]);\n\t\t}\n\t\
  \tk++;\n\t}\n\n\tif (seg_distr[k] != -1)\n\t\tlut_params->arr_curve_points[k].segments_num\
  \ = seg_distr[k];\n\n\trgb = rgb_resulted;\n\trgb_plus_1 = rgb_resulted + 1;\n\t\
  rgb_minus_1 = rgb;\n\n\ti = 1;\n\twhile (i != hw_points + 1) {\n\n\t\tif (i >= hw_points\
  \ - 1) {\n\t\t\tif (dc_fixpt_lt(rgb_plus_1->red, rgb->red))\n\t\t\t\trgb_plus_1->red\
  \ = dc_fixpt_add(rgb->red, rgb_minus_1->delta_red);\n\t\t\tif (dc_fixpt_lt(rgb_plus_1->green,\
  \ rgb->green))\n\t\t\t\trgb_plus_1->green = dc_fixpt_add(rgb->green, rgb_minus_1->delta_green);\n\
  \t\t\tif (dc_fixpt_lt(rgb_plus_1->blue, rgb->blue))\n\t\t\t\trgb_plus_1->blue =\
  \ dc_fixpt_add(rgb->blue, rgb_minus_1->delta_blue);\n\t\t}\n\n\t\trgb->delta_red\
  \   = dc_fixpt_sub(rgb_plus_1->red,   rgb->red);\n\t\trgb->delta_green = dc_fixpt_sub(rgb_plus_1->green,\
  \ rgb->green);\n\t\trgb->delta_blue  = dc_fixpt_sub(rgb_plus_1->blue,  rgb->blue);\n\
  \n\n\t\tif (fixpoint == true) {\n\t\t\tuint32_t red_clamp = dc_fixpt_clamp_u0d14(rgb->delta_red);\n\
  \t\t\tuint32_t green_clamp = dc_fixpt_clamp_u0d14(rgb->delta_green);\n\t\t\tuint32_t\
  \ blue_clamp = dc_fixpt_clamp_u0d14(rgb->delta_blue);\n\n\t\t\tif (red_clamp >>\
  \ 10 || green_clamp >> 10 || blue_clamp >> 10)\n\t\t\t\tDC_LOG_WARNING(\"Losing\
  \ delta precision while programming shaper LUT.\");\n\n\t\t\trgb->delta_red_reg\
  \   = red_clamp & 0x3ff;\n\t\t\trgb->delta_green_reg = green_clamp & 0x3ff;\n\t\t\
  \trgb->delta_blue_reg  = blue_clamp & 0x3ff;\n\t\t\trgb->red_reg         = dc_fixpt_clamp_u0d14(rgb->red);\n\
  \t\t\trgb->green_reg       = dc_fixpt_clamp_u0d14(rgb->green);\n\t\t\trgb->blue_reg\
  \        = dc_fixpt_clamp_u0d14(rgb->blue);\n\t\t}\n\n\t\t++rgb_plus_1;\n\t\trgb_minus_1\
  \ = rgb;\n\t\t++rgb;\n\t\t++i;\n\t}\n\tcm_helper_convert_to_custom_float(rgb_resulted,\n\
  \t\t\t\t\t\tlut_params->corner_points,\n\t\t\t\t\t\thw_points, fixpoint);\n\n\t\
  return true;\n}\n```\n\n## Bug Fix Patch\n\n```diff\ndiff --git a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\
  \ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\nindex b7e57aa27361..b0d192c6e63e\
  \ 100644\n--- a/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\n+++ b/drivers/gpu/drm/amd/display/dc/dcn10/dcn10_cm_common.c\n\
  @@ -402,6 +402,11 @@ bool cm_helper_translate_curve_to_hw_format(struct dc_context\
  \ *ctx,\n \t\t\t\ti += increment) {\n \t\t\tif (j == hw_points - 1)\n \t\t\t\tbreak;\n\
  +\t\t\tif (i >= TRANSFER_FUNC_POINTS) {\n+\t\t\t\tDC_LOG_ERROR(\"Index out of bounds:\
  \ i=%d, TRANSFER_FUNC_POINTS=%d\\n\",\n+\t\t\t\t\t     i, TRANSFER_FUNC_POINTS);\n\
  +\t\t\t\treturn false;\n+\t\t\t}\n \t\t\trgb_resulted[j].red = output_tf->tf_pts.red[i];\n\
  \ \t\t\trgb_resulted[j].green = output_tf->tf_pts.green[i];\n \t\t\trgb_resulted[j].blue\
  \ = output_tf->tf_pts.blue[i];\n```\n"
pattern: "## Bug Pattern\n\nUsing a computed loop index to access fixed-size LUT arrays\
  \ without bounds validation:\n- Accessing output_tf->tf_pts.{red, green, blue}[i]\
  \ where i is derived from start_index and increment, but not checked against TRANSFER_FUNC_POINTS.\n\
  - Example:\n  rgb_resulted[j].red = output_tf->tf_pts.red[i];  // missing: if (i\
  \ >= TRANSFER_FUNC_POINTS) error\n\nThis leads to potential out-of-bounds reads\
  \ when i >= TRANSFER_FUNC_POINTS."
plan: "Plan\n\n1. Program state\n- No custom program state is required. We will rely\
  \ on the analyzer\u2019s constraint manager (inferSymbolMaxVal) to reason about\
  \ loop-guarded constraints. This keeps the checker simple and path-sensitive without\
  \ extra state.\n\n2. Callbacks and core logic\n- Use checkPreStmt<const ArraySubscriptExpr>\n\
  \  - Goal: Detect accesses to output_tf->tf_pts.{red|green|blue}[idx] where idx\
  \ may exceed the fixed LUT size and no prior bound guarantees exist.\n  - Steps:\n\
  \    1) Filter for the target LUT arrays:\n       - Let ASE be the current ArraySubscriptExpr.\n\
  \       - Extract the uncasted base expression B = ASE->getBase()->IgnoreParenImpCasts().\n\
  \       - Expect B to be a MemberExpr (ME1) directly referring to a color channel\
  \ field name: red, green, or blue.\n       - Ensure ME1\u2019s base is another MemberExpr\
  \ (ME0) or expression whose source text contains \"tf_pts\" (use ExprHasName on\
  \ ME1->getBase(), with \"tf_pts\"). This targets output_tf->tf_pts.red (and green/blue).\n\
  \       - If not matching both the channel name and \"tf_pts\", return (avoid false\
  \ positives).\n    2) Retrieve the compile-time array bound:\n       - From ME1,\
  \ get the FieldDecl F = cast<FieldDecl>(ME1->getMemberDecl()).\n       - Obtain\
  \ F->getType(). If it is ConstantArrayType, fetch the bound (ArraySize).\n     \
  \  - If not ConstantArrayType (e.g., it decayed to pointer), attempt to inspect\
  \ F->getTypeSourceInfo()->getType() similarly; if still not constant, return (cannot\
  \ compare \u21D2 no warning).\n    3) Confirm we are in a loop to reduce noise (focus\
  \ on computed loop indices):\n       - Find an enclosing ForStmt (or WhileStmt)\
  \ using findSpecificTypeInParents<ForStmt>(ASE, C) or findSpecificTypeInParents<WhileStmt>(ASE,\
  \ C). If neither exists, return (skip non-loop indexing to match the pattern).\n\
  \    4) Analyze the index expression:\n       - Let IdxE = ASE->getIdx().\n    \
  \   - Try EvaluateExprToInt on IdxE:\n         - If it evaluates to a constant:\n\
  \           - If constant >= ArraySize, report a definite out-of-bounds access.\n\
  \           - Else constant < ArraySize: safe; return.\n       - Otherwise, obtain\
  \ the SVal of IdxE: SVal SV = C.getState()->getSVal(IdxE, C.getLocationContext()).\n\
  \         - Extract SymbolRef Sym = SV.getAsSymbol(). If no symbol is available,\
  \ conservatively continue (cannot prove safe).\n         - Use inferSymbolMaxVal(Sym,\
  \ C):\n           - If a max value Max is obtained:\n             - If Max < ArraySize,\
  \ the access is proven safe on this path; return.\n             - Else (Max >= ArraySize),\
  \ it may overflow; continue to reporting.\n           - If no Max (unknown), we\
  \ cannot prove safety; continue to reporting.\n    5) Report the potential OOB:\n\
  \       - Create a non-fatal error node with generateNonFatalErrorNode.\n      \
  \ - Emit a PathSensitiveBugReport with a short message, e.g.:\n         - \"Possible\
  \ out-of-bounds: loop index may exceed LUT size when accessing tf_pts.<color>[i].\"\
  \n       - Add a note at the ArraySubscriptExpr location. Optionally mention: \"\
  Add `if (i >= TRANSFER_FUNC_POINTS) return ...;` guard\" in the description.\n\n\
  3. Optional refinements to reduce false positives (simple heuristics)\n- Verify\
  \ index is the loop\u2019s induction variable:\n  - For a ForStmt, try to extract\
  \ the increment expression (e.g., i += inc or ++i) and check if IdxE\u2019s textual\
  \ representation (ExprHasName) contains that variable\u2019s name. If it does not,\
  \ skip reporting to stay close to the target pattern.\n- Skip if there is an explicit\
  \ bound guard reachable on this path:\n  - Not required to implement explicitly.\
  \ The constraint manager will already eliminate warnings when the branch condition\
  \ (e.g., i < TRANSFER_FUNC_POINTS) holds on the current path (inferSymbolMaxVal\
  \ will return a Max below bound).\n\n4. Why this works for the target bug\n- The\
  \ buggy code uses a computed loop index i derived from start_index and increment,\
  \ and accesses output_tf->tf_pts.red[i] (and green/blue) without validating i against\
  \ TRANSFER_FUNC_POINTS. There is also the \u201Cj == hw_points - 1\u201D break which\
  \ does not imply i < TRANSFER_FUNC_POINTS.\n- Our checker:\n  - Precisely matches\
  \ tf_pts.{red|green|blue}[...] in loops.\n  - Retrieves the compile-time bound from\
  \ the field\u2019s ConstantArrayType.\n  - Uses path constraints to see if i is\
  \ guaranteed < bound. If not, it reports the potential OOB.\n- The fix (adding if\
  \ (i >= TRANSFER_FUNC_POINTS) return false) would constrain i on the safe path,\
  \ and our checker would no longer report a warning there.\n\n5. Utility functions\
  \ used\n- ExprHasName to match \"tf_pts\" and \"red|green|blue\" in the base expression.\n\
  - inferSymbolMaxVal to get an upper bound for the index symbol from path constraints.\n\
  - EvaluateExprToInt to handle constant indices.\n- findSpecificTypeInParents<ForStmt>/<WhileStmt>\
  \ to ensure we focus on loop-based indexing."
refined_plan: null
repaired_checker_code: "#include \"clang/StaticAnalyzer/Core/BugReporter/BugReporter.h\"\
  \n#include \"clang/StaticAnalyzer/Core/BugReporter/BugType.h\"\n#include \"clang/StaticAnalyzer/Checkers/Taint.h\"\
  \n#include \"clang/StaticAnalyzer/Core/Checker.h\"\n#include \"clang/StaticAnalyzer/Core/PathSensitive/CallEvent.h\"\
  \n#include \"clang/StaticAnalyzer/Core/PathSensitive/CheckerContext.h\"\n#include\
  \ \"clang/StaticAnalyzer/Core/PathSensitive/Environment.h\"\n#include \"clang/StaticAnalyzer/Core/PathSensitive/ProgramState.h\"\
  \n#include \"clang/StaticAnalyzer/Core/PathSensitive/ProgramStateTrait.h\"\n#include\
  \ \"clang/StaticAnalyzer/Core/PathSensitive/SymExpr.h\"\n#include \"clang/StaticAnalyzer/Frontend/CheckerRegistry.h\"\
  \n#include \"clang/AST/RecursiveASTVisitor.h\"\n#include \"clang/AST/StmtVisitor.h\"\
  \n#include \"llvm/Support/raw_ostream.h\"\n#include \"clang/StaticAnalyzer/Checkers/utility.h\"\
  \n#include \"clang/AST/ASTContext.h\"\n#include \"clang/AST/Expr.h\"\n#include \"\
  clang/AST/Stmt.h\"\n#include \"clang/Lex/Lexer.h\"\n#include \"llvm/ADT/APInt.h\"\
  \n\nusing namespace clang;\nusing namespace ento;\nusing namespace taint;\n\n//\
  \ No custom program state needed.\n\nnamespace {\n\nclass SAGenTestChecker : public\
  \ Checker<check::PreStmt<ArraySubscriptExpr>> {\n   mutable std::unique_ptr<BugType>\
  \ BT;\n\n   public:\n      SAGenTestChecker() : BT(new BugType(this, \"Out-of-bounds\
  \ LUT access\", \"Array bounds\")) {}\n\n      void checkPreStmt(const ArraySubscriptExpr\
  \ *ASE, CheckerContext &C) const;\n\n   private:\n      bool isTfPtsColorArrayAccess(const\
  \ ArraySubscriptExpr *ASE,\n                                   const MemberExpr\
  \ *&ColorME,\n                                   llvm::APInt &ArraySize,\n     \
  \                              CheckerContext &C) const;\n\n      bool inLoop(const\
  \ Stmt *S, CheckerContext &C) const;\n\n      void reportOOB(const ArraySubscriptExpr\
  \ *ASE, CheckerContext &C) const;\n};\n\nbool SAGenTestChecker::inLoop(const Stmt\
  \ *S, CheckerContext &C) const {\n  if (findSpecificTypeInParents<ForStmt>(S, C))\n\
  \    return true;\n  if (findSpecificTypeInParents<WhileStmt>(S, C))\n    return\
  \ true;\n  if (findSpecificTypeInParents<DoStmt>(S, C))\n    return true;\n  return\
  \ false;\n}\n\nbool SAGenTestChecker::isTfPtsColorArrayAccess(const ArraySubscriptExpr\
  \ *ASE,\n                                               const MemberExpr *&ColorME,\n\
  \                                               llvm::APInt &ArraySize,\n      \
  \                                         CheckerContext &C) const {\n  if (!ASE)\n\
  \    return false;\n\n  const Expr *BaseE = ASE->getBase();\n  if (!BaseE)\n   \
  \ return false;\n\n  BaseE = BaseE->IgnoreParenImpCasts();\n\n  const auto *MEColor\
  \ = dyn_cast<MemberExpr>(BaseE);\n  if (!MEColor)\n    return false;\n\n  const\
  \ ValueDecl *VD = MEColor->getMemberDecl();\n  if (!VD)\n    return false;\n\n \
  \ const auto *FD = dyn_cast<FieldDecl>(VD);\n  if (!FD)\n    return false;\n\n \
  \ // Check color field name is one of red/green/blue\n  StringRef FieldName = FD->getName();\n\
  \  if (!(FieldName.equals(\"red\") || FieldName.equals(\"green\") || FieldName.equals(\"\
  blue\")))\n    return false;\n\n  // Confirm the base contains \"tf_pts\" (e.g.,\
  \ output_tf->tf_pts.red)\n  const Expr *TFPtsBase = MEColor->getBase();\n  if (!TFPtsBase)\n\
  \    return false;\n\n  if (!ExprHasName(TFPtsBase, \"tf_pts\", C))\n    return\
  \ false;\n\n  // Retrieve the compile-time bound for the color array\n  QualType\
  \ FT = FD->getType();\n  const ConstantArrayType *CAT = C.getASTContext().getAsConstantArrayType(FT);\n\
  \  if (!CAT)\n    return false; // Can't determine bound, skip.\n\n  ArraySize =\
  \ CAT->getSize();\n  ColorME = MEColor;\n  return true;\n}\n\nvoid SAGenTestChecker::reportOOB(const\
  \ ArraySubscriptExpr *ASE, CheckerContext &C) const {\n  ExplodedNode *N = C.generateNonFatalErrorNode();\n\
  \  if (!N)\n    return;\n\n  auto R = std::make_unique<PathSensitiveBugReport>(\n\
  \      *BT, \"Index may exceed LUT size in tf_pts.<color>[i]\", N);\n  R->addRange(ASE->getSourceRange());\n\
  \  C.emitReport(std::move(R));\n}\n\nvoid SAGenTestChecker::checkPreStmt(const ArraySubscriptExpr\
  \ *ASE, CheckerContext &C) const {\n  // 1) Match output_tf->tf_pts.{red|green|blue}[...]\n\
  \  const MemberExpr *ColorME = nullptr;\n  llvm::APInt ArrSize;\n  if (!isTfPtsColorArrayAccess(ASE,\
  \ ColorME, ArrSize, C))\n    return;\n\n  // 2) Only focus on loop-based indexing\
  \ (pattern-specific)\n  if (!inLoop(ASE, C))\n    return;\n\n  // 3) Analyze the\
  \ index expression\n  const Expr *IdxE = ASE->getIdx();\n  if (!IdxE)\n    return;\n\
  \n  // Try to evaluate constant index\n  llvm::APSInt EvalRes;\n  if (EvaluateExprToInt(EvalRes,\
  \ IdxE, C)) {\n    // If negative or >= size -> OOB\n    bool IsNeg = EvalRes.isSigned()\
  \ && EvalRes.isNegative();\n    uint64_t IdxVal = EvalRes.isSigned() ? (uint64_t)EvalRes.getSExtValue()\n\
  \                                         : EvalRes.getZExtValue();\n    if (IsNeg\
  \ || IdxVal >= ArrSize.getZExtValue()) {\n      reportOOB(ASE, C);\n    }\n    return;\
  \ // either reported or proven safe here\n  }\n\n  // Otherwise, rely on symbolic\
  \ bounds\n  ProgramStateRef State = C.getState();\n  SVal SV = State->getSVal(IdxE,\
  \ C.getLocationContext());\n  SymbolRef Sym = SV.getAsSymbol();\n\n  if (!Sym) {\n\
  \    // No symbolic info; cannot prove safe.\n    reportOOB(ASE, C);\n    return;\n\
  \  }\n\n  const llvm::APSInt *Max = inferSymbolMaxVal(Sym, C);\n  if (Max) {\n \
  \   // If max < size, safe on this path; otherwise report\n    uint64_t MaxVal =\
  \ Max->isSigned() ? (uint64_t)Max->getSExtValue()\n                            \
  \          : Max->getZExtValue();\n    if (MaxVal < ArrSize.getZExtValue())\n  \
  \    return; // proven safe\n    reportOOB(ASE, C);\n    return;\n  }\n\n  // Unknown\
  \ max, cannot prove safe -> report\n  reportOOB(ASE, C);\n}\n\n} // end anonymous\
  \ namespace\n\nextern \"C\" void clang_registerCheckers(CheckerRegistry &registry)\
  \ {\n  registry.addChecker<SAGenTestChecker>(\n      \"custom.SAGenTestChecker\"\
  ,\n      \"Detects missing bounds validation when indexing tf_pts.{red,green,blue}\
  \ LUTs in loops\",\n      \"\");\n}\n\nextern \"C\" const char clang_analyzerAPIVersionString[]\
  \ =\n    CLANG_ANALYZER_API_VERSION_STRING;\n"
tn_score: 1
tp_score: 0
